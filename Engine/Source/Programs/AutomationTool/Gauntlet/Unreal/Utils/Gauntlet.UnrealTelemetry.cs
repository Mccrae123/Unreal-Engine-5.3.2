// Copyright Epic Games, Inc. All Rights Reserved.

using System;
using System.IO;
using System.Collections.Generic;
using AutomationTool;
using UnrealBuildTool;
using EpicGames.Core;


namespace Gauntlet
{
	/// <summary>
	/// Utility functions for Unreal Automation Telemetry
	/// </summary>
	static class UnrealAutomationTelemetry
	{
		/// <summary>
		/// Gather csv telemetry outputs generated by UE automated tests and add them to a test report
		/// </summary>
		/// <param name="TelemetryDirectory"></param>
		/// <param name="TelemetryReport"></param>
		/// <param name="Mapping"></param>
		static public void LoadOutputsIntoReport(string TelemetryDirectory, ITelemetryReport TelemetryReport, Dictionary<string, string> Mapping = null)
		{
			// Scan for csv files
			foreach (string File in Directory.GetFiles(TelemetryDirectory))
			{
				if (Path.GetExtension(File) != ".csv")
				{
					continue;
				}

				LoadCSVOutputIntoReport(File, TelemetryReport, Mapping);
			}
		}

		/// <summary>
		/// Gather telemetry data from csv file generated by UE automated tests and add them to a test report
		/// </summary>
		/// <param name="File"></param>
		/// <param name="TelemetryReport"></param>
		/// <param name="Mapping"></param>
		static public void LoadCSVOutputIntoReport(string File, ITelemetryReport TelemetryReport, Dictionary<string, string> Mapping = null)
		{ 
			List<Dictionary<string, string>> CSVData = null;
			try
			{
				CSVData = CSVParser.Load(File);
			}
			catch (Exception Ex)
			{
				Log.Error("Telemetry - Failed to read CSV file '{0}'. {1}", File, Ex);
			}

			if (CSVData == null)
			{
				return;
			}
			string TestNameKey = "TestName";
			string DataPointKey = "DataPoint";
			string MeasurementKey = "Measurement";
			string ContextKey = "Context";
			if (Mapping != null)
			{
				if (Mapping.ContainsKey("TestName"))
					Mapping.TryGetValue("TestName", out TestNameKey);
				if (Mapping.ContainsKey("DataPoint"))
					Mapping.TryGetValue("DataPoint", out DataPointKey);
				if (Mapping.ContainsKey("Measurement"))
					Mapping.TryGetValue("Measurement", out MeasurementKey);
				if (Mapping.ContainsKey("Context"))
					Mapping.TryGetValue("Context", out ContextKey);
			}
			// Populate telemetry report
			foreach (Dictionary<string, string> Row in CSVData)
			{
				string TestName;
				Row.TryGetValue(TestNameKey, out TestName);
				string DataPoint;
				Row.TryGetValue(DataPointKey, out DataPoint);
				string Measurement;
				Row.TryGetValue(MeasurementKey, out Measurement);
				string Context;
				Row.TryGetValue(ContextKey, out Context);
				if (string.IsNullOrEmpty(TestName) || string.IsNullOrEmpty(DataPoint) || string.IsNullOrEmpty(Measurement))
				{
					Log.Warning("Telemetry - Missing data in CSV file '{0}':\n TestName='{1}', DataPoint='{2}', Measurement='{3}", File, TestName, DataPoint, Measurement);
					continue;
				}
				try
				{
					TelemetryReport.AddTelemetry(TestName, DataPoint, double.Parse(Measurement), Context);
				}
				catch (FormatException)
				{
					Log.Error("Telemetry - Failed to parse Measurement value('{0}') in CSV file '{1}'.", Measurement, File);
				}
			}
		}

		static public List<string> TargetableKeys = new List<string>{ "TestName", "DataPoint", "Measurement", "Context" };

	}

	public class UnrealTelemetryContext : ITelemetryContext
	{
		public object GetProperty(string Name)
		{
			object Value;
			Properties.TryGetValue(Name, out Value);
			return Value;
		}
		Dictionary<string, object> Properties;

		public UnrealTelemetryContext()
		{
			Properties = new Dictionary<string, object>();
		}
		public void SetProperty(string Name, object Value)
		{
			Properties[Name] = Value;
		}
	}

	/// <summary>
	/// Build command to read Unreal Automation telemetry data saved in csv format and then publish it to a database.
	/// </summary>
	class PublishUnrealAutomationTelemetry : BuildCommand
	{
		[Help("CSVFile", "Path to the csv file to parse.")]
		[Help("CSVDirectory", "Path to a folder containing csv files to parse.")]
		[Help("CSVMapping", "Optional CSV column mapping. Formate is: <target key>:<source key>,...")]
		[Help("TelemetryConfig", "Telemetry configuration to use to publish to Database. Default: UETelemtr.y")]
		[Help("DatabaseConfigPath", "Path to alternate Database config. Default is TelemetryConfig default.")]
		[Help("Project", "Target Project name.")]
		[Help("Platform", "Target platform name. Default: current environment platform.")]
		[Help("Role", "Target Role name. Default: Editor.")]
		[Help("Branch", "Target Branch name. Default: Unknown.")]
		[Help("Changelist", "Target Changelist number. Default: 0.")]
		[Help("Configuration", "Target Configuration name. Default: Development.")]

		public override ExitCode Execute()
		{
			string CSVFile = ParseParamValue("CSVFile=", "");
			string CSVDirectory = ParseParamValue("CSVDirectory=", "");
			string Config = ParseParamValue("TelemetryConfig=", "UETelemetry");
			string DatabaseConfigPath = ParseParamValue("DatabaseConfigPath=", "");
			List<string> CSVMappingStrings = Globals.Params.ParseValues("CSVMapping", true);
			string ProjectString = ParseParamValue("Project=", "");
			string PlatformString = ParseParamValue("Platform=", "");
			string BranchString = ParseParamValue("Branch=", "Unknown");
			string ChangelistString = ParseParamValue("Changelist=", "0");
			string RoleString = ParseParamValue("Role=", "Editor");
			string ConfigurationString = ParseParamValue("Configuration=", "Development");

			if (string.IsNullOrEmpty(CSVDirectory) && string.IsNullOrEmpty(CSVFile))
			{
				throw new AutomationException("No telemetry files specified. Use -CSVDirectory=<path> or -CSVFile=<path>.csv");
			}

			if (!string.IsNullOrEmpty(CSVDirectory) && !Directory.Exists(CSVDirectory))
			{
				throw new AutomationException(string.Format("CSVDirectory '{0}' is missing.", CSVDirectory));
			}
			if (!string.IsNullOrEmpty(CSVFile) && !File.Exists(CSVFile))
			{
				throw new AutomationException(string.Format("CSVFile '{0}' is missing.", CSVDirectory));
			}

			// CSV Mapping
			Dictionary<string, string> CSVMapping = null;
			if (CSVMappingStrings.Count > 0)
			{
				CSVMapping = new Dictionary<string, string>();
				foreach(string StringLine in CSVMappingStrings)
				{
					var SplitLine = StringLine.Split(":");
					if (SplitLine.Length != 2)
					{
						throw new AutomationException("CSVMapping entry must be in the form <target key>:<source key>.");
					}
					string TargetKey = SplitLine[0];
					string SourceKey = SplitLine[1];
					if(!UnrealAutomationTelemetry.TargetableKeys.Contains(TargetKey))
					{
						throw new AutomationException(string.Format("Unknown target key '{0}', CSVMapping target key must be one of the value: {1}.", TargetKey, string.Join(", ", UnrealAutomationTelemetry.TargetableKeys)));
					}
					CSVMapping[TargetKey] = SourceKey;
				}
			}

			// Get Context
			UnrealTelemetryContext Context = new UnrealTelemetryContext();

			if (string.IsNullOrEmpty(ProjectString))
			{
				throw new AutomationException("No project specified. Use -Project=ShooterGame etc");
			}
			Context.SetProperty("ProjectName", ProjectString);

			RoleString = Enum.Parse(typeof(UnrealTargetRole), RoleString, true).ToString();
			ConfigurationString = Enum.Parse(typeof(UnrealTargetConfiguration), ConfigurationString, true).ToString();
			Context.SetProperty("Configuration", string.Format("{0} {1}", RoleString, ConfigurationString));

			Context.SetProperty("Platform", string.IsNullOrEmpty(PlatformString) ? BuildHostPlatform.Current.Platform : UnrealTargetPlatform.Parse(PlatformString));

			Context.SetProperty("Branch", BranchString);
			Context.SetProperty("Changelist", ChangelistString);

			// Create a report
			HordeReport.SimpleTestReport Report = new HordeReport.SimpleTestReport();

			if(Report is ITelemetryReport TelemetryReport)
			{
				// Parse CSV
				if (!string.IsNullOrEmpty(CSVDirectory))
				{
					UnrealAutomationTelemetry.LoadOutputsIntoReport(CSVDirectory, TelemetryReport, CSVMapping);
				}
				else
				{
					UnrealAutomationTelemetry.LoadCSVOutputIntoReport(CSVFile, TelemetryReport, CSVMapping);
				}

				// Publish Telemetry Data
				var DataRows = TelemetryReport.GetAllTelemetryData();

				if (DataRows != null)
				{
					IDatabaseConfig<TelemetryData> DBConfig = DatabaseConfigManager<TelemetryData>.GetConfigByName(Config);
					if (DBConfig != null)
					{
						DBConfig.LoadConfig(DatabaseConfigPath);
						IDatabaseDriver<TelemetryData> DB = DBConfig.GetDriver();
						Log.Verbose("Submitting telemetry data to {0}", DB.ToString());
						DB.SubmitDataItems(DataRows, Context);
					}
					else
					{
						Log.Warning("Got telemetry data, but database configuration is unknown '{0}'.", Config);
					}
				}

			}

			return 0;
		}
	}
}