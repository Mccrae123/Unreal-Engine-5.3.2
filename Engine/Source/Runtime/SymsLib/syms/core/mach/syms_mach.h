// Copyright Epic Games, Inc. All Rights Reserved.
#ifndef SYMS_MACH_H
#define SYMS_MACH_H

/*
** Reference materials:
  ** machine.h https://opensource.apple.com/source/xnu/xnu-4570.41.2/osfmk/mach/machine.h.auto.html
  ** loader.h  https://opensource.apple.com/source/xnu/xnu-4570.71.2/EXTERNAL_HEADERS/mach-o/loader.h.auto.html
  ** nlist.h   https://opensource.apple.com/source/xnu/xnu-201/EXTERNAL_HEADERS/mach-o/nlist.h.auto.html
  ** stab.h    https://opensource.apple.com/source/xnu/xnu-4903.241.1/EXTERNAL_HEADERS/mach-o/stab.h.auto.html
*/

////////////////////////////////
//~ NOTE(allen): Generated

#include "syms/core/generated/syms_meta_mach.h"

////////////////////////////////
//~ NOTE(allen): Constants from machine.h

#define SYMS_MACH_CPU_ABI64     0x01000000
#define SYMS_MACH_CPU_ABI64_MAS 0xff000000

#define SYMS_MACH_CPU_SUBTYPE_MASK  0xff000000
#define SYMS_MACH_CPU_SUBTYPE_LIB64 0x80000000

////////////////////////////////
//~ NOTE(allen): Types & Constants from loader.h

//- magic numbers
#define SYMS_MACH_MAGIC_32 0xFEEDFACE
#define SYMS_MACH_CIGAM_32 0xCEFAEDFE

#define SYMS_MACH_MAGIC_64 0xFEEDFACF
#define SYMS_MACH_CIGAM_64 0xCFFAEDFE

#define SYMS_MACH_FAT_MAGIC 0xCAFEBABE
#define SYMS_MACH_FAT_CIGAM 0xBEBAFECA

#define SYMS_MACH_IS_HEADER_32(x)      ((x) == SYMS_MACH_MAGIC_32 || (x) == SYMS_MACH_CIGAM_32)
#define SYMS_MACH_IS_HEADER_64(x)      ((x) == SYMS_MACH_MAGIC_64 || (x) == SYMS_MACH_CIGAM_64)
#define SYMS_MACH_HEADER_IS_SWAPPED(x) ((x) == SYMS_MACH_CIGAM_64 || (x) == SYMS_MACH_CIGAM_32)
#define SYMS_MACH_IS_FAT(x)            ((x) == SYMS_MACH_FAT_MAGIC || (x) == SYMS_MACH_FAT_CIGAM)
#define SYMS_MACH_FAT_IS_SWAPPED(x)    ((x) == SYMS_MACH_FAT_CIGAM)

//- types
typedef struct SYMS_MachLCStr{
  SYMS_U32 offset;
} SYMS_MachLCStr;

typedef struct SYMS_MachFatHeader{
  SYMS_U32 magic;
  SYMS_U32 nfat_arch;
} SYMS_MachFatHeader;

typedef struct SYMS_MachFatArch{
  SYMS_MachCpuType cputype;
  SYMS_MachCpuSubtype cpusubtype;
  SYMS_U32 offset;
  SYMS_U32 size;
  SYMS_U32 align;
} SYMS_MachFatArch;

typedef struct SYMS_MachHeader32{
  SYMS_U32 magic;
  SYMS_MachCpuType cputype;
  SYMS_MachCpuSubtype cpusubtype;
  SYMS_MachFiletype filetype;
  SYMS_U32 ncmds;
  SYMS_U32 sizeofcmds;
  SYMS_MachFlags flags;
} SYMS_MachHeader32;
typedef struct SYMS_MachHeader64{
  SYMS_U32 magic;
  SYMS_MachCpuType cputype;
  SYMS_MachCpuSubtype cpusubtype;
  SYMS_MachFiletype filetype;
  SYMS_U32 ncmds;
  SYMS_U32 sizeofcmds;
  SYMS_MachFlags flags;
  SYMS_U32 reserved;
} SYMS_MachHeader64;

typedef struct SYMS_MachLoadCommand{
  SYMS_MachLoadCommandType type;
  SYMS_U32 size;
} SYMS_MachLoadCommand;

typedef SYMS_S32 SYMS_MachVMProt;

typedef struct SYMS_MachSegmentCommand32{
  SYMS_MachLoadCommand cmd;
  SYMS_U8 segname[16];
  SYMS_U32 vmaddr;
  SYMS_U32 vmsize;
  SYMS_U32 fileoff;
  SYMS_U32 filesize;
  SYMS_MachVMProt maxprot;
  SYMS_MachVMProt initprot;
  SYMS_U32 nsects;
  SYMS_U32 flags;
} SYMS_MachSegmentCommand32;

typedef struct SYMS_MachSegmentCommand64{
  SYMS_MachLoadCommand cmd;
  SYMS_U8 segname[16];
  SYMS_U64 vmaddr;
  SYMS_U64 vmsize;
  SYMS_U64 fileoff;
  SYMS_U64 filesize;
  SYMS_MachVMProt maxprot;
  SYMS_MachVMProt initprot;
  SYMS_U32 nsects;
  SYMS_U32 flags;
} SYMS_MachSegmentCommand64;

typedef struct SYMS_MachSection32{
  SYMS_U8 sectname[16];
  SYMS_U8 segname[16];
  SYMS_U32 addr;
  SYMS_U32 size;
  SYMS_U32 offset;
  SYMS_U32 align;
  SYMS_U32 relocoff;
  SYMS_U32 nreloc;
  SYMS_U32 flags;
  SYMS_U32 reserved1;
  SYMS_U32 reserved2;
} SYMS_MachSection32;

typedef struct SYMS_MachSection64{
  SYMS_U8 sectname[16];
  SYMS_U8 segname[16];
  SYMS_U64 addr;
  SYMS_U64 size;
  SYMS_U32 offset;
  SYMS_U32 align;
  SYMS_U32 relocoff;
  SYMS_U32 nreloc;
  SYMS_U32 flags;
  SYMS_U32 reserved1;
  SYMS_U32 reserved2;
} SYMS_MachSection64;

// 128-bit unique number generated by linker to identify objects
typedef struct SYMS_MachUUID{
  SYMS_U32 cmd;
  SYMS_U32 cmdsize;
  SYMS_U8 uuid[16];
} SYMS_MachUUID;

typedef struct SYMS_MachDylib{
  SYMS_MachLCStr name;
  SYMS_U32 timestamp;
  SYMS_U32 current_version;
  SYMS_U32 compatability_version;
} SYMS_MachDylib;

typedef struct SYMS_MachDylibCommand{
  SYMS_U32 cmd;
  SYMS_U32 cmdsize;
  SYMS_MachDylib dylib;
} SYMS_MachDylibCommand;

typedef struct SYMS_MachDyldInfoCommand{
  SYMS_U32 cmd;
  SYMS_U32 cmdsize;
  SYMS_U32 rebase_off;
  SYMS_U32 rebase_size;
  SYMS_U32 bind_off;
  SYMS_U32 bind_size;
  SYMS_U32 weak_bind_off;
  SYMS_U32 weak_bind_size;
  SYMS_U32 lazy_bind_off;
  SYMS_U32 lazy_bind_size;
  SYMS_U32 export_off;
  SYMS_U32 export_size;
} SYMS_MachDyldInfoCommand;

// command for symbol table, format for entries is defined in list.h and stab.h
typedef struct SYMS_MachSymtabCommand{
  SYMS_U32 cmd;
  SYMS_U32 cmdsize;
  SYMS_U32 symoff;  // offset from the image base to array of SYMS_MachNList32
  SYMS_U32 nsyms;   // symbol count
  SYMS_U32 stroff;  // offset from the image base to string table
  SYMS_U32 strsize; // string table size
} SYMS_MachSymtabCommand;

typedef struct SYMS_MachDySymtabCommand{
  SYMS_U32 cmd;
  SYMS_U32 cmdsize;
  SYMS_U32 ilocalsym;
  SYMS_U32 nlocalsym;
  SYMS_U32 iextdefsym;
  SYMS_U32 nextdefsym;
  SYMS_U32 iundefsym;
  SYMS_U32 nundefsym;
  SYMS_U32 tocoff;
  SYMS_U32 ntoc;
  SYMS_U32 modtaboff;
  SYMS_U32 nmodtab;
  SYMS_U32 extrefsymoff;
  SYMS_U32 nextrefsyms;
  SYMS_U32 indirectsymoff;
  SYMS_U32 nindirectsyms;
  SYMS_U32 extreloff;
  SYMS_U32 nextrel;
  SYMS_U32 locreloff;
  SYMS_U32 nlocrel;
} SYMS_MachDySymtabCommand;

#define SYMS_MACH_VERSION_NIBBLE_A(x) (((x) & 0xFFFF0000) >> 16)
#define SYMS_MACH_VERSION_NIBBLE_B(x) (((x) & 0x0000FF00) >> 8)
#define SYMS_MACH_VERSION_NIBBLE_C(x) (((x) & 0x000000FF) >> 0)

typedef struct SYMS_MachBuildVersionCommand{
  SYMS_U32 cmd;
  SYMS_U32 cmdsize;
  SYMS_MachPlatformType platform;
  SYMS_U32 minos;
  SYMS_U32 sdk;
  SYMS_U32 ntools;
} SYMS_MachBuildVersionCommand;

typedef struct SYMS_MachBuildToolVersion{
  SYMS_MachToolType tool;
  SYMS_U32 version;
} SYMS_MachBuildToolVersion;

////////////////////////////////
//~ NOTE(allen): Types & Constants from nlist.h

#define SYMS_MACH_NLIST_STAB(x) ((x) & 0xE0)
#define SYMS_MACH_NLIST_PEXT(x) ((x) & 0x10)
#define SYMS_MACH_NLIST_TYPE(x) ((x) & 0x0E)
#define SYMS_MACH_NLIST_EXT(x)  ((x) & 0x01)

typedef struct SYMS_MachNList32{
  SYMS_U32 n_strx;
  SYMS_U8 n_type;
  SYMS_U8 n_sect;
  SYMS_U16 n_desc;
  SYMS_U32 n_value;
} SYMS_MachNList32;

typedef struct SYMS_MachNList64{
  SYMS_U32 n_strx;
  SYMS_U8 n_type;
  SYMS_U8 n_sect;
  SYMS_U16 n_desc;
  SYMS_U64 n_value;
} SYMS_MachNList64;

////////////////////////////////
//~ NOTE(allen): MACH Format Functions

SYMS_C_LINKAGE_BEGIN

SYMS_API void      syms_mach_fat_header_endian_swap_in_place(SYMS_MachFatHeader *x);
SYMS_API void      syms_mach_fat_arch_endian_swap_in_place(SYMS_MachFatArch *x);
SYMS_API void      syms_mach_header32_endian_swap_in_place(SYMS_MachHeader32 *x);
SYMS_API void      syms_mach_header64_endian_swap_in_place(SYMS_MachHeader64 *x);
SYMS_API void      syms_mach_segment_command32_endian_swap_in_place(SYMS_MachSegmentCommand32 *x);
SYMS_API void      syms_mach_segment_command64_endian_swap_in_place(SYMS_MachSegmentCommand64 *x);
SYMS_API void      syms_mach_section32_endian_swap_in_place(SYMS_MachSection32 *section32);
SYMS_API void      syms_mach_section64_endian_swap_in_place(SYMS_MachSection64 *section64);

SYMS_API void      syms_mach_header64_from_header32(SYMS_MachHeader64 *dst, SYMS_MachHeader32 *header32);
SYMS_API void      syms_mach_nlist64_from_nlist32(SYMS_MachNList64 *dst, SYMS_MachNList32 *nlist32);

SYMS_API SYMS_Arch syms_mach_arch_from_cputype(SYMS_MachCpuType cputype);

SYMS_C_LINKAGE_END

#endif // SYMS_MACH_H
