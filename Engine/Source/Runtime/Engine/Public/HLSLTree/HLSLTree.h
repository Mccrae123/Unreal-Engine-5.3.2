// Copyright Epic Games, Inc. All Rights Reserved.
#pragma once

#include "CoreMinimal.h"
#include "Engine/EngineTypes.h"
#include "Containers/ArrayView.h"
#include "Containers/StringView.h"
#include "Containers/BitArray.h"
#include "Containers/List.h"
#include "Misc/StringBuilder.h"
#include "Misc/MemStack.h"
#include "Hash/xxhash.h"
#include "HLSLTree/HLSLTreeTypes.h"

class FMaterial;
class FMaterialCompilationOutput;
struct FStaticParameterSet;

namespace UE
{

namespace Shader
{
class FPreshaderData;
}

/**
 * The HLSLTree module contains classes to build an HLSL AST (abstract syntax tree)
 * This allows C++ to procedurally define an HLSL program.  The structure of the tree is designed to be flexible, to facilitate incremental generation from a material node graph
 * Once the tree is complete, HLSL source code may be generated
 */
namespace HLSLTree
{

class FNode;
class FScope;
class FFunction;
class FExpressionLocalPHI;
class FRequestedType;

class FEmitContext;
class FEmitShaderScope;
class FEmitShaderExpression;

static constexpr int32 MaxNumPreviousScopes = 2;

class FOwnerContext
{
public:
	virtual ~FOwnerContext() {}

	void PushOwner(UObject* Owner);
	UObject* PopOwner();
	UObject* GetCurrentOwner() const;

private:
	TArray<UObject*, TInlineAllocator<8>> OwnerStack;
};

struct FOwnerScope
{
	FOwnerScope(FOwnerContext& InContext, UObject* InOwner) : Context(&InContext), Owner(InOwner)
	{
		Context->PushOwner(InOwner);
	}

	~FOwnerScope()
	{
		verify(Context->PopOwner() == Owner);
	}

	FOwnerContext* Context;
	UObject* Owner;
};

class FErrorHandlerInterface : public FOwnerContext
{
public:
	virtual ~FErrorHandlerInterface() {}

	int32 GetNumErrors() const { return NumErrors; }
	inline bool HasErrors() const { return NumErrors > 0; }

	template<typename StringType>
	inline bool AddError(const StringType& InError)
	{
		return AddErrorInternalWrapper(FStringView(InError));
	}

	template<typename FormatType, typename... Types>
	inline bool AddErrorf(const FormatType& Format, Types... Args)
	{
		TStringBuilder<2048> String;
		String.Appendf(Format, Forward<Types>(Args)...);
		return AddErrorInternalWrapper(FStringView(String.ToString(), String.Len()));
	}

protected:
	bool AddErrorInternalWrapper(FStringView InError)
	{
		NumErrors++;
		AddErrorInternal(GetCurrentOwner(), InError);
		return false;
	}

	virtual void AddErrorInternal(UObject* InOwner, FStringView InError) = 0;

private:
	int32 NumErrors = 0;
};

class FHasher
{
public:
	FXxHash64 Finalize() { return Builder.Finalize(); }
	FHasher& AppendData(const void* Data, uint64 Size) { Builder.Update(Data, Size); return *this; }

	template<typename T>
	inline FHasher& AppendValue(const T& Value)
	{
		return AppendData(&Value, sizeof(Value));
	}

	template<typename T>
	inline FHasher& AppendValue(TArrayView<T> Value)
	{
		for (const T& Element : Value)
		{
			AppendValue(Element);
		}
		return *this;
	}

	inline FHasher& AppendValue(const FName& Value)
	{
		return AppendValue(Value.GetComparisonIndex()).AppendValue(Value.GetNumber());
	}

	inline FHasher& AppendValue(const Shader::FType& Type)
	{
		if (Type.IsStruct()) return AppendValue(Type.StructType);
		else return AppendValue(Type.ValueType);
	}

	inline FHasher& AppendValue(const Shader::FValue& Value)
	{
		AppendValue(Value.Type);
		for (int32 i = 0; i < Value.Type.GetNumComponents(); ++i)
		{
			AppendValue(Value.TryGetComponent(i));
		}
		return *this;
	}

	inline FHasher& AppendValues() { return *this; }

	template<typename T, typename... ArgTypes>
	inline FHasher& AppendValues(const T& Value, ArgTypes&&... Args)
	{
		return AppendValue(Value).AppendValues(Forward<ArgTypes>(Args)...);
	}

private:
	FXxHash64Builder Builder;
};

/** Root class of the HLSL AST */
class FNode
{
public:
	virtual ~FNode() {}
	virtual void Reset() {}

	UObject* GetOwner() const { return Owner; }

private:
	/** Next node in the FTree's list of all nodes */
	FNode* NextNode = nullptr;

	/** The UObject that owns/created this node, allows errors generated by this node to be properly associated with the owner */
	UObject* Owner = nullptr;

	friend class FTree;
};

/**
 * Represents an HLSL statement.  This is a piece of code that doesn't evaluate to any value, but instead should be executed sequentially, and likely has side-effects.
 * Examples include assigning a value, or various control flow structures (if, for, while, etc)
 * This is an abstract base class, with derived classes representing various types of statements
 */
class FStatement : public FNode
{
public:
	virtual void Prepare(FEmitContext& Context) const = 0;
	virtual void EmitShader(FEmitContext& Context, FEmitShaderScope& Scope) const = 0;

	FScope* ParentScope = nullptr;
};

/**
 * Like Shader::FType, but tracks which individual components are needed
 */
class FRequestedType
{
public:
	FRequestedType() = default;
	FRequestedType(int32 NumComponents, bool bDefaultRequest = true);
	FRequestedType(const Shader::FType& InType, bool bDefaultRequest = true);
	FRequestedType(const Shader::EValueType& InType, bool bDefaultRequest = true);
	
	const TCHAR* GetName() const { return GetType().GetName(); }
	bool IsStruct() const { return StructType != nullptr; }
	const Shader::FStructType* GetStructType() const { return StructType; }
	const Shader::FType GetType() const;

	int32 GetNumComponents() const;
	bool IsComponentRequested(int32 Index) const { return RequestedComponents.IsValidIndex(Index) ? (bool)RequestedComponents[Index] : false; }
	bool IsVoid() const { return RequestedComponents.Find(true) == INDEX_NONE; }

	void SetComponentRequest(int32 Index, bool bRequest = true);

	void Reset()
	{
		StructType = nullptr;
		ValueComponentType = Shader::EValueComponentType::Void;
		RequestedComponents.Reset();
	}

	/** Marks the given field as requested (or not) */
	void SetFieldRequested(const Shader::FStructField* Field, bool bRequest = true);
	void ClearFieldRequested(const Shader::FStructField* Field)
	{
		SetFieldRequested(Field, false);
	}

	/** Marks the given field as requested, based on the input request type (which should match the field type) */
	void SetField(const Shader::FStructField* Field, const FRequestedType& InRequest);

	/** Returns the requested type of the given field */
	FRequestedType GetField(const Shader::FStructField* Field) const;

	/**
	 * If either StructType or ValueComponentType are set, then the request is for an explicit type
	 * Otherwise, the request is for any type with the given components
	 */
	const Shader::FStructType* StructType = nullptr;
	Shader::EValueComponentType ValueComponentType = Shader::EValueComponentType::Void;

	/** 1 bit per component, a value of 'true' means the specified component is requsted */
	TBitArray<> RequestedComponents;
};

FRequestedType MakeRequestedType(Shader::EValueComponentType ComponentType, const FRequestedType& RequestedComponents);

/**
 * Like FRequestedType, but tracks an EExpressionEvaluation per component, rather than a simple requested flag
 */
class FPreparedType
{
public:
	FPreparedType() = default;
	FPreparedType(Shader::EValueComponentType InComponentType) : ValueComponentType(InComponentType) {}
	FPreparedType(const Shader::FStructType* InStructType) : StructType(InStructType) {}
	FPreparedType(const Shader::FType& InType);

	void SetEvaluation(EExpressionEvaluation Evaluation);

	void SetField(const Shader::FStructField* Field, const FPreparedType& FieldType);
	FPreparedType GetFieldType(const Shader::FStructField* Field) const;

	int32 GetNumComponents() const;
	FRequestedType GetRequestedType() const;
	Shader::FType GetType() const;
	bool IsStruct() const { return !IsVoid() && StructType != nullptr; }
	bool IsNumeric() const { return !IsVoid() && ValueComponentType != Shader::EValueComponentType::Void; }
	bool IsInitialized() const { return StructType != nullptr || ValueComponentType != Shader::EValueComponentType::Void; }
	bool IsVoid() const;

	EExpressionEvaluation GetEvaluation() const;
	EExpressionEvaluation GetEvaluation(const FRequestedType& RequestedType) const;
	EExpressionEvaluation GetFieldEvaluation(int32 ComponentIndex, int32 NumComponents) const;
	EExpressionEvaluation GetComponentEvaluation(int32 Index) const;

	void SetComponentEvaluation(int32 Index, EExpressionEvaluation Evaluation);
	void MergeComponentEvaluation(int32 Index, EExpressionEvaluation Evaluation);

	/** Unlike FRequestedType, one of these should be set */
	const Shader::FStructType* StructType = nullptr;
	Shader::EValueComponentType ValueComponentType = Shader::EValueComponentType::Void;

	/** Evaluation type for each component, may be 'None' for components that are unused */
	TArray<EExpressionEvaluation, TInlineAllocator<16>> PreparedComponents;
};

FPreparedType MergePreparedTypes(const FPreparedType& Lhs, const FPreparedType& Rhs);

class FPrepareValueResult
{
public:
	const FPreparedType& GetPreparedType() const { return PreparedType; }

	bool SetTypeVoid();

	bool SetType(FEmitContext& Context, const FRequestedType& RequestedType, EExpressionEvaluation Evaluation, const Shader::FType& Type);
	bool SetType(FEmitContext& Context, const FRequestedType& RequestedType, const FPreparedType& Type);

	bool SetForwardValue(FEmitContext& Context, const FRequestedType& RequestedType, FExpression* InValue);

private:
	bool TryMergePreparedType(FEmitContext& Context, const Shader::FStructType* StructType, Shader::EValueComponentType ComponentType);

	FExpression* ForwardValue = nullptr;
	FPreparedType PreparedType;

	friend class FExpression;
};

struct FEmitValueShaderResult
{
	FEmitShaderExpression* Code = nullptr;
};

enum class EDerivativeCoordinate : uint8
{
	Ddx,
	Ddy,
};

struct FExpressionDerivatives
{
	FExpression* ExpressionDdx = nullptr;
	FExpression* ExpressionDdy = nullptr;

	FExpression* Get(EDerivativeCoordinate Coord) const { return (Coord == EDerivativeCoordinate::Ddx) ? ExpressionDdx : ExpressionDdy; }

	bool IsValid() const { return (bool)ExpressionDdx && (bool)ExpressionDdy; }
};

/**
 * Represents an HLSL expression.  This is a piece of code that evaluates to a value, but has no side effects.
 * Unlike statements, expressions are not expected to execute in any particular order.  They may be cached (or not) in generated code, without the underlying implementation needing to care.
 * Examples include constant literals, variable accessors, and various types of math operations
 * This is an abstract base class, with derived classes representing various types of expression
 */
class FExpression : public FNode
{
public:
	const FPreparedType& GetPreparedType() const { return PrepareValueResult.PreparedType; }
	FRequestedType GetRequestedType() const { return PrepareValueResult.PreparedType.GetRequestedType(); }
	Shader::FType GetType() const { return PrepareValueResult.PreparedType.GetType(); }
	EExpressionEvaluation GetEvaluation(const FRequestedType& RequestedType) const { return PrepareValueResult.PreparedType.GetEvaluation(RequestedType); }

	virtual void Reset() override;

	friend const FPreparedType& PrepareExpressionValue(FEmitContext& Context, FExpression* InExpression, const FRequestedType& RequestedType);

	FEmitShaderExpression* GetValueShader(FEmitContext& Context, FEmitShaderScope& Scope, const FRequestedType& RequestedType, const Shader::FType& ResultType);
	void GetValuePreshader(FEmitContext& Context, const FRequestedType& RequestedType, Shader::FPreshaderData& OutPreshader);
	Shader::FValue GetValueConstant(FEmitContext& Context, const FRequestedType& RequestedType);

	FEmitShaderExpression* GetValueShader(FEmitContext& Context, FEmitShaderScope& Scope, const FRequestedType& RequestedType);
	FEmitShaderExpression* GetValueShader(FEmitContext& Context, FEmitShaderScope& Scope);

protected:
	virtual void ComputeAnalyticDerivatives(FTree& Tree, FExpressionDerivatives& OutResult) const;
	virtual bool PrepareValue(FEmitContext& Context, const FRequestedType& RequestedType, FPrepareValueResult& OutResult) const = 0;
	virtual void EmitValueShader(FEmitContext& Context, FEmitShaderScope& Scope, const FRequestedType& RequestedType, FEmitValueShaderResult& OutResult) const;
	virtual void EmitValuePreshader(FEmitContext& Context, const FRequestedType& RequestedType, Shader::FPreshaderData& OutPreshader) const;

private:
	FExpressionDerivatives Derivatives;
	FRequestedType CurrentRequestedType;
	FPrepareValueResult PrepareValueResult;
	bool bReentryFlag = false;
	bool bComputedDerivatives = false;

	friend class FTree;
	friend class FEmitContext;
	friend class FExpressionReentryScope;
};

class FExpressionReentryScope
{
public:
	FExpressionReentryScope(FExpression* InExpression) : Expression(InExpression)
	{
		if (Expression)
		{
			check(!Expression->bReentryFlag);
			Expression->bReentryFlag = true;
		}
	}

	~FExpressionReentryScope()
	{
		if (Expression)
		{
			check(Expression->bReentryFlag);
			Expression->bReentryFlag = false;
		}
	}

	FExpression* Expression;
};

class FFunction final : public FNode
{
public:
	FScope& GetRootScope() const { return *RootScope; }

	FScope* RootScope = nullptr;
	FScope* CalledScope = nullptr;
	TArray<FExpression*, TInlineAllocator<8>> OutputExpressions;
};

/**
 * Represents an HLSL texture parameter.
 */
class FTextureParameterDeclaration final : public FNode
{
public:
	FTextureParameterDeclaration(const FName& InName, const FTextureDescription& InDescription) : Name(InName), Description(InDescription) {}

	FName Name;
	FTextureDescription Description;
};

enum class EScopeState : uint8
{
	Uninitialized,
	Live,
	Dead,
};

/**
 * Represents an HLSL scope.  A scope contains a single statement, along with any expressions required by that statement
 */
class FScope final : public FNode
{
public:
	static FScope* FindSharedParent(FScope* Lhs, FScope* Rhs);

	virtual void Reset() override;

	inline FScope* GetParentScope() const { return ParentScope; }
	inline bool IsLive() const { return State == EScopeState::Live; }
	inline bool IsDead() const { return State == EScopeState::Dead; }

	inline TArrayView<FScope*> GetPreviousScopes() const
	{
		// const_cast needed, otherwise type of array view is 'FScope*const' which doesn't make sense
		return MakeArrayView(const_cast<FScope*>(this)->PreviousScope, NumPreviousScopes);
	}

	bool HasParentScope(const FScope& ParentScope) const;

	void AddPreviousScope(FScope& Scope);

	friend bool PrepareScope(FEmitContext& Context, FScope* InScope);

	void MarkLive();
	void MarkLiveRecursive();
	void MarkDead();

private:
	friend class FTree;
	friend class FExpression;
	friend class FEmitContext;

	FStatement* OwnerStatement = nullptr;
	FScope* ParentScope = nullptr;
	FStatement* ContainedStatement = nullptr;
	FScope* PreviousScope[MaxNumPreviousScopes];
	TMap<FName, FExpression*> LocalMap;
	int32 NumPreviousScopes = 0;
	int32 NestedLevel = 0;
	EScopeState State = EScopeState::Uninitialized;
};

inline bool IsScopeLive(const FScope* InScope)
{
	return (bool)InScope && InScope->IsLive();
}

inline void MarkScopeLive(FScope* InScope)
{
	if (InScope)
	{
		InScope->MarkLive();
	}
}

inline void MarkScopeDead(FScope* InScope)
{
	if (InScope)
	{
		InScope->MarkDead();
	}
}

namespace Private
{
uint64 GetNextTypeHash();
template<typename T>
struct TTypeHasher
{
	static uint64 GetHash()
	{
		static uint64 Hash = GetNextTypeHash();
		return Hash;
	}
};
}

/**
 * The HLSL AST.  Basically a wrapper around the root scope, with some helper methods
 */
class FTree : public FOwnerContext
{
public:
	static FTree* Create(FMemStackBase& Allocator);
	static void Destroy(FTree* Tree);

	FMemStackBase& GetAllocator() { return *Allocator; }

	void ResetNodes();

	bool Finalize();

	bool EmitShader(FEmitContext& Context, FStringBuilderBase& OutCode) const;

	FScope& GetRootScope() const { return *RootScope; }

	template<typename T, typename... ArgTypes>
	inline FExpression* NewExpression(ArgTypes&&... Args)
	{
		FHasher Hasher;
		Hasher.AppendValue(Private::TTypeHasher<T>::GetHash());
		Hasher.AppendValues(Forward<ArgTypes>(Args)...);
		const FXxHash64 Hash = Hasher.Finalize();
		FExpression* Expression = FindExpression(Hash);
		if (!Expression)
		{
			T* TypedExpression = NewNode<T>(Forward<ArgTypes>(Args)...);
			RegisterExpression(TypedExpression, Hash);
			Expression = TypedExpression;
		}
		return Expression;
	}

	template<typename T, typename... ArgTypes>
	inline T* NewStatement(FScope& Scope, ArgTypes&&... Args)
	{
		T* Statement = NewNode<T>(Forward<ArgTypes>(Args)...);
		RegisterStatement(Scope, Statement);
		return Statement;
	}

	void AssignLocal(FScope& Scope, const FName& LocalName, FExpression* Value);
	FExpression* AcquireLocal(FScope& Scope, const FName& LocalName);

	FExpression* NewFunctionCall(FScope& Scope, FFunction* Function, TArrayView<FExpression*> InputExpressions, int32 OutputIndex);

	const FExpressionDerivatives& GetAnalyticDerivatives(FExpression* InExpression);

	FScope* NewScope(FScope& Scope);
	FScope* NewOwnedScope(FStatement& Owner);
	FFunction* NewFunction();

	/** Shortcuts to create various common expression types */
	FExpression* NewConstant(const Shader::FValue& Value);
	FExpression* NewUnaryOp(EUnaryOp Op, FExpression* Input);
	FExpression* NewBinaryOp(EBinaryOp Op, FExpression* Lhs, FExpression* Rhs);

	FExpression* NewNeg(FExpression* Input) { return NewUnaryOp(EUnaryOp::Neg, Input); }
	FExpression* NewRcp(FExpression* Input) { return NewUnaryOp(EUnaryOp::Rcp, Input); }

	FExpression* NewAdd(FExpression* Lhs, FExpression* Rhs) { return NewBinaryOp(EBinaryOp::Add, Lhs, Rhs); }
	FExpression* NewSub(FExpression* Lhs, FExpression* Rhs) { return NewBinaryOp(EBinaryOp::Sub, Lhs, Rhs); }
	FExpression* NewMul(FExpression* Lhs, FExpression* Rhs) { return NewBinaryOp(EBinaryOp::Mul, Lhs, Rhs); }
	FExpression* NewDiv(FExpression* Lhs, FExpression* Rhs) { return NewBinaryOp(EBinaryOp::Div, Lhs, Rhs); }
	FExpression* NewLess(FExpression* Lhs, FExpression* Rhs) { return NewBinaryOp(EBinaryOp::Less, Lhs, Rhs); }

	FTextureParameterDeclaration* NewTextureParameterDeclaration(const FName& Name, const FTextureDescription& DefaultValue);

private:
	template<typename T, typename... ArgTypes>
	inline T* NewNode(ArgTypes&&... Args)
	{
		T* Node = new(*Allocator) T(Forward<ArgTypes>(Args)...);
		RegisterNode(Node);
		return Node;
	}

	void RegisterNode(FNode* Node);
	void RegisterExpression(FExpression* Expression, FXxHash64 Hash);
	void RegisterExpression(FExpressionLocalPHI* Expression, FXxHash64 Hash);
	void RegisterStatement(FScope& Scope, FStatement* Statement);
	FExpression* FindExpression(FXxHash64 Hash) const;

	FMemStackBase* Allocator = nullptr;
	FNode* Nodes = nullptr;
	FScope* RootScope = nullptr;
	TMap<FXxHash64, FExpression*> ExpressionMap;
	TArray<FExpressionLocalPHI*> PHIExpressions;
	TArray<UObject*, TInlineAllocator<8>> OwnerStack;

	friend class FExpressionLocalPHI;
};

//Shader::EValueType RequestExpressionType(FEmitContext& Context, FExpression* InExpression, int8 InRequestedNumComponents); // friend of FExpression
//EExpressionEvaluation PrepareExpressionValue(FEmitContext& Context, FExpression* InExpression); // friend of FExpression
//void PrepareScopeValues(FEmitContext& Context, const FScope* InScope); // friend of FScope

} // namespace HLSLTree
} // namespace UE
