// Copyright Epic Games, Inc. All Rights Reserved.
#pragma once

#if WITH_EDITOR

#include "CoreMinimal.h"
#include "Engine/EngineTypes.h"
#include "Containers/ArrayView.h"
#include "Containers/StringView.h"
#include "Containers/BitArray.h"
#include "Containers/List.h"
#include "Misc/StringBuilder.h"
#include "Misc/MemStack.h"
#include "Misc/GeneratedTypeName.h"
#include "Hash/xxhash.h"
#include "HLSLTree/HLSLTreeTypes.h"
#include "HLSLTree/HLSLTreeHash.h"

class FMaterial;
class FMaterialCompilationOutput;
struct FStaticParameterSet;

namespace UE::Shader
{
class FPreshaderData;
}

/**
 * The HLSLTree module contains classes to build an HLSL AST (abstract syntax tree)
 * This allows C++ to procedurally define an HLSL program.  The structure of the tree is designed to be flexible, to facilitate incremental generation from a material node graph
 * Once the tree is complete, HLSL source code may be generated
 */
namespace UE::HLSLTree
{

class FNode;
class FScope;
class FStatement;
class FExpression;
class FFunction;
class FExpressionLocalPHI;
class FRequestedType;

class FEmitContext;
class FEmitScope;
class FEmitShaderExpression;

static constexpr int32 MaxNumPreviousScopes = 2;

class FErrorHandlerInterface
{
public:
	virtual ~FErrorHandlerInterface() {}

	bool AddError(UObject* InOwner, FStringView InError)
	{
		AddErrorInternal(MakeArrayView(&InOwner, 1), InError);
		return false;
	}

	bool AddError(TConstArrayView<UObject*> InOwners, FStringView InError)
	{
		AddErrorInternal(InOwners, InError);
		return false;
	}

protected:
	virtual void AddErrorInternal(TConstArrayView<UObject*> InOwners, FStringView InError) = 0;
};

class FNullErrorHandler : public FErrorHandlerInterface
{
public:
	virtual void AddErrorInternal(TConstArrayView<UObject*> InOwners, FStringView InError) override
	{
	}
};

/** Root class of the HLSL AST */
class FNode
{
public:
	virtual ~FNode() {}

private:
	/** Next node in the FTree's list of all nodes */
	FNode* NextNode = nullptr;

	friend class FTree;
};

class FOwnedNode : public FNode
{
public:
	virtual TConstArrayView<UObject*> GetOwners() const = 0;
};

struct FEmitPreshaderScope
{
	FEmitPreshaderScope() = default;
	FEmitPreshaderScope(FEmitScope* InScope, const FExpression* InValue) : Scope(InScope), Value(InValue) {}

	FEmitScope* Scope = nullptr;
	const FExpression* Value = nullptr;
};

/**
 * Represents an HLSL statement.  This is a piece of code that doesn't evaluate to any value, but instead should be executed sequentially, and likely has side-effects.
 * Examples include assigning a value, or various control flow structures (if, for, while, etc)
 * This is an abstract base class, with derived classes representing various types of statements
 */
class FStatement : public FOwnedNode
{
public:
	UObject* GetOwner() const { return Owner; }
	FScope& GetParentScope() const { return *ParentScope; }

	virtual TConstArrayView<UObject*> GetOwners() const final { return MakeArrayView(&Owner, 1); }
	virtual bool IsLoop() const { return false; }

protected:
	virtual bool Prepare(FEmitContext& Context, FEmitScope& Scope) const = 0;
	virtual void EmitShader(FEmitContext& Context, FEmitScope& Scope) const;
	virtual void EmitPreshader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, TArrayView<const FEmitPreshaderScope> Scopes, Shader::FPreshaderData& OutPreshader) const;

private:
	/** The UObject that owns/created this node, allows errors generated by this node to be properly associated with the owner */
	UObject* Owner = nullptr;

	FScope* ParentScope = nullptr;

	friend class FTree;
	friend class FEmitContext;
	friend class FExpressionLocalPHI;
};

enum class EDefaultRequestedType : uint8
{
	None,
	Any,
};

/**
 * Represents a request for an arbitrary set of untyped components
 */
class ENGINE_API FRequestedType
{
public:
	FRequestedType() = default;
	FRequestedType(Shader::EValueType InType, bool bDefaultRequest = true);
	FRequestedType(const Shader::FType& InType, bool bDefaultRequest = true);
	FRequestedType(FName InObjectName);
	FRequestedType(EDefaultRequestedType InType) : DefaultType(InType) { check(InType != EDefaultRequestedType::None); }

	Shader::FType GetType() const;
	const TCHAR* GetName() const { return GetType().GetName(); }
	int32 GetNumComponents() const;

	bool IsComponentRequested(int32 Index) const
	{
		return (DefaultType == EDefaultRequestedType::Any) || (RequestedComponents.IsValidIndex(Index) ? (bool)RequestedComponents[Index] : false);
	}

	bool IsStruct() const { return !IsVoid() && StructType != nullptr; }
	bool IsObject() const { return !IsVoid() && !ObjectType.IsNone(); }
	bool IsNumeric() const { return !IsVoid() && Shader::IsNumericType(ValueComponentType); }
	bool IsVoid() const { return (DefaultType != EDefaultRequestedType::Any) && RequestedComponents.Find(true) == INDEX_NONE; }

	void SetComponentRequest(int32 Index, bool bRequest = true);


	/** Marks the given field as requested (or not) */
	void SetFieldRequested(const Shader::FStructField* Field, bool bRequest = true);
	void ClearFieldRequested(const Shader::FStructField* Field)
	{
		SetFieldRequested(Field, false);
	}

	/** Marks the given field as requested, based on the input request type (which should match the field type) */
	void SetField(const Shader::FStructField* Field, const FRequestedType& InRequest);

	/** Returns the requested type of the given field */
	FRequestedType GetField(const Shader::FStructField* Field) const;

	const Shader::FStructType* StructType = nullptr;
	FName ObjectType;
	Shader::EValueComponentType ValueComponentType = Shader::EValueComponentType::Void;
	EDefaultRequestedType DefaultType = EDefaultRequestedType::None;

	/** 1 bit per component, a value of 'true' means the specified component is requsted */
	TBitArray<> RequestedComponents;
};
inline bool operator==(const FRequestedType& Lhs, const FRequestedType& Rhs)
{
	return Lhs.ValueComponentType == Rhs.ValueComponentType &&
		Lhs.ObjectType == Rhs.ObjectType &&
		Lhs.StructType == Rhs.StructType &&
		Lhs.RequestedComponents == Rhs.RequestedComponents;
}
inline bool operator!=(const FRequestedType& Lhs, const FRequestedType& Rhs)
{
	return !operator==(Lhs, Rhs);
}

inline void AppendHash(FHasher& Hasher, const FRequestedType& Value)
{
	AppendHash(Hasher, Value.StructType);
	AppendHash(Hasher, Value.ObjectType);
	AppendHash(Hasher, Value.ValueComponentType);
	AppendHash(Hasher, Value.RequestedComponents);
}

struct FPreparedComponent
{
	FPreparedComponent() = default;
	FPreparedComponent(EExpressionEvaluation InEvaluation) : Evaluation(InEvaluation) {}

	inline bool IsNone() const { return Evaluation == EExpressionEvaluation::None; }
	inline bool IsRequested() const { return IsRequestedEvaluation(Evaluation); }

	EExpressionEvaluation GetEvaluation(const FEmitScope& Scope) const;

	FEmitScope* LoopScope = nullptr;
	Shader::FComponentBounds Bounds;
	EExpressionEvaluation Evaluation = EExpressionEvaluation::None;
};
inline bool operator==(const FPreparedComponent& Lhs, const FPreparedComponent& Rhs)
{
	return Lhs.Evaluation == Rhs.Evaluation &&
		Lhs.Bounds == Rhs.Bounds &&
		Lhs.LoopScope == Rhs.LoopScope;
}
inline bool operator!=(const FPreparedComponent& Lhs, const FPreparedComponent& Rhs)
{
	return !operator==(Lhs, Rhs);
}

FPreparedComponent CombineComponents(const FPreparedComponent& Lhs, const FPreparedComponent& Rhs);

/**
 * Like FRequestedType, but tracks an EExpressionEvaluation per component, rather than a simple requested flag
 */
class FPreparedType
{
public:
	FPreparedType() = default;
	FPreparedType(Shader::EValueComponentType InComponentType) : ValueComponentType(InComponentType) {}
	FPreparedType(const Shader::FStructType* InStructType) : StructType(InStructType) {}
	FPreparedType(Shader::EValueType InType, const FPreparedComponent& InComponent = FPreparedComponent());
	FPreparedType(const Shader::FType& InType, const FPreparedComponent& InComponent = FPreparedComponent());

	void SetEvaluation(EExpressionEvaluation Evaluation);
	void MergeEvaluation(EExpressionEvaluation Evaluation);
	void SetLoopEvaluation(FEmitScope& Scope, const FRequestedType& RequestedType);

	void SetField(const Shader::FStructField* Field, const FPreparedType& FieldType);
	FPreparedType GetFieldType(const Shader::FStructField* Field) const;

	int32 GetNumComponents() const;
	FRequestedType GetRequestedType() const;
	Shader::FType GetType() const;
	const TCHAR* GetName() const { return GetType().GetName(); }
	bool IsStruct() const { return !IsVoid() && StructType != nullptr; }
	bool IsObject() const { return !IsVoid() && !ObjectType.IsNone(); }
	bool IsNumeric() const { return !IsVoid() && Shader::IsNumericType(ValueComponentType); }
	bool IsInitialized() const { return StructType != nullptr || !ObjectType.IsNone() || ValueComponentType != Shader::EValueComponentType::Void; }
	bool IsVoid() const;

	EExpressionEvaluation GetEvaluation(const FEmitScope& Scope) const;
	EExpressionEvaluation GetEvaluation(const FEmitScope& Scope, const FRequestedType& RequestedType) const;
	EExpressionEvaluation GetFieldEvaluation(const FEmitScope& Scope, const FRequestedType& RequestedType, int32 ComponentIndex, int32 NumComponents) const;
	Shader::FComponentBounds GetBounds(const FRequestedType& RequestedType) const;
	FPreparedComponent GetMergedComponent() const;

	FPreparedComponent GetComponent(int32 Index) const;
	Shader::FComponentBounds GetComponentBounds(int32 Index) const;
	inline bool IsComponentRequested(int32 Index) const { return GetComponent(Index).IsRequested(); }

	void SetComponent(int32 Index, const FPreparedComponent& InComponent);
	void SetComponentBounds(int32 Index, const Shader::FComponentBounds Bounds);
	void MergeComponent(int32 Index, const FPreparedComponent& InComponent);

	const Shader::FStructType* StructType = nullptr;
	FName ObjectType;
	Shader::EValueComponentType ValueComponentType = Shader::EValueComponentType::Void;

	void EnsureNumComponents(int32 NumComponents);

	/** Evaluation type for each component, may be 'None' for components that are unused */
	TArray<FPreparedComponent, TInlineAllocator<4>> PreparedComponents;
};
inline bool operator==(const FPreparedType& Lhs, const FPreparedType& Rhs)
{
	return Lhs.ValueComponentType == Rhs.ValueComponentType &&
		Lhs.StructType == Rhs.StructType &&
		Lhs.ObjectType == Rhs.ObjectType &&
		Lhs.PreparedComponents == Rhs.PreparedComponents;
}
inline bool operator!=(const FPreparedType& Lhs, const FPreparedType& Rhs)
{
	return !operator==(Lhs, Rhs);
}

FPreparedType MergePreparedTypes(const FPreparedType& Lhs, const FPreparedType& Rhs);
FPreparedType MakeNonLWCType(const FPreparedType& Type);

class FPrepareValueResult
{
public:
	const FPreparedType& GetPreparedType() const { return PreparedType; }

	bool SetTypeVoid();

	bool SetType(FEmitContext& Context, const FRequestedType& RequestedType, EExpressionEvaluation Evaluation, const Shader::FType& Type);
	bool SetType(FEmitContext& Context, const FRequestedType& RequestedType, const FPreparedType& Type);

private:
	bool TryMergePreparedType(FEmitContext& Context,
		const Shader::FStructType* StructType,
		FName ObjectType,
		Shader::EValueComponentType ComponentType);

	FPreparedType PreparedType;
	bool bPreparingValue = false;

	friend class FExpression;
	friend class FEmitContext;
};

struct FEmitValueShaderResult
{
	FEmitShaderExpression* Code = nullptr;
};

struct FEmitCustomHLSLParameterResult
{
	FStringBuilderBase* DeclarationCode = nullptr;
	FStringBuilderBase* ForwardCode = nullptr;
};

struct FEmitValuePreshaderResult
{
	explicit FEmitValuePreshaderResult(Shader::FPreshaderData& InPreshader) : Preshader(InPreshader) {}

	Shader::FPreshaderData& Preshader;
	Shader::FType Type;
};

enum class EDerivativeCoordinate : uint8
{
	Ddx,
	Ddy,
};

struct FExpressionDerivatives
{
	const FExpression* ExpressionDdx = nullptr;
	const FExpression* ExpressionDdy = nullptr;

	const FExpression* Get(EDerivativeCoordinate Coord) const { return (Coord == EDerivativeCoordinate::Ddx) ? ExpressionDdx : ExpressionDdy; }

	bool IsValid() const { return (bool)ExpressionDdx && (bool)ExpressionDdy; }
};

/**
 * Represents an HLSL expression.  This is a piece of code that evaluates to a value, but has no side effects.
 * Unlike statements, expressions are not expected to execute in any particular order.  They may be cached (or not) in generated code, without the underlying implementation needing to care.
 * Examples include constant literals, variable accessors, and various types of math operations
 * This is an abstract base class, with derived classes representing various types of expression
 */
class FExpression : public FOwnedNode
{
public:
	virtual TConstArrayView<UObject*> GetOwners() const final { return Owners; }

	/**
	 * Get Shader/Preshader/Constant value for the expression
	 * @param RequestedType the componets of the result that are needed
	 * @param PreparedType the prepared type of this expression, should be return of Context.PrepareExpression/GetPreparedType
	 * @param ResultType the requested output type, value will be cast to this type if needed
	 * Various overloads below will derive the missing values from those that are provided, and/or object PreparedType from the given Context directly
	 */
	FEmitShaderExpression* GetValueShader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, const FPreparedType& PreparedType, const Shader::FType& ResultType) const;
	Shader::FType GetValuePreshader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, const FPreparedType& PreparedType, const Shader::FType& ResultType, Shader::FPreshaderData& OutPreshader) const;
	Shader::FValue GetValueConstant(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, const FPreparedType& PreparedType, const Shader::FType& ResultType) const;

	FEmitShaderExpression* GetValueShader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, const Shader::FType& ResultType) const;
	FEmitShaderExpression* GetValueShader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType) const;
	FEmitShaderExpression* GetValueShader(FEmitContext& Context, FEmitScope& Scope, const Shader::FType& ResultType) const;
	FEmitShaderExpression* GetValueShader(FEmitContext& Context, FEmitScope& Scope, Shader::EValueType ResultType) const;
	FEmitShaderExpression* GetValueShader(FEmitContext& Context, FEmitScope& Scope) const;

	Shader::FType GetValuePreshader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, const Shader::FType& ResultType, Shader::FPreshaderData& OutPreshader) const;
	Shader::FType GetValuePreshader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, Shader::FPreshaderData& OutPreshader) const;
	Shader::FType GetValuePreshader(FEmitContext& Context, FEmitScope& Scope, const Shader::FType& ResultType, Shader::FPreshaderData& OutPreshader) const;
	Shader::FType GetValuePreshader(FEmitContext& Context, FEmitScope& Scope, Shader::EValueType ResultType, Shader::FPreshaderData& OutPreshader) const;

	Shader::FValue GetValueConstant(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, const FPreparedType& PreparedType) const;
	Shader::FValue GetValueConstant(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, const Shader::FType& ResultType) const;
	Shader::FValue GetValueConstant(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType) const;
	Shader::FValue GetValueConstant(FEmitContext& Context, FEmitScope& Scope, const FPreparedType& PreparedType, const Shader::FType& ResultType) const;
	Shader::FValue GetValueConstant(FEmitContext& Context, FEmitScope& Scope, const FPreparedType& PreparedType, Shader::EValueType ResultType) const;

	/**
	 * Gets the value as an 'Object' with a certain type
	 * Individual expressions will potentially support different types of objects
	 * @param ObjectTypeName should be the object type that matches the type returned by PrepareExpression
	 * @param OutObjectBase pointer to an object of the correct type
	 * @return true if given type is supported, otherwise false
	 */
	bool GetValueObject(FEmitContext& Context, FEmitScope& Scope, const FName& ObjectTypeName, void* OutObjectBase) const;

	template<typename ObjectType>
	bool GetValueObject(FEmitContext& Context, FEmitScope& Scope, ObjectType& OutObject) const
	{
		return GetValueObject(Context, Scope, ObjectType::GetTypeName(), &OutObject);
	}

	/**
	 * Some expressions may support passing object types to custom HLSL expressions
	 * CheckObjectSupportsCustomHLSL() will return true if this is supported
	 * If supported, GetObjectCustomHLSLParameter() will generate code to declare the parameters in the custom HLSL function, and forward the parameters
	 * EmitValueShader() will be called to generate the actual HLSL code for the expression
	 */
	bool CheckObjectSupportsCustomHLSL(FEmitContext& Context, FEmitScope& Scope, const FName& ObjectTypeName) const;
	void GetObjectCustomHLSLParameter(FEmitContext& Context,
		FEmitScope& Scope,
		const FName& ObjectTypeName,
		const TCHAR* ParameterName,
		FStringBuilderBase& OutDeclarationCode,
		FStringBuilderBase& OutForwardCode) const;

protected:
	virtual void ComputeAnalyticDerivatives(FTree& Tree, FExpressionDerivatives& OutResult) const;
	virtual const FExpression* ComputePreviousFrame(FTree& Tree, const FRequestedType& RequestedType) const;
	virtual bool PrepareValue(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, FPrepareValueResult& OutResult) const = 0;
	virtual void EmitValueShader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, FEmitValueShaderResult& OutResult) const;
	virtual void EmitValuePreshader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, FEmitValuePreshaderResult& OutResult) const;
	virtual bool EmitValueObject(FEmitContext& Context, FEmitScope& Scope, const FName& ObjectTypeName, void* OutObjectBase) const;
	virtual bool EmitCustomHLSLParameter(FEmitContext& Context, FEmitScope& Scope, const FName& ObjectTypeName, const TCHAR* ParameterName, FEmitCustomHLSLParameterResult& OutResult) const;

private:
	TArray<UObject*, TInlineAllocator<2>> Owners;

	friend class FTree;
	friend class FEmitContext;
	friend class FExpressionForward;
};

class FFunction final : public FNode
{
public:
	FScope& GetRootScope() const { return *RootScope; }

	FScope* RootScope = nullptr;
	FScope* CalledScope = nullptr;
	TArray<const FExpression*, TInlineAllocator<8>> OutputExpressions;
};

/**
 * Represents an HLSL scope.  A scope contains a single statement, along with any expressions required by that statement
 */
class FScope final : public FNode
{
public:
	static FScope* FindSharedParent(FScope* Lhs, FScope* Rhs);

	inline FScope* GetParentScope() const { return ParentScope; }

	inline TArrayView<FScope*> GetPreviousScopes() const
	{
		// const_cast needed, otherwise type of array view is 'FScope*const' which doesn't make sense
		return MakeArrayView(const_cast<FScope*>(this)->PreviousScope, NumPreviousScopes);
	}

	bool HasParentScope(const FScope& ParentScope) const;

	void AddPreviousScope(FScope& Scope);


private:
	friend class FTree;
	friend class FExpression;
	friend class FEmitContext;

	FScope* ParentScope = nullptr;
	FStatement* OwnerStatement = nullptr;
	FStatement* ContainedStatement = nullptr;
	FScope* PreviousScope[MaxNumPreviousScopes];
	TMap<FName, const FExpression*> LocalMap;
	int32 NumPreviousScopes = 0;
	int32 NestedLevel = 0;
};

/**
 * The HLSL AST.  Basically a wrapper around the root scope, with some helper methods
 */
class FTree
{
public:
	static FTree* Create(FMemStackBase& Allocator);
	static void Destroy(FTree* Tree);

	FMemStackBase& GetAllocator() { return *Allocator; }

	bool Finalize();

	void PushOwner(UObject* Owner);
	UObject* PopOwner();
	UObject* GetCurrentOwner() const;

	bool EmitShader(FEmitContext& Context, FStringBuilderBase& OutCode) const;

	FScope& GetRootScope() const { return *RootScope; }

	template<typename T, typename... ArgTypes>
	inline const FExpression* NewExpression(ArgTypes&&... Args)
	{
		FHasher Hasher;
		AppendHash(Hasher, GetGeneratedTypeName<T>());
		AppendHashes(Hasher, Forward<ArgTypes>(Args)...);
		const FXxHash64 Hash = Hasher.Finalize();
		FExpression* Expression = FindExpression(Hash);
		if (!Expression)
		{
			T* TypedExpression = NewNode<T>(Forward<ArgTypes>(Args)...);
			RegisterExpression(TypedExpression, Hash);
			Expression = TypedExpression;
		}
		else
		{
			AddCurrentOwner(Expression);
		}
		return Expression;
	}

	template<typename T, typename... ArgTypes>
	inline T* NewStatement(FScope& Scope, ArgTypes&&... Args)
	{
		T* Statement = NewNode<T>(Forward<ArgTypes>(Args)...);
		RegisterStatement(Scope, Statement);
		return Statement;
	}

	void AssignLocal(FScope& Scope, const FName& LocalName, const FExpression* Value);
	const FExpression* AcquireLocal(FScope& Scope, const FName& LocalName);

	const FExpression* NewFunctionCall(FScope& Scope, FFunction* Function, int32 OutputIndex);

	FExpressionDerivatives GetAnalyticDerivatives(const FExpression* InExpression);
	const FExpression* GetPreviousFrame(const FExpression* InExpression, const FRequestedType& RequestedType);

	FScope* NewScope(FScope& Scope);
	FScope* NewOwnedScope(FStatement& Owner);
	FFunction* NewFunction();

	/** Shortcuts to create various common expression types */
	const FExpression* NewConstant(const Shader::FValue& Value);
	const FExpression* NewSwizzle(const FSwizzleParameters& Params, const FExpression* Input);
	const FExpression* NewUnaryOp(EOperation Op, const FExpression* Input);
	const FExpression* NewBinaryOp(EOperation Op, const FExpression* Lhs, const FExpression* Rhs);

	const FExpression* NewAbs(const FExpression* Input) { return NewUnaryOp(EOperation::Abs, Input); }
	const FExpression* NewNeg(const FExpression* Input) { return NewUnaryOp(EOperation::Neg, Input); }
	const FExpression* NewSaturate(const FExpression* Input) { return NewUnaryOp(EOperation::Saturate, Input); }
	const FExpression* NewSum(const FExpression* Input) { return NewUnaryOp(EOperation::Sum, Input); }
	const FExpression* NewRcp(const FExpression* Input) { return NewUnaryOp(EOperation::Rcp, Input); }
	const FExpression* NewSqrt(const FExpression* Input) { return NewUnaryOp(EOperation::Sqrt, Input); }
	const FExpression* NewRsqrt(const FExpression* Input) { return NewUnaryOp(EOperation::Rsqrt, Input); }
	const FExpression* NewLog2(const FExpression* Input) { return NewUnaryOp(EOperation::Log2, Input); }
	const FExpression* NewExp2(const FExpression* Input) { return NewUnaryOp(EOperation::Exp2, Input); }
	const FExpression* NewFrac(const FExpression* Input) { return NewUnaryOp(EOperation::Frac, Input); }
	const FExpression* NewLength(const FExpression* Input) { return NewUnaryOp(EOperation::Length, Input); }
	const FExpression* NewNormalize(const FExpression* Input) { return NewUnaryOp(EOperation::Normalize, Input); }
	const FExpression* NewSin(const FExpression* Input) { return NewUnaryOp(EOperation::Sin, Input); }
	const FExpression* NewCos(const FExpression* Input) { return NewUnaryOp(EOperation::Cos, Input); }

	const FExpression* NewAdd(const FExpression* Lhs, const FExpression* Rhs) { return NewBinaryOp(EOperation::Add, Lhs, Rhs); }
	const FExpression* NewSub(const FExpression* Lhs, const FExpression* Rhs) { return NewBinaryOp(EOperation::Sub, Lhs, Rhs); }
	const FExpression* NewMul(const FExpression* Lhs, const FExpression* Rhs) { return NewBinaryOp(EOperation::Mul, Lhs, Rhs); }
	const FExpression* NewDiv(const FExpression* Lhs, const FExpression* Rhs) { return NewBinaryOp(EOperation::Div, Lhs, Rhs); }
	const FExpression* NewFmod(const FExpression* Lhs, const FExpression* Rhs) { return NewBinaryOp(EOperation::Fmod, Lhs, Rhs); }
	const FExpression* NewPowClamped(const FExpression* Lhs, const FExpression* Rhs) { return NewBinaryOp(EOperation::PowPositiveClamped, Lhs, Rhs); }
	const FExpression* NewMin(const FExpression* Lhs, const FExpression* Rhs) { return NewBinaryOp(EOperation::Min, Lhs, Rhs); }
	const FExpression* NewMax(const FExpression* Lhs, const FExpression* Rhs) { return NewBinaryOp(EOperation::Max, Lhs, Rhs); }
	const FExpression* NewLess(const FExpression* Lhs, const FExpression* Rhs) { return NewBinaryOp(EOperation::Less, Lhs, Rhs); }
	const FExpression* NewGreater(const FExpression* Lhs, const FExpression* Rhs) { return NewBinaryOp(EOperation::Greater, Lhs, Rhs); }
	const FExpression* NewLessEqual(const FExpression* Lhs, const FExpression* Rhs) { return NewBinaryOp(EOperation::LessEqual, Lhs, Rhs); }
	const FExpression* NewGreaterEqual(const FExpression* Lhs, const FExpression* Rhs) { return NewBinaryOp(EOperation::GreaterEqual, Lhs, Rhs); }

	const FExpression* NewLog(const FExpression* Input);
	const FExpression* NewPow2(const FExpression* Input) { return NewMul(Input, Input); }
	const FExpression* NewCross(const FExpression* Lhs, const FExpression* Rhs);
	const FExpression* NewDot(const FExpression* Lhs, const FExpression* Rhs) { return NewSum(NewMul(Lhs, Rhs)); }
	const FExpression* NewLerp(const FExpression* A, const FExpression* B, const FExpression* T) { return NewAdd(A, NewMul(NewSub(B, A), T)); }

private:
	template<typename T, typename... ArgTypes>
	inline T* NewNode(ArgTypes&&... Args)
	{
		T* Node = new(*Allocator) T(Forward<ArgTypes>(Args)...);
		RegisterNode(Node);
		return Node;
	}

	void RegisterNode(FNode* Node);
	void RegisterExpression(FExpression* Expression, FXxHash64 Hash);
	void RegisterExpression(FExpressionLocalPHI* Expression, FXxHash64 Hash);
	void AddCurrentOwner(FExpression* Expression);
	void RegisterStatement(FScope& Scope, FStatement* Statement);
	FExpression* FindExpression(FXxHash64 Hash);

	FMemStackBase* Allocator = nullptr;
	FNode* Nodes = nullptr;
	FScope* RootScope = nullptr;
	TArray<UObject*, TInlineAllocator<8>> OwnerStack;
	TMap<FXxHash64, FExpression*> ExpressionMap;
	TArray<FExpressionLocalPHI*> PHIExpressions;

	friend class FExpressionLocalPHI;
};

struct FOwnerScope : private FNoncopyable
{
	FOwnerScope(FTree& InTree, UObject* InOwner, bool bPushOwner = true) : Tree(bPushOwner ? &InTree : nullptr), Owner(InOwner)
	{
		if (bPushOwner)
		{
			Tree->PushOwner(InOwner);
		}
	}

	~FOwnerScope()
	{
		if (Tree)
		{
			verify(Tree->PopOwner() == Owner);
		}
	}

	FTree* Tree;
	UObject* Owner;
};

} // namespace UE::HLSLTree

#endif // WITH_EDITOR