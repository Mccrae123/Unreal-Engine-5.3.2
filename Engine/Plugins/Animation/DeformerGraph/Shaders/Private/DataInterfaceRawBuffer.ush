// Copyright Epic Games, Inc. All Rights Reserved.

#include "/Plugin/ComputeFramework/Private/ComputeKernelCommon.ush"

uint DI_LOCAL(StartOffset);
uint DI_LOCAL(BufferSize);

#ifdef BUFFER_SPLIT_READ_WRITE
StructuredBuffer<BUFFER_TYPE> DI_LOCAL(BufferSRV);
#endif
RWStructuredBuffer<BUFFER_TYPE> DI_LOCAL(BufferUAV);

DI_IMPL_READ(ReadNumValues, uint, )
{
	return DI_LOCAL(BufferSize);
}

DI_IMPL_READ(ReadValue, BUFFER_TYPE, uint Index)
{
	uint BufferIndex = DI_LOCAL(StartOffset) + Index;
#ifdef BUFFER_SPLIT_READ_WRITE
	return DI_LOCAL(BufferSRV)[BufferIndex];
#else
	return DI_LOCAL(BufferUAV)[BufferIndex];
#endif
}

DI_IMPL_WRITE(WriteValue, uint Index, BUFFER_TYPE Value)
{
	uint BufferIndex = DI_LOCAL(StartOffset) + Index;
	DI_LOCAL(BufferUAV)[BufferIndex] = Value;
}

DI_IMPL_WRITE(WriteAtomicAdd, uint Index, BUFFER_TYPE Value)
{
#ifdef BUFFER_TYPE_SUPPORTS_ATOMIC
	uint BufferIndex = DI_LOCAL(StartOffset) + Index;
	BUFFER_TYPE OldValue;
	InterlockedAdd(DI_LOCAL(BufferUAV)[BufferIndex], Value, OldValue);
#endif
}

DI_IMPL_WRITE(WriteAtomicMin, uint Index, BUFFER_TYPE Value)
{
#ifdef BUFFER_TYPE_SUPPORTS_ATOMIC
	uint BufferIndex = DI_LOCAL(StartOffset) + Index;
	BUFFER_TYPE OldValue;
	InterlockedMin(DI_LOCAL(BufferUAV)[BufferIndex], Value, OldValue);
#endif
}

DI_IMPL_WRITE(WriteAtomicMax, uint Index, BUFFER_TYPE Value)
{
#ifdef BUFFER_TYPE_SUPPORTS_ATOMIC
	uint BufferIndex = DI_LOCAL(StartOffset) + Index;
	BUFFER_TYPE OldValue;
	InterlockedMin(DI_LOCAL(BufferUAV)[BufferIndex], Value, OldValue);
#endif
}
