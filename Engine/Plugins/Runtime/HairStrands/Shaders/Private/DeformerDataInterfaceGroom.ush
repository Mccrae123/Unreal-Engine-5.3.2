// Copyright Epic Games, Inc. All Rights Reserved.

#include "/Plugin/ComputeFramework/Private/ComputeKernelCommon.ush"
#include "/Engine/Private/HairStrands/HairStrandsVertexFactoryCommon.ush"
#include "/Engine/Private/HairStrands/HairStrandsAttributeCommon.ush"

///////////////////////////////////////////////////////////////////////////////////////////////////
// Bindings

HAIR_STRANDS_INSTANCE_PARAMETERS({DataInterfaceName})

///////////////////////////////////////////////////////////////////////////////////////////////////
// Helpers

FHairControlPoint ReadControlPointData(uint ControlPointIndex)
{
	const uint MaxControlPoints = {DataInterfaceName}_PointCount;
	if (ControlPointIndex >= MaxControlPoints)
	{
		return (FHairControlPoint)0;
	}

	// Hair deformer work in local space so no need for position offset
	return UnpackHairControlPoint(
		{DataInterfaceName}_PositionBuffer[ControlPointIndex], 
		{DataInterfaceName}_PositionOffsetBuffer[0],
		{DataInterfaceName}_Radius, 
		1.0f /*RootScale*/, 
		1.0f /*TipScale*/);
}

FHairCurve ReadCurveData(uint CurveIndex)
{
	const uint MaxCurve = {DataInterfaceName}_CurveCount;
	if (CurveIndex >= MaxCurve)
	{
		return (FHairCurve)0;
	}

	return UnpackHairCurve({DataInterfaceName}_CurveBuffer[CurveIndex]);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Interface

uint ReadNumControlPoints_{DataInterfaceName}()
{
	return {DataInterfaceName}_PointCount;
}

uint ReadNumCurves_{DataInterfaceName}()
{
	return {DataInterfaceName}_CurveCount;
}

float3 ReadPosition_{DataInterfaceName}(uint ControlPointIndex)
{
	return ReadControlPointData(ControlPointIndex).Position;
}

float ReadRadius_{DataInterfaceName}(uint ControlPointIndex)
{
	return ReadControlPointData(ControlPointIndex).WorldRadius;
}

float ReadCoordU_{DataInterfaceName}(uint ControlPointIndex)
{
	return ReadControlPointData(ControlPointIndex).UCoord;
}

float ReadLength_{DataInterfaceName}(uint ControlPointIndex)
{
	const float CoordU      = ReadControlPointData(ControlPointIndex).UCoord;
	const float CurveLength = UnpackHairLength(InternalGetHairStrandsAttributesPerCurve(ControlPointIndex, HAIR_CURVE_ATTRIBUTE_OFFSET_LENGTH({DataInterfaceName}_CurveAttributeOffsets), HAIR_CURVE_ATTRIBUTE_STRIDE_LENGTH, {DataInterfaceName}_CurveAttributeBuffer, {DataInterfaceName}_PointToCurveBuffer));
	return CurveLength * CoordU;
}

float2 ReadRootUV_{DataInterfaceName}(uint ControlPointIndex)
{
	return UnpackHairRootUV(InternalGetHairStrandsAttributesPerCurve(ControlPointIndex, HAIR_CURVE_ATTRIBUTE_OFFSET_ROOTUV({DataInterfaceName}_CurveAttributeOffsets), HAIR_CURVE_ATTRIBUTE_STRIDE_ROOTUV, {DataInterfaceName}_CurveAttributeBuffer, {DataInterfaceName}_PointToCurveBuffer));
}

float ReadSeed_{DataInterfaceName}(uint ControlPointIndex)
{
	return UnpackHairSeed(InternalGetHairStrandsAttributesPerCurve(ControlPointIndex, HAIR_CURVE_ATTRIBUTE_OFFSET_SEED({DataInterfaceName}_CurveAttributeOffsets), HAIR_CURVE_ATTRIBUTE_STRIDE_SEED, {DataInterfaceName}_CurveAttributeBuffer, {DataInterfaceName}_PointToCurveBuffer));
}

float ReadCurveOffsetPoint_{DataInterfaceName}(uint CurveIndex)
{
	return ReadCurveData(CurveIndex).PointIndex;
}

float ReadCurveNumPoint_{DataInterfaceName}(uint CurveIndex)
{
	return ReadCurveData(CurveIndex).PointCount;
}

