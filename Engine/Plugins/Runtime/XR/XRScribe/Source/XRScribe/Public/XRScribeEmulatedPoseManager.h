// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "Containers/Array.h"
#include "Containers/Map.h"
#include "Containers/StaticArray.h"
#include "Logging/LogMacros.h"
#include "Math/Transform.h"
#include "OpenXRCore.h"

namespace UE::XRScribe
{

struct FOpenXRCreateReferenceSpacePacket;
struct FOpenXRLocateSpacePacket;

// The PoseManager has two primary jobs:
// * ingest data from capture
// * generate estimated poses based on emulator frametimes
//
// When using the PoseManager, we'll interact with it similarly to xrLocateSpace: give it time and spaces,
// and return locations.
//
// Internally, we'll plan to have all managed poses in tracker-space, and convert to the different spaces
// as needed. This does mean we'll need to know how to convert between different spaces, even if the
// original capture might not tell us how to

class FOpenXRPoseManager
{

public:

	// Number of poses the manager will keep available relative to 'current' pose, in order for multi-frame pose queries
	static const int32 PoseHistorySize = 5;

	/**
	 * Register information about a reference space from a capture file, in order to build a history of
	 * space locations relative to that reference space.
	 *
	 * @param CreateReferenceSpacePacket The create info for the captured reference space
	 *
	 */
	void RegisterCapturedReferenceSpace(const FOpenXRCreateReferenceSpacePacket& CreateReferenceSpacePacket);

	/**
	 * Register history of LocateSpace calls relative to a specific XrSpace
	 *
	 * @param SpaceHistory List of LocateSpace calls with a unified Space (but possibly varying BaseSpace) 
	 *
	 */
	void RegisterCapturedSpaceHistory(const TArray<FOpenXRLocateSpacePacket>& SpaceHistory);

	/**
	 * Register emulated reference space. Pose manager needs this to match the new emulated reference space against
	 * a captured reference space of similar attributes.
	 *
	 * @param CreateInfo Create info for emulated reference space, in order to match against captured history of similarly configured space
	 * @param SpaceHandle Emulation generated handle for new space
	 *
	 */
	void RegisterEmulatedReferenceSpace(const XrReferenceSpaceCreateInfo& CreateInfo, XrSpace SpaceHandle);

	/**
	 * Add time and frame number in order to generate interpolated poses
	 * We use the frame numbers to index into a relative history of the poses, and the time
	 * for frame matching + interpolation, because LocateSpace calls only provide a time argument
	 *
	 * @param Time Emulation generated time for new frame
	 * @param FrameNum Emulation generated frame index
	 *
	 */
	void AddEmulatedFrameTime(XrTime Time, int32 FrameNum);

	/**
	 * Fetch a pose generated from the captured history, by using space handles and times generated by the emulated runtime
	 *
	 * @param LocatingSpace Generated pose is associated with this space
	 * @param BaseSpace Generated pose is relative to this space
	 * @param Time Time of requested pose, relative to the known times from the emulated runtime
	 *
	 * return Location derived from captured history if available, or default location if request is unknown or invalid
	 */
	XrSpaceLocation GetEmulatedPoseForTime(XrSpace LocatingSpace, XrSpace BaseSpace, XrTime Time);

private:

	// Known reference spaces from capture
	TArray<FOpenXRCreateReferenceSpacePacket> CapturedReferenceSpaces;
	
	/**
	 * Pose histories for reference space types, which could be unified across different space handles
	 * with the same underlying reference space type.
	 */
	TMap<XrReferenceSpaceType, TArray<FOpenXRLocateSpacePacket>> ReferencePoseHistories;

	XrReferenceSpaceType TrackingSpaceType = XR_REFERENCE_SPACE_TYPE_VIEW;

	/**
	 * Helper function to fetch underlying reference space type from opaque XrSpace handle
	 */
	XrReferenceSpaceType GetCapturedReferenceSpaceType(XrSpace CapturedSpace);

	// Map of emulated spaces to their underlying reference space type (if applicable)
	TMap<XrSpace, XrReferenceSpaceType> EmulatedReferenceSpaceTypeMap;

	struct FrameTimeHistoryEntry
	{
		XrTime Time = 0;
		int32 FrameIndex = -1;
	};

	// History of frame times, in order for pose manager to look into to estimate the relative frame index for times
	TStaticArray <FrameTimeHistoryEntry, PoseHistorySize> FrameTimeHistory;
	int32 LastInsertedFrameIndex = 0;

};

} // namespace UE::XRScribe
