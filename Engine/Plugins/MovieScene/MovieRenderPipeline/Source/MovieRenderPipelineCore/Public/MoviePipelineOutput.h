// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.
#pragma once

#include "UObject/Object.h"
#include "MovieRenderPipelineDataTypes.h"
#include "Engine/EngineTypes.h"
#include "MoviePipelineSetting.h"
#include "MoviePipelineOutput.generated.h"

class UMoviePipeline;

/**
* A base class for different output containers for the data generated by the Movie Pipeline,
* i.e: image sequences, video containers, etc.
*/
UCLASS(Blueprintable, Abstract)
class MOVIERENDERPIPELINECORE_API UMoviePipelineOutput : public UMoviePipelineSetting
{
	GENERATED_BODY()
public:
	/**
	* Called when all data sources for a given output frame are available and need to be placed in the output stream. All input passes are
	* given at once to make it easier to decide if they belong in separate containers or in combined containers.
	*/
	void ProcessFrame(TArray<MoviePipeline::FOutputFrameData> FrameData, FMoviePipelineFrameOutputState CachedOutputState, FDirectoryPath OutputDirectory)
	{
		ProcessFrameImpl(FrameData, CachedOutputState, OutputDirectory);
	}

	/** 
	* Called once when all frames have been produced for the pipeline. Use this as an indicator to start flushing to disk. 
	* Async processes can be started here and HasFinishedProcessing() will be called each frame until all all containers
	* return true, at which point Finalize will be called.
	*/
	void BeginFinalize() { BeginFinalizeImpl(); }

	/**
	* Called each frame to check to see if this output container has finished processing. Finalize won't be called until
	* all output containers return true for this. 
	*/
	bool HasFinishedProcessing() { return HasFinishedProcessingImpl(); }

	/** 
	* Called after all output containers have reported that they are done processing.
	*/
	void Finalize() { FinalizeImpl(); }

	/**
	* This is called when a new shot starts, before warm up happens. See OnFrameProductionStart.
	*/
	void OnShotInitialized(const TOptional<FMoviePipelineShotCache> PrevShot, const FMoviePipelineShotCache& NewShot) { OnShotInitializedImpl(PrevShot, NewShot); }
	
	/**
	* This is called when a shot ends, right after the last frame is rendered.
	*/
	void OnShotFinished(const FMoviePipelineShotCache& Shot) { OnShotFinishedImpl(Shot); }

	/**
	* This is called during the Shutdown process of the Pipeline. This is after finalization.
	*/
	void OnPipelineFinished() { OnPipelineFinishedImpl(); }

	/**
	* This is called right before a shot starts producing frames, after warm up. See OnShotInitialized
	*/
	void OnFrameProductionStart() { OnFrameProductionStartImpl(); }

	/**
	* Called at the end of the frame, before rendering has happened for that frame.
	*/
	void OnPostTick() { OnPostTickImpl(); }

protected:
	virtual void OnShotInitializedImpl(const TOptional<FMoviePipelineShotCache> PrevShot, const FMoviePipelineShotCache& NewShot) {}
	virtual void OnShotFinishedImpl(const FMoviePipelineShotCache& Shot) {}

	virtual void ProcessFrameImpl(TArray<MoviePipeline::FOutputFrameData> FrameData, FMoviePipelineFrameOutputState CachedOutputState, FDirectoryPath OutputDirectory) {};
	virtual void FinalizeImpl() {}
	virtual void BeginFinalizeImpl() {}
	virtual bool HasFinishedProcessingImpl() { return true; }
	virtual void OnPipelineFinishedImpl() {}
	virtual void OnFrameProductionStartImpl() {}
	virtual void OnPostTickImpl() {}
};