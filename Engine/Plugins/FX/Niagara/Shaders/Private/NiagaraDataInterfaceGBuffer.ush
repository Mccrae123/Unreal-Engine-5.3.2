// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "/Engine/Private/DeferredShadingCommon.ush"

#define NDIGBUFFER_ENABLED				1
#define NDIGBUFFER_USE_GBUFFER_VELOCITY	0

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Texture2D NDIGBuffer_VelocityTexture;
SamplerState NDIGBuffer_VelocityTextureSampler;

void DIGBuffer_DecodeDiffuseColor(in float2 ScreenUV, out bool IsValid, out float3 OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.DiffuseColor;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeWorldNormal(in float2 ScreenUV, out bool IsValid, out float3 OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.WorldNormal;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeScreenVelocity(in float2 ScreenUV, out bool IsValid, out float3 OutValue)
{
	IsValid = false;
	OutValue = 0;
#if NDIGBUFFER_ENABLED
	float4 EncodedVelocity = 0;
	#if NDIGBUFFER_USE_GBUFFER_VELOCITY
		EncodedVelocity = GetGBufferData(ScreenUV).Velocity;
	#else
		EncodedVelocity = NDIGBuffer_VelocityTexture.SampleLevel(NDIGBuffer_VelocityTextureSampler, ScreenUV, 0);
	#endif
	IsValid = true;
	if ( EncodedVelocity.x > 0 )
	{
		OutValue = DecodeVelocityFromTexture(EncodedVelocity);
	}
#endif
}

void DIGBuffer_DecodeWorldVelocity(in float2 ScreenUV, out bool IsValid, out float3 OutValue)
{
	IsValid = false;
	OutValue = 0;
#if NDIGBUFFER_ENABLED
	float4 EncodedVelocity = 0;
	#if NDIGBUFFER_USE_GBUFFER_VELOCITY
		EncodedVelocity = GetGBufferData(ScreenUV).Velocity;
	#else
		EncodedVelocity = NDIGBuffer_VelocityTexture.SampleLevel(NDIGBuffer_VelocityTextureSampler, ScreenUV, 0);
	#endif
	IsValid = true;
	if ( EncodedVelocity.x > 0 )
	{
		OutValue = DecodeVelocityFromTexture(EncodedVelocity);
		OutValue = mul(View.ClipToWorld, float4(OutValue, 0));
	}
#endif
}

void DIGBuffer_DecodeBaseColor(in float2 ScreenUV, out bool IsValid, out float3 OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.BaseColor;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeMetallic(in float2 ScreenUV, out bool IsValid, out float OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.Metallic;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeSpecular(in float2 ScreenUV, out bool IsValid, out float OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.Specular;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeRoughness(in float2 ScreenUV, out bool IsValid, out float OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.Roughness;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeDepth(in float2 ScreenUV, out bool IsValid, out float OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.Depth;
#else
	IsValid = false;
	OutValue = 0;
#endif
}
