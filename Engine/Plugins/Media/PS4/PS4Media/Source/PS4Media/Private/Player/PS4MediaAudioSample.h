// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreTypes.h"
#include "IMediaAudioSample.h"
#include "MediaObjectPool.h"
#include "MediaSampleQueue.h"
#include "Misc/Timespan.h"
#include "Templates/SharedPointer.h"

#include <sceavplayer.h>


/**
 * Audio sample generated by PS4Media player.
 */
class FPS4MediaAudioSample
	: public IMediaAudioSample
	, public IMediaPoolable
{
public:

	/** Default constructor. */
	FPS4MediaAudioSample()
		: Channels(0)
		, Frames(0)
		, SampleRate(0)
		, Time(FTimespan::Zero())
	{ }

	/** Virtual destructor. */
	virtual ~FPS4MediaAudioSample() { }

public:

	/**
	 * Initialize the sample.
	 *
	 * @param FrameInfo Audio frame information.
	 * @return true on success, false otherwise.
	 */
	bool Initialize(const SceAvPlayerFrameInfo& FrameInfo)
	{
		Buffer.Reset(FrameInfo.details.audio.size);
		Buffer.Append((uint8*)FrameInfo.pData, FrameInfo.details.audio.size);

		Channels = FrameInfo.details.audio.channelCount;
		Frames = FrameInfo.details.audio.size / (FrameInfo.details.audio.channelCount * sizeof(int16));
		SampleRate = FrameInfo.details.audio.sampleRate;
		Duration = FTimespan(Frames * ETimespan::TicksPerSecond / SampleRate);

		// recalculate timestamp (AvPlayer rounds to milliseconds)
		const int64 FrameNumber = (int64)FMath::RoundHalfFromZero(FTimespan::Ratio(FTimespan(FrameInfo.timeStamp * ETimespan::TicksPerMillisecond), Duration));
		Time = FrameNumber * Duration;

		return true;
	}

public:

	//~ IMediaAudioSample interface

	virtual const void* GetBuffer() override
	{
		return Buffer.GetData();
	}

	virtual uint32 GetChannels() const override
	{
		return Channels;
	}

	virtual FTimespan GetDuration() const override
	{
		return Duration;
	}

	virtual EMediaAudioSampleFormat GetFormat() const override
	{
		return EMediaAudioSampleFormat::Int16;
	}

	virtual uint32 GetFrames() const override
	{
		return Frames;
	}

	virtual uint32 GetSampleRate() const override
	{
		return SampleRate;
	}

	virtual FTimespan GetTime() const override
	{
		return Time;
	}

private:

	/** The sample's data buffer. */
	TArray<uint8> Buffer;

	/** Number of audio channels. */
	uint32 Channels;

	/** Duration for which the sample is valid. */
	FTimespan Duration;

	/** Number of frames in the buffer. */
	uint32 Frames;

	/** Audio sample rate (in frames per second). */
	uint32 SampleRate;

	/** Play time for which the sample was generated. */
	FTimespan Time;
};


/** Implements a pool for PS4 audio sample objects. */
class FPS4MediaAudioSamplePool : public TMediaObjectPool<FPS4MediaAudioSample> { };
