// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreTypes.h"
#include "IMediaTextureSample.h"
#include "Math/IntPoint.h"
#include "MediaObjectPool.h"
#include "MediaSampleQueue.h"
#include "Misc/Timespan.h"
#include "RHIResources.h"
#include "Templates/SharedPointer.h"


/**
 * Texture sample generated by PS4Media player.
 */
class FPS4MediaTextureSample
	: public IMediaTextureSample
	, public IMediaPoolable
{
public:

	/** Default constructor. */
	FPS4MediaTextureSample()
		: Time(FTimespan::Zero())
	{ }

	/** Virtual destructor. */
	virtual ~FPS4MediaTextureSample() { }

public:

	/**
	 * Initialize the sample.
	 *
	 * @param InDim The width and height of the sample's texture (in pixels).
	 * @param InTime The sample time (in the player's local clock).
	 * @return true on success, false otherwise.
	 */
	bool Initialize(const FIntPoint& InDim, FTimespan InTime)
	{
		check(IsInRenderingThread());

		if (InDim.GetMin() <= 0)
		{
			return false;
		}

		Time = InTime;

		if (Texture.IsValid() && (Texture->GetSizeXY() == InDim))
		{
			return true;
		}

		const uint32 CreateFlags = TexCreate_Dynamic | TexCreate_SRGB;

		TRefCountPtr<FRHITexture2D> DummyTexture2DRHI;
		FRHIResourceCreateInfo CreateInfo;

		RHICreateTargetableShaderResource2D(
			InDim.X,
			InDim.Y,
			PF_B8G8R8A8,
			1,
			CreateFlags,
			TexCreate_RenderTargetable,
			false,
			CreateInfo,
			Texture,
			DummyTexture2DRHI
		);

		return true;
	}

public:

	//~ IMediaTextureSample interface

	virtual const void* GetBuffer() override
	{
		return nullptr;
	}

	virtual FIntPoint GetDim() const override
	{
		if (!Texture.IsValid())
		{
			return FIntPoint::ZeroValue;
		}

		return Texture->GetTexture2D()->GetSizeXY();
	}

	virtual FTimespan GetDuration() const override
	{
		return FTimespan(ETimespan::TicksPerSecond / 30);
	}

	virtual EMediaTextureSampleFormat GetFormat() const override
	{
		return EMediaTextureSampleFormat::CharBGRA;
	}

	virtual FIntPoint GetOutputDim() const override
	{
		if (!Texture.IsValid())
		{
			return FIntPoint::ZeroValue;
		}

		return Texture->GetTexture2D()->GetSizeXY();
	}

	virtual uint32 GetStride() const override
	{
		if (!Texture.IsValid())
		{
			return 0;
		}

		return Texture->GetTexture2D()->GetSizeX() * 4;
	}

	virtual FRHITexture* GetTexture() const override
	{
		return Texture;
	}

	virtual FTimespan GetTime() const override
	{
		return Time;
	}

	virtual bool IsCacheable() const override
	{
		return true;
	}

	virtual bool IsOutputSrgb() const override
	{
		return true;
	}

public:

	//~ IMediaPoolable interface

	virtual void ShutdownPoolable() override
	{
		Time = FTimespan::Zero();
	}

private:

	/** The texture object containing the frame. */
	TRefCountPtr<FRHITexture2D> Texture;

	/** Play time for which the sample was generated. */
	FTimespan Time;
};


/** Implements a pool for PS4 texture samples. */
class FPS4MediaTextureSamplePool : public TMediaObjectPool<FPS4MediaTextureSample> { };
