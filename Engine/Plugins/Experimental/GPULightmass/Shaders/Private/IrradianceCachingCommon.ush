#include "/Engine/Private/HashTable.ush"

struct FFinalGatherHitPoint
{
	float3 WorldPosition;
	float3 WorldNormal;
};

bool ICHashTableAdd( uint Key, out uint Index )
{
	// Zero is reserved as invalid
	Key++;

	LOOP
	[allow_uav_condition]
	for( Index = MurmurMix( Key );; Index++ )
	{
		Index = Index % IrradianceCachingParameters.HashTableSize;

		uint StoredKey = IrradianceCachingParameters.RWHashTable[ Index ];
		if( StoredKey != Key )
		{
			if( StoredKey != 0 )
				continue;

			uint PrevKey;
			InterlockedCompareExchange( IrradianceCachingParameters.RWHashTable[ Index ], 0, Key, PrevKey );
			
			if( PrevKey == 0 )
				return true;
			else if( PrevKey != Key )
				continue;
		}

		break;
	}

	return false;
}

// Returns true if key is found.
// Index output is the hash table bucket this key is stored in if found.
bool ICHashTableFind( uint Key, out uint Index )
{
	// Zero is reserved as invalid
	Key++;

	LOOP
	[allow_uav_condition]
	for( Index = MurmurMix( Key );; Index++ )
	{
		Index = Index % IrradianceCachingParameters.HashTableSize;

		uint StoredKey = IrradianceCachingParameters.RWHashTable[ Index ];
		if( StoredKey != Key )
		{
			if( StoredKey != 0 )
				continue;
		}
		else
		{
			return true;
		}

		break;
	}

	return false;
}

uint3 EncodeVoxelKey(float3 VoxelPos)
{
	int3 Signed = int3( VoxelPos ) + 0x1000000;
	uint3 Voxel = uint3( Signed ) & 0xfffffff;

	uint3 Key;
	Key.x = Voxel.x;
	Key.y = Voxel.y;
	Key.z = Voxel.z;
	return Key;
}

float3 EncodePositionKey(float3 WorldPosition, float3 WorldNormal, float Spacing)
{
	// Our cache entries are square shaped surfels. Along the primary axis of the normal the length is 1/4 of the specified cell size - which means 4x resolution.
	// This reduces leaks through thin walls and also serves as a fail-safe plan when the geometry normal is not reliable
	
	const int CompressionFactor = 4;
	
	if(abs(WorldNormal.x) >= abs(WorldNormal.y) && abs(WorldNormal.x) >= abs(WorldNormal.z))
	{
		WorldPosition.x *= CompressionFactor;
		return floor(WorldPosition / Spacing);
	}
	
	if(abs(WorldNormal.y) >= abs(WorldNormal.x) && abs(WorldNormal.y) >= abs(WorldNormal.z))
	{
		WorldPosition.y *= CompressionFactor;
		return floor(WorldPosition / Spacing);
	}
	
	if(abs(WorldNormal.z) >= abs(WorldNormal.x) && abs(WorldNormal.z) >= abs(WorldNormal.y))
	{				
		WorldPosition.z *= CompressionFactor;
		return floor(WorldPosition / Spacing);
	}
	
	return floor(WorldPosition / Spacing);
}

uint EncodeNormalBits(float3 WorldNormal)
{
	return	(WorldNormal.x >= 0.01 ? (1 << 5) : 0) |
			(WorldNormal.y >= 0.01 ? (1 << 4) : 0) |
			(WorldNormal.z >= 0.01 ? (1 << 3) : 0) |
			(abs(WorldNormal.x) > abs(WorldNormal.y) && abs(WorldNormal.x) > abs(WorldNormal.z) ? (1 << 2) : 0) |
			(abs(WorldNormal.y) > abs(WorldNormal.x) && abs(WorldNormal.y) > abs(WorldNormal.z) ? (1 << 1) : 0) |
			(abs(WorldNormal.z) > abs(WorldNormal.x) && abs(WorldNormal.z) > abs(WorldNormal.y) ? (1 << 0) : 0)
			;
}

#define ATOMIC_ADD_FLOAT(Value, Increment) \
{ \
	uint NewValue = asuint(Increment); \
	uint CompareValue = 0; \
	uint OldValue; \
	[allow_uav_condition] \
	while (true) \
	{ \
		InterlockedCompareExchange(Value, CompareValue, NewValue, OldValue); \
		if (OldValue == CompareValue) \
			break; \
		CompareValue = OldValue; \
		NewValue = asuint(Increment + asfloat(OldValue)); \
	} \
}

void EmitGeometryHitPoint(FFinalGatherHitPoint HitPoint, uint Size)
{
	uint3 Key = EncodeVoxelKey(EncodePositionKey(HitPoint.WorldPosition, HitPoint.WorldNormal, Size));
	uint NormalDirectionBits = EncodeNormalBits(HitPoint.WorldNormal);
	
	uint HashKey = 0;
	HashKey = MurmurAdd( HashKey, Key.x );
	HashKey = MurmurAdd( HashKey, Key.y );
	HashKey = MurmurAdd( HashKey, Key.z );
	HashKey = MurmurAdd( HashKey, NormalDirectionBits );
	uint Index;
	if (ICHashTableAdd(HashKey, Index))
	{
		uint RecordIndex = 0;
		InterlockedAdd(IrradianceCachingParameters.RecordAllocator[0], 1, RecordIndex);
		RecordIndex %= IrradianceCachingParameters.CacheSize;
		IrradianceCachingParameters.RWHashToIndex[Index] = RecordIndex;
		if (IrradianceCachingParameters.RWIndexToHash[RecordIndex] != 0)
		{
			IrradianceCachingParameters.RWHashTable[IrradianceCachingParameters.RWIndexToHash[RecordIndex]] = 0;
		}
		IrradianceCachingParameters.RWIndexToHash[RecordIndex] = Index;
		IrradianceCachingParameters.IrradianceCacheRecords[RecordIndex] = uint4(0, 0, 0, 0);
	}
}

int GetIrradianceCachingQuality()
{
#ifdef VOLUMETRIC_LIGHTMAP_PATH_TRACING_MAIN_RG
	return IrradianceCachingParameters.Quality * VolumetricLightmapQualityMultiplier;
#endif
	
	return IrradianceCachingParameters.Quality;
}
