// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "AssetGenerationUtil.h"
#include "InteractiveTool.h"
#include "InteractiveToolManager.h"
#include "Materials/Material.h"

#include "Components/StaticMeshComponent.h"
#include "Engine/StaticMesh.h"
#include "Engine/StaticMeshActor.h"

#include "StaticMeshComponentBuilder.h"
#include "MeshDescriptionToDynamicMesh.h"
#include "MeshDescriptionBuilder.h"


FString AssetGenerationUtil::GetDefaultAutoGeneratedAssetPath()
{
	return FString("/Game/_GENERATED");
}


#if WITH_EDITOR
AActor* AssetGenerationUtil::GenerateStaticMeshActor(
	IToolsContextAssetAPI* AssetAPI,
	UWorld* TargetWorld,
	const FDynamicMesh3* Mesh,
	const FTransform3d& Transform,
	FString ObjectName,
	FString PackagePath,
	UMaterialInterface* Material
)
{
	check(AssetAPI);
	check(TargetWorld);
	check(Mesh);

	// asset name and location (temp)
	FString PackageFolderPath = (PackagePath.IsEmpty()) ? GetDefaultAutoGeneratedAssetPath() : PackagePath;
	//FString PackageFolderPath = AssetAPI->GetActiveAssetFolderPath();
	FString MeshName = ObjectName;

	// create new package
	FString UniqueAssetName;
	UPackage* AssetPackage = AssetAPI->MakeNewAssetPackage(PackageFolderPath, ObjectName, UniqueAssetName);

	// create new actor
	FRotator Rotation(0.0f, 0.0f, 0.0f);
	FActorSpawnParameters SpawnInfo;
	// @todo nothing here is specific to AStaticMeshActor...could we pass in a CDO and clone it instead of using SpawnActor?
	AStaticMeshActor* NewActor = TargetWorld->SpawnActor<AStaticMeshActor>(FVector::ZeroVector, Rotation, SpawnInfo);
	NewActor->SetActorLabel(*UniqueAssetName);

	// construct new static mesh
	FStaticMeshComponentBuilder Builder;
	Builder.Initialize(AssetPackage, FName(*UniqueAssetName));

	// Populate the MeshDescription associated with the asset.
	FMeshDescriptionBuilder MeshDescripBuilder;
	MeshDescripBuilder.SetMeshDescription(Builder.MeshDescription);
	if (Mesh != nullptr)
	{
		MeshDescripBuilder.AppendMesh(Mesh, true);
	}
	else
	{
		// should generate default sphere here or something...
	}

	// create new mesh component and set as root of NewActor.
	// NB: This should to be called only after the mesh has been created / populated,
	// internally it calls  NewStaticMesh->CommitMeshDescription(0);
	Builder.CreateAndSetAsRootComponent(NewActor);

	// transform new component to origin
	Builder.NewMeshComponent->SetWorldTransform((FTransform)Transform);

	if (Material)
	{
		Builder.NewMeshComponent->SetMaterial(0, Material);
	}
	// force save of asset
	//AssetAPI->InteractiveSaveGeneratedAsset(Builder.NewStaticMesh, AssetPackage);
	AssetAPI->AutoSaveGeneratedAsset(Builder.NewStaticMesh, AssetPackage);

	return NewActor;
}
#endif
