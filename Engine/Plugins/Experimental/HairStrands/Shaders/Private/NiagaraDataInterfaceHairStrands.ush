// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
NiagaraDataInterfaceHairStrands.ush 
=============================================================================*/

#pragma once

/* -----------------------------------------------------------------
 * Hair Strands constants and context
 * -----------------------------------------------------------------
 */

#define WRAP_SIZE 32
static const float M_PI = 3.14159265;
static const float SCALE = 1e+6;

static const int MASS_OFFSET = 0;
static const int TANGENT_OFFSET = 3;
static const int VELOCITY_OFFSET = 6;

struct FDIHairStrandsContext
{
	RWBuffer<uint4>		PointsPositionsBuffer;
	Buffer<uint>		CurvesOffsetsBuffer;
	Buffer<uint4>		RestPositionsBuffer;
	Texture3D<int>		GridCurrentBuffer;
	RWTexture3D<int>	GridDestinationBuffer;
	float4x4			WorldTransform;
	float4x4			WorldInverse;
	float4				WorldRotation;
	int					NumStrands;
	int					StrandSize;
	float				StrandDensity;
	float				RootThickness;
	float				TipThickness;
	float4				GridOrigin;
	int4				GridSize;
}; 

#define DIHAIRSTRANDS_DECLARE_CONSTANTS(NAME)\
RWBuffer<uint4> PointsPositionsBuffer_##NAME;\
Buffer<uint> CurvesOffsetsBuffer_##NAME;\
Buffer<uint4> RestPositionsBuffer_##NAME;\
Texture3D<int> GridCurrentBuffer_##NAME;\
RWTexture3D<int> GridDestinationBuffer_##NAME;\
float4x4 WorldTransform_##NAME;\
float4x4 WorldInverse_##NAME;\
float4 WorldRotation_##NAME;\
int NumStrands_##NAME;\
int StrandSize_##NAME;\
float StrandDensity_##NAME;\
float RootThickness_##NAME;\
float TipThickness_##NAME;\
float4 GridOrigin_##NAME;\
int4 GridSize_##NAME;\

#define DIHAIRSTRANDS_MAKE_CONTEXT(NAME)\
FDIHairStrandsContext DIContext;\
DIContext.PointsPositionsBuffer = PointsPositionsBuffer_##NAME;\
DIContext.CurvesOffsetsBuffer = CurvesOffsetsBuffer_##NAME;\
DIContext.RestPositionsBuffer = RestPositionsBuffer_##NAME;\
DIContext.WorldTransform = WorldTransform_##NAME;\
DIContext.WorldInverse = WorldInverse_##NAME;\
DIContext.WorldRotation = WorldRotation_##NAME;\
DIContext.NumStrands = NumStrands_##NAME;\
DIContext.StrandSize = StrandSize_##NAME;\
DIContext.StrandDensity = StrandDensity_##NAME;\
DIContext.RootThickness = RootThickness_##NAME;\
DIContext.TipThickness = TipThickness_##NAME;\
DIContext.GridOrigin = GridOrigin_##NAME;\
DIContext.GridSize = GridSize_##NAME;\
DIContext.GridCurrentBuffer = GridCurrentBuffer_##NAME;\
DIContext.GridDestinationBuffer = GridDestinationBuffer_##NAME;\

/* -----------------------------------------------------------------
 * Grid utilities
 * -----------------------------------------------------------------
 */

// Return true if the grid index is within the domain size
bool DIHairStrands_IsIndexValid(in FDIHairStrandsContext DIContext, in int3 GridIndex)
{
	return ((GridIndex.x < (DIContext.GridSize.x-1)) && (GridIndex.y < (DIContext.GridSize.y-1)) && (GridIndex.z < (DIContext.GridSize.z-1)));
}

// Transform the node world position in grid space
float3 DIHairStrands_GetGridPosition(in FDIHairStrandsContext DIContext, in float3 NodePosition)
{
	return ( mul(float4( NodePosition, 1.0), DIContext.WorldInverse).xyz - DIContext.GridOrigin.xyz );
}

// Return the grid hash given a grid index
int DIHairStrands_GetGridHash(in FDIHairStrandsContext DIContext, in int3 GridIndex)
{
	return GridIndex.z * DIContext.GridSize.y * DIContext.GridSize.x + GridIndex.y * DIContext.GridSize.x + GridIndex.x;
}

// Compute the grid index and fraction
void DIHairStrands_ComputeGridIndex(in FDIHairStrandsContext DIContext, in float3 GridPosition, in float3 GridOffset, out int3 OutGridIndex, out float3 OutGridFraction)
{
	const float3 GridCell = GridPosition / DIContext.GridOrigin.w - GridOffset;

	OutGridIndex = floor(GridCell);
	OutGridFraction = GridCell - OutGridIndex;
}

int3 DIHairStrands_GridNodeIndex( in FDIHairStrandsContext DIContext, in int3 GridIndex, in int DataOffset)
{
	return int3( GridIndex.x + DataOffset * DIContext.GridSize.x, GridIndex.yz);
}

void DIHairStrands_AddNodeScalar( in FDIHairStrandsContext DIContext, in int3 GridIndex, in int DataOffset, in float NodeScalar, in bool EnableLocking)
{
	const int ConvertScalar = NodeScalar * SCALE;
	if(EnableLocking)
	{
		InterlockedAdd(DIContext.GridDestinationBuffer[DIHairStrands_GridNodeIndex(DIContext,GridIndex,DataOffset)], ConvertScalar);
	}
	else
	{
		DIContext.GridDestinationBuffer[DIHairStrands_GridNodeIndex(DIContext,GridIndex,DataOffset)] += ConvertScalar;
	}
	DeviceMemoryBarrier();
}

void DIHairStrands_AddNodeVector( in FDIHairStrandsContext DIContext, in int3 GridIndex, in int DataOffset, in float3 NodeVector, in bool EnableLocking)
{
	DIHairStrands_AddNodeScalar(DIContext,GridIndex,DataOffset,NodeVector.x,EnableLocking);
	DIHairStrands_AddNodeScalar(DIContext,GridIndex,DataOffset+1,NodeVector.y,EnableLocking);
	DIHairStrands_AddNodeScalar(DIContext,GridIndex,DataOffset+2,NodeVector.z,EnableLocking);
}

float DIHairStrands_GetGridScalar( in FDIHairStrandsContext DIContext, in int3 GridIndex, in int DataOffset)
{
	return DIContext.GridCurrentBuffer[DIHairStrands_GridNodeIndex(DIContext,GridIndex,DataOffset)] / SCALE;
}

float3 DIHairStrands_GetGridVector( in FDIHairStrandsContext DIContext, in int3 GridIndex, in int DataOffset)
{
	return float3(DIHairStrands_GetGridScalar(DIContext,GridIndex,DataOffset),
				  DIHairStrands_GetGridScalar(DIContext,GridIndex,DataOffset+1),
				  DIHairStrands_GetGridScalar(DIContext,GridIndex,DataOffset+2));
}

// Transfer the velocity from the node to the grid
void DIHairStrands_BuildCollisionGrid(in FDIHairStrandsContext DIContext, in float3 NodePosition, in float3 NodeVelocity, in float NodeMass, 
			in float3 NodeGradientX, in float3 NodeGradientY, in float3 NodeGradientZ, out bool OutBuildStatus)
{
	SharedLocalPosition[GGroupThreadId.x] = NodePosition;
	SharedLocalVelocity[GGroupThreadId.x] = NodeVelocity;
	SharedInverseMass[GGroupThreadId.x] = NodeMass;
	GroupMemoryBarrier(); 

	OutBuildStatus = false;

	const int LocalIndex = GGroupThreadId.x % DIContext.StrandSize;
	if(LocalIndex != 0)
	{
		const float3 DeltaVelocity = SharedLocalVelocity[GGroupThreadId.x] - SharedLocalVelocity[GGroupThreadId.x-1];
		const float3 DeltaPosition = SharedLocalPosition[GGroupThreadId.x] - SharedLocalPosition[GGroupThreadId.x-1];

		const float2 SegmentWeight = (LocalIndex == 1) ? float2(1.0,0.5) : (LocalIndex == (DIContext.StrandSize-1) ) ? float2(0.5,1.0) : float2(0.5,0.5);
		const float SegmentMass =  (SharedInverseMass[GGroupThreadId.x-1] * SegmentWeight.x + SharedInverseMass[GGroupThreadId.x] * SegmentWeight.y);
		const float SegmentLength = length(DeltaPosition);

		const float3 GridPositionA = DIHairStrands_GetGridPosition(DIContext,SharedLocalPosition[GGroupThreadId.x-1]);
		const float3 GridPositionB = DIHairStrands_GetGridPosition(DIContext,SharedLocalPosition[GGroupThreadId.x]);
		const float3 GridSegment = GridPositionB - GridPositionA;

		const int NumSamples = ceil(SegmentLength / DIContext.GridOrigin.w);

		const float SampleMass = SegmentMass / NumSamples;
		const float3 SampleTangent = DeltaPosition / SegmentLength;

		for( int SampleIndex = 0; SampleIndex < NumSamples; ++SampleIndex)
		{
			const float SampleCoord = (0.5+SampleIndex) / NumSamples;
			const float3 SamplePosition = GridPositionA + SampleCoord * GridSegment;
			const float3 SampleMomentum = (SharedLocalVelocity[GGroupThreadId.x-1] + SampleCoord * DeltaVelocity) * SampleMass;

			for( int ComponentIndex = 0; ComponentIndex < 3; ++ComponentIndex)
			{
				const float3 NodeGradient = (ComponentIndex == 0) ? NodeGradientX : (ComponentIndex == 1) ? NodeGradientY : NodeGradientZ;
				float3 GridOffset = float3(0.5,0.5,0.5); GridOffset[ComponentIndex] = 0.0;
				int3 GridIndex = int3(0,0,0);
				float3 GridFraction = float3(0,0,0);
				DIHairStrands_ComputeGridIndex(DIContext,SamplePosition,GridOffset,GridIndex,GridFraction);

				if(DIHairStrands_IsIndexValid(DIContext,GridIndex))
				{
					OutBuildStatus = true;
					for(int i = 0; i < 2; ++i)
					{
						const float GridWeightX = (i == 0) ? 1.0 - GridFraction.x : GridFraction.x;
						for(int j = 0; j < 2; ++j)
						{
							const float GridWeightY = (j == 0) ? 1.0 - GridFraction.y : GridFraction.y;
							for(int k = 0; k < 2; ++k)
							{
								const float GridWeightZ = (k == 0) ? 1.0 - GridFraction.z : GridFraction.z;

								const float GridWeightXYZ = GridWeightX*GridWeightY*GridWeightZ;

								const int3 GridLocation = int3(GridIndex.x+i,GridIndex.y+j,GridIndex.z+k);
								const float3 DeltaPosition = ((GridLocation+GridOffset)* DIContext.GridOrigin.w) - SamplePosition;
								const float ExtendedMomentum = SampleMomentum[ComponentIndex] + dot(NodeGradient, DeltaPosition) * SampleMass;

								DIHairStrands_AddNodeScalar(DIContext,GridLocation,MASS_OFFSET+ComponentIndex,SampleMass * GridWeightXYZ,true);
								DIHairStrands_AddNodeScalar(DIContext,GridLocation,VELOCITY_OFFSET+ComponentIndex,ExtendedMomentum * GridWeightXYZ,true);
								//DIHairStrands_AddNodeScalar(DIContext,GridLocation,TANGENT_OFFSET+ComponentIndex,SampleTangent[ComponentIndex] * GridWeightXYZ,true);
							}
						}
					}
				}
			}
		}
	}
}


// Return the velocity from the grid to the node
void DIHairStrands_QueryCollisionGrid(in FDIHairStrandsContext DIContext, in float3 NodePosition, out float3 OutGridVelocity,
			out float3 OutGridTangent, out float OutGridMass, out float3 OutGridGradientX, out float3 OutGridGradientY, out float3 OutGridGradientZ)
{
	const float3 GridPosition = DIHairStrands_GetGridPosition(DIContext,NodePosition);
	
	OutGridVelocity = float3(0,0,0);
	OutGridMass = 0.0;
	OutGridTangent = float3(0,0,0);
	OutGridGradientX = float3(0,0,0);
	OutGridGradientY = float3(0,0,0);
	OutGridGradientZ = float3(0,0,0);

	for( int ComponentIndex = 0; ComponentIndex < 3; ++ComponentIndex)
	{
		float3 GridOffset = float3(0.5,0.5,0.5); GridOffset[ComponentIndex] = 0.0;
		int3 GridIndex = int3(0,0,0);
		float3 GridFraction = float3(0,0,0);
		DIHairStrands_ComputeGridIndex(DIContext,GridPosition,GridOffset,GridIndex,GridFraction);
		if(DIHairStrands_IsIndexValid(DIContext,GridIndex))
		{
			for(int i = 0; i < 2; ++i)
			{
				const float GridWeightX = (i == 0) ? 1.0 - GridFraction.x : GridFraction.x;
				const float GridGradientX = (i == 0) ? -1.0: 1.0;
				for(int j = 0; j < 2; ++j)
				{
					const float GridWeightY = (j == 0) ? 1.0 - GridFraction.y : GridFraction.y;
					const float GridGradientY = (j == 0) ? -1.0: 1.0;
					for(int k = 0; k < 2; ++k)
					{
						const float GridWeightZ = (k == 0) ? 1.0 - GridFraction.z : GridFraction.z;
						const float GridGradientZ = (k == 0) ? -1.0: 1.0;

						const float GridWeightXYZ = GridWeightX*GridWeightY*GridWeightZ;
						const float3 GridGradientXYZ = float3(GridGradientX*GridWeightY*GridWeightZ,
															  GridWeightX*GridGradientY*GridWeightZ,
															  GridWeightX*GridWeightY*GridGradientZ) / DIContext.GridOrigin.w;

						const int3 GridLocation = int3(GridIndex.x+i,GridIndex.y+j,GridIndex.z+k);
					
						const float LocalMass = DIHairStrands_GetGridScalar(DIContext,GridLocation,MASS_OFFSET+ComponentIndex);
						if( LocalMass != 0.0 )
						{
							const float LocalVelocity = DIHairStrands_GetGridScalar(DIContext,GridLocation,VELOCITY_OFFSET+ComponentIndex) / LocalMass;
							OutGridMass += LocalMass * GridWeightXYZ;
							OutGridVelocity[ComponentIndex] += LocalVelocity * GridWeightXYZ;
							OutGridTangent[ComponentIndex] += (DIHairStrands_GetGridScalar(DIContext,GridLocation,TANGENT_OFFSET+ComponentIndex) / LocalMass) * GridWeightXYZ;
							//OutGridTangent[ComponentIndex] += DIHairStrands_GetGridScalar(DIContext,GridLocation,TANGENT_OFFSET+ComponentIndex) * GridWeightXYZ;
							if( ComponentIndex == 0)
							{
								OutGridGradientX +=  GridGradientXYZ * LocalVelocity * GridWeightXYZ;
							}
							else if( ComponentIndex == 1)
							{
								OutGridGradientY +=  GridGradientXYZ * LocalVelocity * GridWeightXYZ;
							}
							else
							{
								OutGridGradientZ +=  GridGradientXYZ * LocalVelocity * GridWeightXYZ;
							}
						}
					}
				}
			}
		}
	}
	OutGridMass /= (3*DIContext.GridOrigin.w * DIContext.GridOrigin.w * DIContext.GridOrigin.w);
	//if(OutGridMass!=0.0)
	//{
	//	OutGridTangent = normalize(OutGridTangent);
	//}
}


// Return the velocity from the grid to the node
void DIHairStrands_ProjectCollisionGrid(in FDIHairStrandsContext DIContext, in int GridHash, out bool OutProjectStatus)
{	
	OutProjectStatus = false;
	const int GridIndexX = GridHash / ( DIContext.GridSize.y * DIContext.GridSize.z);
	const int GridDummy = GridHash - GridIndexX * DIContext.GridSize.y * DIContext.GridSize.z;
	const int GridIndexY = GridDummy / (DIContext.GridSize.z);
	const int GridIndexZ = GridDummy % (DIContext.GridSize.z);

	const bool OddStage = (ShaderStageIndex % 2)  == 0;
	const bool OddVoxel = ((GridIndexX+GridIndexY+GridIndexZ) % 2) == 0;

	if( (OddStage && OddVoxel) || (!OddStage && !OddVoxel) )
	{
		const float VoxelVolume = DIContext.GridOrigin.w * DIContext.GridOrigin.w * DIContext.GridOrigin.w;

		const int3 PrevIndex = int3(GridIndexX,GridIndexY,GridIndexZ);
		if(DIHairStrands_IsIndexValid(DIContext,PrevIndex))
		{
			OutProjectStatus = true;
			float GridDivergence = 0.0;
			float GridFraction = 0.0;
			for( int ComponentIndex = 0; ComponentIndex < 3; ++ComponentIndex)
			{
				int3 NextIndex = PrevIndex; NextIndex[ComponentIndex] += 1;

				const float PrevMass = DIHairStrands_GetGridScalar(DIContext,PrevIndex,MASS_OFFSET+ComponentIndex);
				const float PrevDensity = min(1,max(0,PrevMass / VoxelVolume));
				if( PrevMass > 0.)
				{
					GridDivergence -= DIHairStrands_GetGridScalar(DIContext,PrevIndex,VELOCITY_OFFSET+ComponentIndex) * PrevDensity / PrevMass;
					GridFraction += PrevDensity;
				}

				const float NextMass = DIHairStrands_GetGridScalar(DIContext,NextIndex,MASS_OFFSET+ComponentIndex);
				const float NextDensity = min(1,max(0,NextMass / VoxelVolume));
				if( NextMass > 0.)
				{
					GridDivergence += DIHairStrands_GetGridScalar(DIContext,NextIndex,VELOCITY_OFFSET+ComponentIndex) * NextDensity / NextMass;
					GridFraction += NextDensity;
				}
			}
			if( GridFraction > 0.)
			{
				GridDivergence *= DIContext.GridOrigin.w;
				const float GridPressure = -GridDivergence / GridFraction;

				const float PressureGradient = GridPressure / DIContext.GridOrigin.w;
				for( int ComponentIndexB = 0; ComponentIndexB < 3; ++ComponentIndexB)
				{
					int3 NextIndex = PrevIndex; NextIndex[ComponentIndexB] += 1;

					const float PrevMass = DIHairStrands_GetGridScalar(DIContext,PrevIndex,MASS_OFFSET+ComponentIndexB);
					DIHairStrands_AddNodeScalar(DIContext,PrevIndex,VELOCITY_OFFSET+ComponentIndexB,-PressureGradient*PrevMass,false);
					DIHairStrands_AddNodeScalar(DIContext,PrevIndex,TANGENT_OFFSET+ComponentIndexB,-PressureGradient*PrevMass,false);

					const float NextMass = DIHairStrands_GetGridScalar(DIContext,NextIndex,MASS_OFFSET+ComponentIndexB);
					DIHairStrands_AddNodeScalar(DIContext,NextIndex,VELOCITY_OFFSET+ComponentIndexB,PressureGradient*NextMass,false);
					DIHairStrands_AddNodeScalar(DIContext,NextIndex,TANGENT_OFFSET+ComponentIndexB,PressureGradient*NextMass,false);
				}
			}
		}	
	}
}

/* -----------------------------------------------------------------
 * Utilities regarding strands indexing
 * -----------------------------------------------------------------
 */

// Given a node index return the strand index and the local index within the strand
int DIHairStrands_GetNumNodes(in FDIHairStrandsContext DIContext)
{
	return DIContext.NumStrands * DIContext.StrandSize;
}

// Given a node index return the strand index and the local index within the strand
bool DIHairStrands_IsRootNode(in FDIHairStrandsContext DIContext, in int NodeIndex)
{
	return (NodeIndex % DIContext.StrandSize) != 0;
}

// Given a node index return the strand index and the local index within the strand
void DIHairStrands_ComputeNodeIndices(in FDIHairStrandsContext DIContext, in int NodeIndex, out int StrandIndex, out int LocalIndex)
{
	if (NodeIndex < DIHairStrands_GetNumNodes(DIContext))
	{
		StrandIndex = (DIContext.StrandSize>0) ? NodeIndex / DIContext.StrandSize : 0;
		LocalIndex = NodeIndex - StrandIndex * DIContext.StrandSize;
	}
	else
	{
		StrandIndex = 0;
		LocalIndex = 0;
	}
}

// Given a strand index return the corresponding strand length
float DIHairStrands_ComputeStrandLength(in FDIHairStrandsContext DIContext, in int StrandIndex)
{
	float StrandLength = 0.0;
	if( StrandIndex < DIContext.NumStrands )
	{
		int PointOffset = DIContext.CurvesOffsetsBuffer[StrandIndex];
		const int EdgeCount = DIContext.CurvesOffsetsBuffer[StrandIndex+1]-PointOffset-1;

		float3 PointNext = f16tof32(DIContext.RestPositionsBuffer[PointOffset++].xyz);
		float3 PointPrev = PointNext;

		for (int EdgeIndex = 0; EdgeIndex < EdgeCount; ++EdgeIndex)
		{
			PointPrev = PointNext;
			PointNext = f16tof32(DIContext.RestPositionsBuffer[PointOffset++].xyz);
			StrandLength += length(PointNext-PointPrev);
		}
	}
	return StrandLength;
}

/* -----------------------------------------------------------------
 * Node Mass/Inertia/Position/Orientation computation
 * -----------------------------------------------------------------
 */

// Compute the node mass
void DIHairStrands_ComputeNodeMass(in FDIHairStrandsContext DIContext, in int NodeIndex, out float OutNodeMass)
{
	const int ReducedSize =  DIContext.StrandSize-1;
	const float CoordScale = 1.0 / (ReducedSize-1.0);

	int StrandIndex = 0, LocalIndex = 0;
	DIHairStrands_ComputeNodeIndices(DIContext,NodeIndex,StrandIndex,LocalIndex);
	const float EdgeLength = DIHairStrands_ComputeStrandLength(DIContext,StrandIndex) * CoordScale;

	LocalIndex = max(0,LocalIndex - 1);

	const bool IsFirst = (LocalIndex == 0);
	const bool IsLast  = (LocalIndex == (ReducedSize-1));

	const float EdgeScale = (IsFirst || IsLast) ? 0.5 : 1.0;
	
	const float PrevCoord = IsFirst ? 0.0 : (LocalIndex-0.5) * CoordScale;
	const float NextCoord = IsLast  ? 1.0 : (LocalIndex+0.5) * CoordScale;

	const float PrevThick = DIContext.RootThickness * ( 1.0 - PrevCoord ) + DIContext.TipThickness * PrevCoord;
	const float NextThick = DIContext.RootThickness * ( 1.0 - NextCoord ) + DIContext.TipThickness * NextCoord;
	const float MeanRadius = 0.25 * ( PrevThick + NextThick );

	//OutNodeMass = DIContext.StrandDensity * EdgeLength * EdgeScale * M_PI * MeanRadius * MeanRadius;
	OutNodeMass = DIContext.StrandDensity * EdgeLength * EdgeScale * M_PI * (PrevThick * PrevThick + NextThick * PrevThick + NextThick * NextThick) / 12.0;
}

// Compute the node inertia
void DIHairStrands_ComputeNodeInertia(in FDIHairStrandsContext DIContext, in int NodeIndex, out float3 OutNodeInertia)
{
	const int ReducedSize =  DIContext.StrandSize-1;
	const float CoordScale = 1.0 / (ReducedSize-1.0);

	int StrandIndex = 0, LocalIndex = 0;
	DIHairStrands_ComputeNodeIndices(DIContext,NodeIndex,StrandIndex,LocalIndex);
	const float EdgeLength = DIHairStrands_ComputeStrandLength(DIContext,StrandIndex) * CoordScale;

	LocalIndex = min(max(0,LocalIndex - 1),ReducedSize-2);

	const float PrevCoord = LocalIndex * CoordScale;
	const float NextCoord = (LocalIndex+1) * CoordScale;

	const float PrevThick = DIContext.RootThickness * ( 1.0 - PrevCoord ) + DIContext.TipThickness * PrevCoord;
	const float NextThick = DIContext.RootThickness * ( 1.0 - NextCoord ) + DIContext.TipThickness * NextCoord;
	const float MeanRadius = 0.25 * ( PrevThick + NextThick );

	const float EdgeMass = DIContext.StrandDensity * EdgeLength * M_PI * (PrevThick * PrevThick + NextThick * PrevThick + NextThick * NextThick) / 12.0;
	//const float RadialInertia = EdgeMass * ( 3.0 * MeanRadius * MeanRadius + EdgeLength * EdgeLength) / 12.0;
	const float RadialInertia = EdgeMass;// * ( MeanRadius * MeanRadius) / 4.0;
	OutNodeInertia = float3( RadialInertia, RadialInertia, 2.0 * RadialInertia);//EdgeMass * MeanRadius * MeanRadius * 0.5 );

	//const float EdgeMass = DIContext.StrandDensity * EdgeLength * M_PI * MeanRadius * MeanRadius;
	//const float RadialInertia = EdgeMass * ( MeanRadius * MeanRadius) / 4.0;
	//OutNodeInertia = float3( RadialInertia, RadialInertia, 2.0 * RadialInertia );
}

// Compute the node position by linear interpolation over the points
void DIHairStrands_ComputeNodePosition(in FDIHairStrandsContext DIContext, in int NodeIndex, out float3 OutNodePosition)
{
	const int ReducedSize =  DIContext.StrandSize-1;
	const float CoordScale = 1.0 / (ReducedSize-1.0);

	int StrandIndex = 0, LocalIndex = 0;
	DIHairStrands_ComputeNodeIndices(DIContext,NodeIndex,StrandIndex,LocalIndex);

	const bool RootNode = (LocalIndex == 0);
	LocalIndex = max(0,LocalIndex - 1);

	const int PointOffset = DIContext.CurvesOffsetsBuffer[StrandIndex];

	const float NodeCoord = (float)(LocalIndex) * CoordScale;
	const float PointCount = DIContext.CurvesOffsetsBuffer[StrandIndex+1]-PointOffset-1;

	const float NodePoint = NodeCoord * PointCount;
	const int PointPrev = (LocalIndex==0) ? 0 : (LocalIndex==(ReducedSize-1)) ? PointCount-1 : floor(NodePoint);
	const int PointNext = PointPrev+1;

	if(RootNode)
	{
		const float EdgeLength = DIHairStrands_ComputeStrandLength(DIContext,StrandIndex) * CoordScale;
		float3 EdgeDirection = f16tof32(DIContext.RestPositionsBuffer[PointOffset+PointNext].xyz) - 
									 f16tof32(DIContext.RestPositionsBuffer[PointOffset+PointPrev].xyz);
		OutNodePosition = 	f16tof32(DIContext.RestPositionsBuffer[PointOffset+PointPrev].xyz) - EdgeLength * normalize(EdgeDirection);					 
	}
	else
	{
		const float NodeAlpha = NodePoint - (float)PointPrev;
		OutNodePosition =  f16tof32(DIContext.RestPositionsBuffer[PointOffset+PointPrev].xyz) * (1.0-NodeAlpha) + 
						   f16tof32(DIContext.RestPositionsBuffer[PointOffset+PointNext].xyz) * NodeAlpha;
	}
	OutNodePosition = mul(float4( OutNodePosition, 1.0), DIContext.WorldTransform).xyz;
}

// Compute the node orientation
void DIHairStrands_ComputeNodeOrientation(in FDIHairStrandsContext DIContext, in int NodeIndex, out float4 OutNodeOrientation)
{
	int StrandIndex = 0, LocalIndex = 0;
	DIHairStrands_ComputeNodeIndices(DIContext,NodeIndex,StrandIndex,LocalIndex);
	const int RootIndex = StrandIndex * DIContext.StrandSize;

	float4 NodeQuaternion = QUATERNION_IDENTITY;
	float3 TangentNext = float3(0,0,1);
	float3 TangentPrev = TangentNext;

	float3 PositionNext = float3(0.0,0.0,0.0);
	DIHairStrands_ComputeNodePosition(DIContext,RootIndex,PositionNext);
	float3 PositionPrev = PositionNext;

	for (int EdgeIndex = RootIndex, EdgeEnd = min(RootIndex+DIContext.StrandSize-1,NodeIndex+1); EdgeIndex < EdgeEnd; ++EdgeIndex)
	{
		PositionPrev = PositionNext;
		DIHairStrands_ComputeNodePosition(DIContext,EdgeIndex+1,PositionNext);

		TangentPrev = TangentNext;
		TangentNext = normalize(PositionNext - PositionPrev);
		NodeQuaternion = NormalizeQuat( MultiplyQuat( FindQuatBetweenNormals(TangentPrev,TangentNext), NodeQuaternion ) );
	}
	OutNodeOrientation = NodeQuaternion;
}

/* -----------------------------------------------------------------
 * Edge delta position and delta orientation
 * -----------------------------------------------------------------
 */

// Compute the edge length value
void DIHairStrands_ComputeEdgeLength(in FDIHairStrandsContext DIContext, in int NodeIndex, in float3 NodePosition, out float OutEdgeLength)
{
	SharedLocalPosition[GGroupThreadId.x] = NodePosition;
	GroupMemoryBarrier(); 

	int StrandIndex = 0, LocalIndex = 0;
	DIHairStrands_ComputeNodeIndices(DIContext,NodeIndex,StrandIndex,LocalIndex);

	// L = ||P1-P0||
	OutEdgeLength = (LocalIndex>0) ? length(SharedLocalPosition[GGroupThreadId.x]- SharedLocalPosition[GGroupThreadId.x-1]) : 0.0;
}

// Compute the edge darboux vector (diff between consecutive edge orientations)
void DIHairStrands_ComputeEdgeRotation(in FDIHairStrandsContext DIContext, in int NodeIndex, in float4 NodeOrientation, out float4 OutEdgeRotation)
{
	SharedLocalQuaternion[GGroupThreadId.x] = NodeOrientation;
	GroupMemoryBarrier(); 

	int StrandIndex = 0, LocalIndex = 0;
	DIHairStrands_ComputeNodeIndices(DIContext,NodeIndex,StrandIndex,LocalIndex);

	// D = Q0^-1 * Q1
	if(LocalIndex>0)
	{
		float4 q0 = SharedLocalQuaternion[GGroupThreadId.x-1];
		float4 q1 = SharedLocalQuaternion[GGroupThreadId.x];
		OutEdgeRotation = float4(
				q1.xyz * q0.w - q0.xyz * q1.w + cross(-q0.xyz, q1.xyz),
				q0.w * q1.w - dot(-q0.xyz, q1.xyz));
		float4 OmegaPlus = OutEdgeRotation + float4(0,0,0,1);
		float4 OmegaMinus = OutEdgeRotation - float4(0,0,0,1);
		if( dot(OmegaMinus,OmegaMinus) > dot(OmegaPlus,OmegaPlus) ) OutEdgeRotation = -OutEdgeRotation;
		//OutEdgeRotation = MultiplyQuat(InverseQuat(SharedLocalQuaternion[GGroupThreadId.x-1]),SharedLocalQuaternion[GGroupThreadId.x]);
	}
	else
	{
		OutEdgeRotation = QUATERNION_IDENTITY;
	}
}

/* -----------------------------------------------------------------
 * Points position update
 * -----------------------------------------------------------------
 */

// Reset the deformed points position to the rest ones
void DIHairStrands_ResetPointPosition(in FDIHairStrandsContext DIContext, in int NodeIndex, out bool ReportStatus) 
{
	int StrandIndex = 0;
	int LocalIndex = 0;
	DIHairStrands_ComputeNodeIndices(DIContext,NodeIndex,StrandIndex,LocalIndex);
	ReportStatus = false;

	if(LocalIndex == 0)
	{
		const int PointBegin = DIContext.CurvesOffsetsBuffer[StrandIndex];
		const int PointEnd = DIContext.CurvesOffsetsBuffer[StrandIndex+1]; 
		const int PointCount = PointEnd - PointBegin;

		ReportStatus = true;
		for (int PointIndex = 0; PointIndex < PointCount; ++PointIndex)
		{
			DIContext.PointsPositionsBuffer[PointBegin+PointIndex] = DIContext.RestPositionsBuffer[PointBegin+PointIndex];
		}
	}
}

// Report interpolated nodes displacements onto the points positions 
void DIHairStrands_UpdatePointPosition(in FDIHairStrandsContext DIContext, in int NodeIndex, in float3 NodeDisplace, out bool ReportStatus) 
{
	const int ReducedSize =  DIContext.StrandSize-1;
	SharedLocalPosition[GGroupThreadId.x] = NodeDisplace;
	GroupMemoryBarrier(); 

	int StrandIndex = 0, LocalIndex = 0;
	DIHairStrands_ComputeNodeIndices(DIContext,NodeIndex,StrandIndex,LocalIndex);
	LocalIndex = LocalIndex - 1;

	ReportStatus = false;

	const int PointBegin = DIContext.CurvesOffsetsBuffer[StrandIndex];
	const int PointEnd = DIContext.CurvesOffsetsBuffer[StrandIndex+1]; 
	const int PointCount = PointEnd - PointBegin;

	for (int PointIndex = 0; PointIndex < PointCount; ++PointIndex)
	{
		const float PointCoord = (float)(PointIndex) / (PointCount-1.0);
		const float PointNode = PointCoord * (ReducedSize-1.0);

		const int NodePrev = (PointIndex==0) ? 0 : (PointIndex==(PointCount-1.0)) ? ReducedSize-2 : floor(PointNode);
		const int NodeNext = NodePrev+1;

		if(NodePrev == LocalIndex)
		{
			ReportStatus = true;
			const float PointAlpha = PointNode - (float)NodePrev;
			const float3 LocalDisplace = SharedLocalPosition[GGroupThreadId.x] * (1.0-PointAlpha) + SharedLocalPosition[GGroupThreadId.x+1] * PointAlpha;
			const float3 DeformedPosition = f16tof32(DIContext.RestPositionsBuffer[PointBegin+PointIndex].xyz) + LocalDisplace;
			DIContext.PointsPositionsBuffer[PointBegin+PointIndex] = uint4( f32tof16(DeformedPosition), DIContext.RestPositionsBuffer[PointBegin+PointIndex].w);
		}
	}
}

// Get the point position
void DIHairStrands_GetPointPosition(in FDIHairStrandsContext DIContext, in int PointIndex, out float3 OutPointPosition)
{
	OutPointPosition = mul(float4( f16tof32(DIContext.PointsPositionsBuffer[PointIndex].xyz), 1.0), DIContext.WorldTransform).xyz;
}

/* -----------------------------------------------------------------
 * Nodes time integration
 * -----------------------------------------------------------------
 */

// Add external force to the linear velocity and advect node position
void DIHairStrands_AdvectNodePosition(in FDIHairStrandsContext DIContext, in float NodeMass, in float InverssMass, in float3 ExternalForce, in float DeltaTime, inout float3 OutLinearVelocity, inout float3 OutNodePosition)
{	
	OutLinearVelocity += DeltaTime * InverssMass * ExternalForce;

	OutNodePosition += OutLinearVelocity * DeltaTime;
}

// Add external torque to the angular velocity and advect node orientation
void DIHairStrands_AdvectNodeOrientation(in FDIHairStrandsContext DIContext, in float3 NodeInertia, in float3 InverseInertia, in float3 ExternalTorque, in float DeltaTime, inout float3 OutAngularVelocity, inout float4 OutNodeOrientation)
{	
	OutAngularVelocity += DeltaTime * InverseInertia * (ExternalTorque - cross(OutAngularVelocity, NodeInertia * OutAngularVelocity));

	OutNodeOrientation = OutNodeOrientation + 0.5 * DeltaTime * float4(
        OutAngularVelocity.xyz * OutNodeOrientation.w + cross(OutAngularVelocity.xyz, OutNodeOrientation.xyz),
        - dot(OutAngularVelocity.xyz, OutNodeOrientation.xyz));

	OutNodeOrientation = NormalizeQuat(OutNodeOrientation);
}

// Update the node linear velocity based on the node position difference
void DIHairStrands_UpdateLinearVelocity(in FDIHairStrandsContext DIContext, in float3 PreviousPosition, in float3 NodePosition, in float DeltaTime, inout float3 OutLinearVelocity)
{	
	OutLinearVelocity = (NodePosition-PreviousPosition) / DeltaTime;
}

// Update the node angular velocity based on the node orientation difference
void DIHairStrands_UpdateAngularVelocity(in FDIHairStrandsContext DIContext, in float4 PreviousOrientation, in float4 NodeOrientation, in float DeltaTime, inout float3 OutAngularVelocity)
{
	const float4 DeltaQuat = float4(
				NodeOrientation.xyz * PreviousOrientation.w - PreviousOrientation.xyz * NodeOrientation.w - cross(PreviousOrientation.xyz, NodeOrientation.xyz),
				PreviousOrientation.w * NodeOrientation.w + dot(PreviousOrientation.xyz, NodeOrientation.xyz));
	const float AxisLength = length( DeltaQuat.xyz );

	if (AxisLength<SMALL_NUMBER)
	{
		 OutAngularVelocity =  DeltaQuat.xyz * 2.0 / DeltaTime;
	}
	else
	{
		const float QuatAngle = 2.0 * atan2(AxisLength,DeltaQuat.w );
		OutAngularVelocity = DeltaQuat.xyz * QuatAngle / (AxisLength*DeltaTime);
	}
}

/* -----------------------------------------------------------------
 * Update node position orientation
 * -----------------------------------------------------------------
 */

// Compute rest position
void DIHairStrands_ComputeRestPosition(in FDIHairStrandsContext DIContext, in float3 NodePosition, out float3 OutRestPosition)
{	
	OutRestPosition = mul(float4( NodePosition, 1.0), DIContext.WorldInverse).xyz;
}

// Compute rest orientation
void DIHairStrands_ComputeRestOrientation(in FDIHairStrandsContext DIContext, in float4 NodeOrientation, out float4 OutRestOrientation)
{	
	OutRestOrientation = NormalizeQuat( MultiplyQuat(InverseQuat(DIContext.WorldRotation),NodeOrientation) );
}

// Update Node Position
void DIHairStrands_AttachNodePosition(in FDIHairStrandsContext DIContext, in float3 RestPosition, out float3 OutNodePosition)
{
	OutNodePosition = mul(float4( RestPosition, 1.0), DIContext.WorldTransform).xyz;
}

// Update Node Orientation
void DIHairStrands_AttachNodeOrientation(in FDIHairStrandsContext DIContext, in float4 RestOrientation, out float4 OutNodeOrientation)
{
	OutNodeOrientation = NormalizeQuat( MultiplyQuat(DIContext.WorldRotation,RestOrientation) );
}










