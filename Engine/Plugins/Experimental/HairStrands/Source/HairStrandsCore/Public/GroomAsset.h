// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.


#pragma once

#include "UObject/Object.h"
#include "UObject/ObjectMacros.h"
#include "HairDescription.h"
#include "HairStrandsDatas.h"
#include "RenderResource.h"

#include "GroomAsset.generated.h"

class UMaterialInterface;
class UNiagaraSystem;

/* Render buffers that will be used for rendering */
struct FHairStrandsResource : public FRenderResource
{
	/** Build the hair strands resource */
	FHairStrandsResource(FHairStrandsDatas* HairStrandsDatas);

	/* Init the buffer */
	virtual void InitRHI() override;

	/* Release the buffer */
	virtual void ReleaseRHI() override;

	/* Get the resource name */
	virtual FString GetFriendlyName() const override { return TEXT("FHairStrandsResource"); }

	/* Strand hair rest position buffer */
	FRWBuffer RestPositionBuffer;

	/* Strand hair (previous) position buffer */
	FRWBuffer DeformedPositionBuffer[2];

	/* Strand hair offset buffer */
	FRWBuffer TangentBuffer;

	/* Strand hair offset buffer */
	FRWBuffer AttributeBuffer;

	/* Pointer to the hair strands datas */
	FHairStrandsDatas* StrandsDatas;
};

struct FHairStrandsInterpolationResource : public FRenderResource
{
	/** Build the hair strands resource */
	FHairStrandsInterpolationResource(const FHairStrandsInterpolationDatas& InterpolationData, const FHairStrandsDatas& SimDatas);

	/* Init the buffer */
	virtual void InitRHI() override;

	/* Release the buffer */
	virtual void ReleaseRHI() override;

	/* Get the resource name */
	virtual FString GetFriendlyName() const override { return TEXT("FHairStrandsInterplationResource"); }

	FRWBuffer Interpolation0Buffer;
	FRWBuffer Interpolation1Buffer;

	/* Store interpolation data until the resource is created */
	TArray<FHairStrandsInterpolation0Format::Type> Interpolation0;
	TArray<FHairStrandsInterpolation1Format::Type> Interpolation1;

	// For debug purpose only (should be remove once all hair simulation is correctly handled)
	FRWBuffer SimRootPointIndexBuffer;
	TArray<FHairStrandsRootIndexFormat::Type> SimRootPointIndex;
};

#if RHI_RAYTRACING
struct FHairStrandsRaytracingResource : public FRenderResource
{
	/** Build the hair strands resource */
	FHairStrandsRaytracingResource(FHairStrandsDatas* HairStrandsDatas);

	/* Init the buffer */
	virtual void InitRHI() override;

	/* Release the buffer */
	virtual void ReleaseRHI() override;

	/* Get the resource name */
	virtual FString GetFriendlyName() const override { return TEXT("FHairStrandsRaytracingResource"); }

	FRWBuffer PositionBuffer;
	FRayTracingGeometry RayTracingGeometry;
	uint32 VertexCount;
};
#endif

USTRUCT(BlueprintType)
struct HAIRSTRANDSCORE_API FHairGroupRenderSettings
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, Category = "Info")
	int32 GroupID = 0;

	UPROPERTY(VisibleAnywhere, Category = "Info", meta = (DisplayName = "Curve Count"))
	int32 NumCurves = 0;

	UPROPERTY(EditAnywhere, Category="Rendering")
	UMaterialInterface* Material = nullptr;
};

USTRUCT(BlueprintType)
struct HAIRSTRANDSCORE_API FHairGroupSimulationSettings
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, Category = "Info")
	int32 GroupID = 0;

	UPROPERTY(VisibleAnywhere, Category = "Info", meta = (DisplayName = "Curve Count"))
	int32 NumCurves = 0;

	UPROPERTY(VisibleAnywhere, Category = "Info", meta = (DisplayName = "Auto-generated Guides", ToolTip = "Checked when guides were auto-generated"))
	bool bIsAutoGenerated = false;

	UPROPERTY(EditAnywhere, Category="Simulation", meta = (DisplayName = "Niagara System Asset"))
	UNiagaraSystem* Asset = nullptr;

	// Add other physics/simulation settings
};

/**
 * Implements an asset that can be used to store hair strands
 */
UCLASS(BlueprintType, hidecategories = (Object))
class HAIRSTRANDSCORE_API UGroomAsset : public UObject
{
	GENERATED_BODY()

public:

	// #ueent_todo: Hair strands data should be computed and saved in the DDC
	/** Hair strands data for rendering */
	FHairStrandsDatas HairRenderData;

	/** Guide strands data for simulation */
	FHairStrandsDatas HairSimulationData;

	UPROPERTY(EditAnywhere, EditFixedSize, BlueprintReadWrite, Category = "HairGroupSettings", meta = (DisplayName = "Rendering"))
	TArray<FHairGroupRenderSettings> RenderHairGroups;

	UPROPERTY(EditAnywhere, EditFixedSize, BlueprintReadWrite, Category = "HairGroupSettings", meta = (DisplayName = "Simulation"))
	TArray<FHairGroupSimulationSettings> SimulationHairGroups;

	//~ Begin UObject Interface.
	virtual void PostLoad() override;
	virtual void BeginDestroy() override;
	virtual void Serialize(FArchive& Ar) override;

	/** Density factor for converting hair into guide curve if no guides are provided. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "BuildSettings", meta = (ClampMin = "0.01", UIMin = "0.01", UIMax = "1.0"))
	float HairToGuideDensity = 0.1f;

#if WITH_EDITOR

	/**  Part of Uobject interface  */
	virtual void PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent) override;

#endif // WITH_EDITOR

#if WITH_EDITORONLY_DATA

	/** Asset data to be used when re-importing */
	UPROPERTY(VisibleAnywhere, Instanced, Category = ImportSettings)
	class UAssetImportData* AssetImportData;

	/** Retrievde the asset tags*/
	virtual void GetAssetRegistryTags(TArray<FAssetRegistryTag>& OutTags) const override;

	/** Part of Uobject interface */
	virtual void PostInitProperties() override;

#endif // WITH_EDITORONLY_DATA

	/** Initialize resources. */
	void InitResource();

	/** Update resources. */
	void UpdateResource();

	/** Release the hair strands resource. */
	void ReleaseResource();

	/**
	 * Initializes an instance for use with this vector field.
	 */
	void InitInstance(class FVectorFieldInstance* Instance, bool bPreviewInstance);

	void Reset();

//private : 

	TUniquePtr<FHairDescription> HairDescription;

	/** Interpolated hair render resource to be allocated */
	FHairStrandsResource* HairStrandsResource;

	/** Guide render resource to be allocated */
	FHairStrandsResource* HairSimulationResource;
};
