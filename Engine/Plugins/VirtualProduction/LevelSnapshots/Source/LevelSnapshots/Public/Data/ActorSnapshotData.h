// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "ActorSnapshotHash.h"
#include "ComponentSnapshotData.h"
#include "CustomSerializationData.h"
#include "ObjectSnapshotData.h"
#include "ActorSnapshotData.generated.h"

/** Holds saved actor data. See ActorUtil for operations. */
USTRUCT()
struct LEVELSNAPSHOTS_API FActorSnapshotData
{
	GENERATED_BODY()

	void ResetTransientData()
	{
		CachedSnapshotActor.Reset();
		bReceivedSerialisation = false;
	}
	
	/* We cache the actor to avoid recreating it all the time */
	UPROPERTY(Transient)
	mutable TWeakObjectPtr<AActor> CachedSnapshotActor = nullptr;

	/* Whether we already serialised the snapshot data into the actor.
	 * 
	 * This exists because sometimes we need to preallocate an actor without serialisation.
	 * Example: When serializing another actor which referenced this actor.
	 */
	UPROPERTY(Transient)
	bool bReceivedSerialisation = false;

	/** Stores all object dependencies. Only valid if bReceivedSerialisation == true. */
	UPROPERTY(Transient)
	TArray<int32> ObjectDependencies;


#if WITH_EDITORONLY_DATA
	/** The label of the actor when it was saved. */
	UPROPERTY()
	FString ActorLabel;
#endif
	

	/** The class the actor had when it was saved. */
	UPROPERTY()
	FSoftClassPath ActorClass;

	/** The actor's serialized data */
	UPROPERTY()
	FObjectSnapshotData SerializedActorData;
	

	
	/** Data that was generated by some ICustomObjectSnapshotSerializer. Needed to restore custom subobjects. */
	UPROPERTY()
	FCustomSerializationData CustomActorSerializationData;


	
	/** Additional component recreation info */
	UPROPERTY()
	TMap<int32, FComponentSnapshotData> ComponentData;

	/** Tracks all non-component subobjects. Valid index to FWorldSnapshotData::SerializedObjectReferences. */
	UPROPERTY()
	TArray<int32> OwnedSubobjects;

	

	/** Used to detect changes without loading actor into memory. */
	UPROPERTY()
	FActorSnapshotHash Hash;
};
