
/*=============================================================================
CompositeUIPixelShader.usf: Filter pixel shader source.
=============================================================================*/

#include "Common.ush"
#include "TonemapCommon.ush"

#define LUT_SCALING	1.05f
#define LUT_SIZE	32.f

// set this to 1 if you want to restore the legacy behaviour (ie apply ACES to the UI). A value of 0 keeps a consistent look of the UI between SDR and HDR mode
#define USE_LUT_FOR_UI 0

///////////////////////////////////////////////////////////////////////////////////////
uint OutputDevice;
uint OutputGamut;
float OutputMaxLuminance;

void GenerateLUTPS(
	FWriteToSliceGeometryOutput Input,
	out float4 OutColor : SV_Target0
	)
{
	// Construct the neutral color from a 3D position volume texture
	float2 UV = Input.Vertex.UV - float2(0.5f / LUT_SIZE, 0.5f / LUT_SIZE);
	float3 Neutral = float3(UV * LUT_SIZE / (LUT_SIZE - 1), Input.LayerIndex / (LUT_SIZE - 1));

	const float3x3 AP1_2_Output = OuputGamutMappingMatrix(OutputGamut);

	float3 LinearColor = ST2084ToLinear(Neutral);

	if( OutputDevice == TONEMAPPER_OUTPUT_ACES1000nitST2084 || OutputDevice == TONEMAPPER_OUTPUT_ACES1000nitScRGB)
	{		
		// ACES 1000nit transform with PQ/2084 encoding, user specified gamut 
		float3 ODTColor = ACESOutputTransforms1000(LinearColor, OutputMaxLuminance);
		// do not apply scRGB here because LUT is not 16F in this format, and scRGB can output negative values
		if (OutputDevice != TONEMAPPER_OUTPUT_ACES1000nitScRGB)
		{
			ODTColor = mul(AP1_2_Output, ODTColor);
		}
		OutColor.rgb = LinearToST2084(ODTColor);
	}	
	else if( OutputDevice == TONEMAPPER_OUTPUT_ACES2000nitST2084 || OutputDevice == TONEMAPPER_OUTPUT_ACES2000nitScRGB)
	{		
		// ACES 2000nit transform with PQ/2084 encoding, user specified gamut 
		float3 ODTColor = ACESOutputTransforms2000(LinearColor, OutputMaxLuminance);
		// do not apply scRGB here because LUT is not 16F in this format, and scRGB can output negative values
		// 
		if (OutputDevice != TONEMAPPER_OUTPUT_ACES2000nitScRGB)
		{
			ODTColor = mul(AP1_2_Output, ODTColor);
		}
		OutColor.rgb = LinearToST2084(ODTColor);
	}
	else
	{
		OutColor.rgb = Neutral;
	}

	OutColor.rgb = OutColor.rgb / LUT_SCALING;
	OutColor.a = 0;
}

///////////////////////////////////////////////////////////////////////////////////////
Texture2D<uint> UIWriteMaskTexture;

Texture2D UITexture;
SamplerState UISampler;

Texture2D SceneTexture;
SamplerState SceneSampler;

Texture3D ColorSpaceLUT;
SamplerState ColorSpaceLUTSampler;

float UILevel;

// Invert the encoding applied by the ApplyGammaCorrection function.
float3 LinearizeColor(float3 EncodedColor)
{
	#if MAC
		// Note, MacOSX native output is raw gamma 2.2 not sRGB!
		return pow(EncodedColor, 2.2);
	#else
		#if USE_709
			// Didn't profile yet if the branching version would be faster (different linear segment).
			return Rec709ToLinear(EncodedColor);
		#else
			return sRGBToLinear(EncodedColor);
		#endif
	#endif
}

static const float ScRGBScaleFactor = 80.0f; // used to convert between ScRGB and nits
static const float UIBrightnessInNits = 300.0f; // todo stop hardcoding this value and try to fetch SDR/HDR brightness balance instead (automatically or though calibration step)

float3 ColorLookupTable(float3 LinearColor)
{
	float3 LUTEncodedColor = LinearToST2084(LinearColor);
	float3 UVW = LUTEncodedColor * ((LUT_SIZE - 1) / LUT_SIZE) + (0.5f / LUT_SIZE);
	return ColorSpaceLUT.SampleLevel(ColorSpaceLUTSampler, UVW, 0).rgb * LUT_SCALING;
}

void HDRBackBufferConvertPS(
	FScreenVertexOutput Input,
	out float3 OutColor : SV_Target0
	)
{
	OutColor = 0;
	float3 SceneColor = Texture2DSample(SceneTexture, SceneSampler, Input.UV).xyz ;
	SceneColor = ST2084ToLinear( SceneColor ) / ScRGBScaleFactor; 
	OutColor.rgb = SceneColor;
}

// Given an input using Rec709 primaries and a sRGB tranfer function where
// 1.0 maps to paperwhitenits defined in editor. Remap to Rec2020 with PQ transfer function.
void HDREditorConvert(
	FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0
	)
{
	OutColor = 0;
	float3 SceneColor = Texture2DSample(SceneTexture, SceneSampler, Input.UV).xyz ;

	// Get color into Rec2020 space
	SceneColor = sRGBToLinear( SceneColor) ;
	SceneColor = SceneColor * UILevel ; 

	SceneColor = mul(sRGB_2_XYZ_MAT, SceneColor);
	SceneColor = mul(XYZ_2_Rec2020_MAT, SceneColor);

	// Do PQ Curve
	SceneColor = LinearToST2084( SceneColor ); 
	OutColor.rgb = SceneColor;
}

void Main(
	FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0
	)
{
#if PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK
	uint CompositeUIMask = DecodeRTWriteMask(uint2(Input.Position.xy), UIWriteMaskTexture, 1);
	BRANCH
	if (CompositeUIMask == 0)
	{
		discard;
	}
#else
	uint CompositeUIMask = UIWriteMaskTexture.Load(uint3(Input.Position.xy,0));
#endif

	// In order to get consistent blending between HDR PQ & ScRGB, we convert UI color in both cases to rec2020, perform the blending in this color space, and
	// move back to the output device space. Rec2020 is chosen over ScRGB because this is the way blending is currently being done in engine mode, and contains only positive values
	const float3x3 sRGB_2_Rec2020 = mul(XYZ_2_Rec2020_MAT, sRGB_2_XYZ_MAT);

	float4 UIColor = Texture2DSample(UITexture, UISampler, Input.UV);

#if !PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK
	BRANCH
	if (CompositeUIMask == 0 && UIColor.a < 1e-6f)
	{
		discard;
	}
#endif

	{
		UIColor.xyz = LinearizeColor(UIColor.xyz);
#if USE_LUT_FOR_UI
		UIColor.xyz = ColorLookupTable(UIColor.xyz);
		// PQ -> Linear
#if !SCRGB_ENCODING
		UIColor.xyz = ST2084ToLinear(UIColor.xyz);
#else
		UIColor.xyz = ST2084ToScRGB(UIColor.xyz, OutputDevice, OutputMaxLuminance);
		UIColor.xyz = mul(sRGB_2_Rec2020, UIColor.xyz) * UIBrightnessInNits;
#endif

#else // #if USE_LUT_FOR_UI
		UIColor.xyz = mul(sRGB_2_Rec2020, UIColor.xyz) * UIBrightnessInNits;
#endif // #if USE_LUT_FOR_UI
	}

	float3 SceneColor = Texture2DSample(SceneTexture, SceneSampler, Input.UV).xyz;
#if !SCRGB_ENCODING
    // We don't use ST2084ToLinear here because HDRBackBufferConvertPS performed the conversion before
	SceneColor.xyz = SceneColor.xyz * ScRGBScaleFactor;
#else
	SceneColor.xyz = mul(sRGB_2_Rec2020, SceneColor.xyz) * ScRGBScaleFactor;
#endif

	BRANCH
	if (UIColor.w > 0.f && UIColor.w < 1.f)
	{
		// Clamp gamut to sRGB as extended gamut colors bleeding into the UI can look funny
		SceneColor = max(SceneColor, 0.f);

		// Tonemap HDR under transparent UI with a simple Rienhard to the max luminance of the UI
		// This prevents HDR bleed through destroying UI legibility
		// Rec2020 coefficients to compute luminance
		float KR = 0.2627, KG = 0.678, KB = 0.0593;
		float Luminance = dot(SceneColor, half3(KR, KG, KB)) / UILevel;
		float OutL = 1.f / (Luminance + 1.f);

		// Ease out remapping to avoid hard transitions where UI is near zero opacity
		SceneColor *= lerp(1.f, OutL * UILevel, UIColor.w);
	}

	// Composite, assuming pre-multiplied alpha
	OutColor.xyz = SceneColor * (1.f - UIColor.w) + UIColor.xyz * UILevel;
	OutColor.w = 1.f;

#if !SCRGB_ENCODING
	// Linear -> PQ
	OutColor.xyz = LinearToST2084(OutColor.xyz);
#else
	const float3x3 Rec2020_2_sRGB = mul(XYZ_2_sRGB_MAT, Rec2020_2_XYZ_MAT);
	OutColor.xyz = mul(Rec2020_2_sRGB, OutColor.xyz / ScRGBScaleFactor);
#endif
}
#if DISPLAY_MAPPING_PS
float4x4 TextureToOutputGamutMatrix;

// Currently hard-coded to go from G2.2 to either PQ/Rec2020 or sRGB
void DisplayMappingPS(
	FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0
	)
{
	const float4 SceneColor = Texture2DSampleLevel(SceneTexture, SceneSampler, Input.UV, 0) ;
	OutColor = SceneColor;

	float3 LinearSceneColor = pow(SceneColor.rgb, 2.2);
	LinearSceneColor = mul((float3x3)TextureToOutputGamutMatrix, LinearSceneColor);
	
	if(OutputDevice == TONEMAPPER_OUTPUT_ACES1000nitST2084 || OutputDevice == TONEMAPPER_OUTPUT_ACES2000nitST2084)
	{
		OutColor.xyz = LinearToST2084(LinearSceneColor*300.f);
	}
	else
	{
		OutColor.xyz = LinearToSrgbBranchless(saturate(LinearSceneColor));
	}
}

#endif

#if BLIT_UI_TO_HDR

float4x4 SrgbToOutputMatrix;

void BlitUIToHDRPS(
	FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0
	)
{
#if PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK
	uint CompositeUIMask = DecodeRTWriteMask(uint2(Input.Position.xy), UIWriteMaskTexture, 1);
	BRANCH
	if (CompositeUIMask == 0)
	{
		discard;
	}
#endif

	float4 UIColor = Texture2DSample(UITexture, UISampler, Input.UV);

#if !PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK
	BRANCH
	if (UIColor.a < 1e-3f)
	{
		discard;
	}
#endif

	UIColor.rgb = LinearizeColor(UIColor.rgb) * UILevel * UIBrightnessInNits / ScRGBScaleFactor * UIColor.a;
	UIColor.rgb = mul((float3x3)SrgbToOutputMatrix, UIColor.rgb);

	OutColor.rgb = UIColor.rgb;
	OutColor.a = UIColor.a;
}

#endif
