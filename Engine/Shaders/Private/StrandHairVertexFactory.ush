// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	StrandHairFactory.usf
=============================================================================*/

// TODO/ISSUES
// [ ] Prev position is not correctly computed

#include "VertexFactoryCommon.ush"
#include "LocalVertexFactoryCommon.ush"

#include "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"

#if MANUAL_VERTEX_FETCH
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
#endif

// VF_STRAND_HAIR
// Define used in certain shader like DeepShadow for running specific code (coverage computation for instance) 
// when vertices are produced by the strand hair vertex factory 
// This is set by compilation enviromenent of the vertex factory

float StrandHairDensity;
float StrandHairRadius;
float StrandHairLength;
float StrandHairRadiusAtDepth1;
Buffer<float4> StrandHairPositionBuffer;
Buffer<float4> StrandHairTangentBuffer;

// ## A quad is made of the following topology and indexing:
//
//  0__2    4 
//  | /    /|
//  |/    /_|
//  1    5  3  
//
//  ## Control point identification
//  Here is an example of two consecutive strands. The control point:
//   * .a=1 starting
//   * .a=0 within
//   * .a=2 ending
//
//   _O       .a == 1  Strand 0
//  | / /|
//  |/ /_|
//   _O       .a == 0
//  | / /|
//  |/ /_|
//   _O       .a == 0
//  | / /|
//  |/ /_|
//    O       .a == 2
//     
//    
//    O       .a == 1   Strand 1
//  | / /|
//  |/ /_|
//    O       .a == 2
//
//   ...

/**
 * Per-vertex inputs from bound vertex buffers
 */
struct FVertexFactoryInput
{
#if VF_USE_PRIMITIVE_SCENE_DATA
	uint PrimitiveId : ATTRIBUTE13;
#endif	
	uint VertexId : SV_VertexID;
};

#if RAYHITGROUPSHADER
FVertexFactoryInput LoadVertexFactoryInput(uint TriangleIndex, int VertexIndex)
{
	// #hair_todo
	FTriangleBaseAttributes Triangle = LoadTriangleBaseAttributes(TriangleIndex);

	FVertexFactoryInput Input;
	Input.Position = float4(Triangle.LocalPositions[VertexIndex], 1.0f);
	Input.VertexId = Triangle.Indices[VertexIndex];
#if VF_USE_PRIMITIVE_SCENE_DATA
	Input.PrimitiveId = GetInstanceUserData();
#endif
	return Input;
}
#endif

/** 
 * Per-vertex inputs from bound vertex buffers.  Used by passes with a trimmed down position-only shader.
 */
struct FPositionOnlyVertexFactoryInput
{
#if VF_USE_PRIMITIVE_SCENE_DATA
	uint PrimitiveId : ATTRIBUTE1;
#endif
	uint VertexId : SV_VertexID;
};

/** 
 * Caches intermediates that would otherwise have to be computed multiple times.  Avoids relying on the compiler to optimize out redundant operations.
 */
struct FVertexFactoryIntermediates
{
	half3x3 TangentToLocal;
	half3x3 TangentToWorld;
	half TangentToWorldSign;
	uint PrimitiveId;
	uint   HairPrimitiveId;
	float2 HairDimensions;
	float2 HairUV;
	float  HairSeed;
	float  HairDensity;
};

uint GetPrimitiveId(FVertexFactoryInput Input)
{
#if VF_USE_PRIMITIVE_SCENE_DATA
	return Input.PrimitiveId;
#else
	return 0;
#endif
}

uint GetHairPrimitiveId(FVertexFactoryInput Input)
{
	return Input.VertexId / 6;
}

struct FControlPoint
{
	float3 Position;
	float  WorldRadius;
	float  UCoord;
	float  WorldLength;
	float  Seed;
};

FControlPoint GetVertexPosition(FVertexFactoryInput Input)
{
	const uint QuadIndex	= Input.VertexId % 6;
	const uint BaseIndex	= Input.VertexId / 6;
	const uint OffsetIndex	= QuadIndex == 0 || QuadIndex == 2 || QuadIndex == 4 ? 0 : 1;
	const float4 PackedData = StrandHairPositionBuffer[BaseIndex + OffsetIndex];
	
	FControlPoint Output = (FControlPoint)0;

	const float3 ControlPoint   = (PackedData.xyz);
	uint PackedAlpha			= asuint(PackedData.a);

	const uint ControlPointType =   PackedAlpha & 0x3;
	Output.WorldRadius			= ((PackedAlpha & 0x00FC) >> 2) / 63.f * StrandHairRadius;
	Output.UCoord				= ((PackedAlpha & 0xFF00) >> 8) / 255.f;
	Output.WorldLength			= ((PackedAlpha & 0xFF0000) >> 16) / 255.f * StrandHairLength;
	Output.Seed					= ((PackedAlpha & 0xFF000000) >> 24) / 255.f;
	
	// Create a degenerated quad the end of each strand to cut between each strands
	// #hair_todo: This is not efficient for short strand like fur for instance. Need to revisit that at some point
	const bool bIsInvalidQuad = (ControlPointType == 1 && OffsetIndex == 1) || (ControlPointType == 2 && OffsetIndex == 0);
	Output.Position = bIsInvalidQuad ? float3(1.#INF, 1.#INF, 1.#INF) : ControlPoint;

	return Output;
}

float GetWorldStrandRadius(FVertexFactoryInput Input)
{
	return GetVertexPosition(Input).WorldRadius;
}

float GetUCoord(FVertexFactoryInput Input)
{
	return GetVertexPosition(Input).UCoord;
}

float GetWorldStrandLength(FVertexFactoryInput Input)
{
	return GetVertexPosition(Input).WorldLength;
}

float GetHairSeed(FVertexFactoryInput Input)
{
	return GetVertexPosition(Input).Seed;
}

/** Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs. */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

	half3 TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	half4 TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	// Required for previewing materials that use ParticleColor
	Result.Particle.Color = half4(1,1,1,1);

	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Result.WorldVertexNormal_Center = Interpolants.TangentToWorld2_Center.xyz;
#endif

	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);
	Result.HairPrimitiveId = Interpolants.HairPrimitiveId;
	Result.HairDimensions = Interpolants.HairDimensions;
	Result.HairUV = Interpolants.HairUV;
	Result.HairSeed = Interpolants.HairSeed;

#if COMPILER_SUPPORTS_TO_SCALAR_MEMORY
	Result.PrimitiveId = ToScalarMemory(Result.PrimitiveId);
#endif

	return Result;
}

half3x3 CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates, half3x3 TangentToLocal)
{
	half3x3 LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	half3 InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld); 
}

/** Converts from vertex factory specific input to a FMaterialVertexParameters, which is used by vertex shader material inputs. */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, half3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;

	// does not handle instancing!
	Result.TangentToWorld = Intermediates.TangentToWorld;
	
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;

	Result.PreSkinnedPosition = GetVertexPosition(Input).Position;
	Result.PreSkinnedNormal = TangentToLocal[2];
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}

float4 CalcWorldPosition(float3 Position, uint PrimitiveId)
{
	return TransformLocalToTranslatedWorld(Position, PrimitiveId);
}

half3x3 CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	const uint QuadIndex = Input.VertexId % 6;
	const uint BaseIndex = Input.VertexId / 6;
	const uint OffsetIndex = QuadIndex == 0 || QuadIndex == 2 || QuadIndex == 4 ? 0 : 1;
	const half3 TangentInputX = StrandHairTangentBuffer[(BaseIndex + OffsetIndex) * 2 + 0].xyz;
	const half4 TangentInputZ = StrandHairTangentBuffer[(BaseIndex + OffsetIndex) * 2 + 1];

	half3 TangentX = TangentBias(TangentInputX);
	half4 TangentZ = TangentBias(TangentInputZ);
	TangentSign = TangentZ.w;
	
	// derive the binormal by getting the cross product of the normal and tangent
	half3 TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;
	
	// Recalculate TangentX off of the other two vectors
	// This corrects quantization error since TangentX was passed in as a quantized vertex input
	// The error shows up most in specular off of a mesh with a smoothed UV seam (normal is smooth, but tangents vary across the seam)
	half3x3 Result;
	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

half3x3 CalcTangentToWorld(FVertexFactoryIntermediates Intermediates, half3x3 TangentToLocal)
{
	half3x3 TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);
	return TangentToWorld;
}

float3 GetTangent(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;
	Intermediates.PrimitiveId = GetPrimitiveId(Input);
	
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;

	// Hair shader expec the tangent to be stored in place of the normal. This is what the StrandHairComponent is filling in:
	// [0]: Real normal		| Should be Tangent
	// [1]: Bitangent		| Should be BiTangent
	// [2]: Real Tangent	| Should be Normal
	return Intermediates.TangentToWorld[2].xyz;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;
	Intermediates.PrimitiveId = GetPrimitiveId(Input);
	Intermediates.HairPrimitiveId = GetHairPrimitiveId(Input);
	Intermediates.HairDimensions = float2(GetWorldStrandLength(Input), GetWorldStrandRadius(Input));
	Intermediates.HairUV = float2(GetUCoord(Input), 0.5f);
	Intermediates.HairDensity = StrandHairDensity;
	Intermediates.HairSeed = GetHairSeed(Input);

	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;	
	return Intermediates;
}

/**
* Get the 3x3 tangent basis vectors for this vertex factory
* this vertex factory will calculate the binormal on-the-fly
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
half3x3 VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}

float4 ComputeViewAlignedWorldPosition(FVertexFactoryInput Input, float3 WorldTangent, float4 WorldPosition, float WorldStrandRadius)
{
	const uint LocalVertexId = Input.VertexId % 6;
	const bool bIsLeft = LocalVertexId == 0 || LocalVertexId == 1 || LocalVertexId == 5;
	
	// #hair_todo
	// Use either the min strand radius computated within the strand factory, or a custom one, provided 
	// (in a hacky way) throught the View variables. This is used by the DeepShadow pass, which inject 
	// its data this way.
	const bool  bUseCustomStrandRadius = ResolvedView.TranslatedWorldCameraOrigin.x == 1337.f;
	const bool  bIsOrtho			   = bUseCustomStrandRadius && ResolvedView.TranslatedWorldCameraOrigin.y > 0;
	const float CustomMinStrandRadius  = ResolvedView.TranslatedWorldCameraOrigin.z;
	const float DistanceToCamera	   = length(ResolvedView.TranslatedWorldCameraOrigin - WorldPosition.xyz);

	// Minimal radius to snap the strand to a sample/pixel center (to avoid aliasing)
	const float StrandRadiusAtDepth1 = bUseCustomStrandRadius ? CustomMinStrandRadius : StrandHairRadiusAtDepth1;
	const float MinStrandHairRadius  = bIsOrtho ? StrandRadiusAtDepth1 : (DistanceToCamera * StrandRadiusAtDepth1);
	const float3 ViewDir = -ResolvedView.ViewForward;
	const float3 Right = normalize(cross(WorldTangent, ViewDir));
	const float3 OutWorldPosition = WorldPosition.xyz + (bIsLeft ? -Right : Right) * max(WorldStrandRadius, MinStrandHairRadius);
	
	return float4(OutWorldPosition, 1);
}

// @return translated world position
float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	FControlPoint ControlPoint = GetVertexPosition(Input);
	const float3 VertexPosition = ControlPoint.Position;
	const float4 WorldPosition = CalcWorldPosition(VertexPosition, Intermediates.PrimitiveId);

	// Hair shader expect the WorldNormal to be the tangent vector
	const float3 WorldTangent = GetTangent(Input);
	return ComputeViewAlignedWorldPosition(Input, WorldTangent, WorldPosition, ControlPoint.WorldRadius);
}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

	// Initialize the whole struct to 0
	// Really only the last two components of the packed UVs have the opportunity to be uninitialized
	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;

	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);

#if INSTANCED_STEREO
	Interpolants.EyeIndex = 0;
#endif
	
	Interpolants.HairPrimitiveId = GetHairPrimitiveId(Input);
	Interpolants.HairDimensions = float2(GetWorldStrandLength(Input), GetWorldStrandRadius(Input));
	Interpolants.HairUV = float2(GetUCoord(Input), 0.5f);
	Interpolants.HairSeed = GetHairSeed(Input);
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}

/** for depth-only pass */
float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	const FControlPoint ControlPoint = GetVertexPosition(Input);
	const float3 Position = ControlPoint.Position;
	const uint PrimitiveId = GetPrimitiveId(Input);

	const float4 WorldPosition = CalcWorldPosition(Position, PrimitiveId);
    const float3 WorldTangent = GetTangent(Input);
	return ComputeViewAlignedWorldPosition(Input, WorldTangent, WorldPosition, ControlPoint.WorldRadius);
}

// @return previous translated world position
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;

	const float3 VertexPosition = GetVertexPosition(Input).Position;
	return mul(float4(VertexPosition,1), PreviousLocalToWorldTranslated);
}

float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
