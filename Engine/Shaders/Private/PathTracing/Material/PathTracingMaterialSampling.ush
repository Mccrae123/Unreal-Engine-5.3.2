// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingMaterialSampling.usf: Material sampling functions
===============================================================================================*/

#pragma once

#include "PathTracingMaterialCommon.ush"
#include "PathTracingFresnel.ush"
#include "PathTracingLambert.ush"
#include "PathTracingRadianceProbe.ush"
#include "PathTracingGlossy.ush"
#include "PathTracingSpecularReflection.ush"
#include "PathTracingSpecularTransmission.ush"
#include "PathTracingDefaultLit.ush"
#include "PathTracingClearCoat.ush"
#include "PathTracingTwoSidedFoliage.ush"

#ifndef FORCE_ALL_MATERIALS_DIFFUSE
	#define FORCE_ALL_MATERIALS_DIFFUSE 0
#endif

bool IsNeeValidMaterial(FMaterialClosestHitPayload Payload)
{
	// Checks done in the same order as other sampling and evaluation functions to ensure consistency
	
#if FORCE_ALL_MATERIALS_DIFFUSE
	return true;
#else
	if (IsPureSpecularTransmission(Payload))
	{
		return false;
	}
	else if (IsDefaultLitMaterial(Payload))
	{
		return true;
	}
	else if (IsClearCoatMaterial(Payload))
	{
		return true;
	}
	else if (IsTwoSidedFoliageMaterial(Payload))
	{
		return true;
	}
	else if (IsUnlitMaterial(Payload))
	{
		return false;
	}
	return true;
#endif
}

void SampleMaterial(
	float3 RayDirection,
	FMaterialClosestHitPayload Payload,
	float4 RandSample,
	bool bForceRadianceProbe,
	out float3 OutDirection,
	out float3 OutWeight,
	out float OutPdf,
	out float OutPositionBiasSign)
{
	OutPositionBiasSign = 1;
	
	if (bForceRadianceProbe)
	{
		RadianceProbe_SampleMaterial(Payload, RandSample, OutDirection, OutWeight, OutPdf);
		return;
	}
	
#if FORCE_ALL_MATERIALS_DIFFUSE
	{
		Lambert_SampleMaterial(Payload, RandSample, OutDirection, OutWeight, OutPdf);
	}
#else	
	if (IsPureSpecularTransmission(Payload))
	{
		SpecularRefraction_SampleMaterial(RayDirection, Payload, RandSample, OutDirection, OutWeight, OutPdf, OutPositionBiasSign);
	}
	else if (IsDefaultLitMaterial(Payload))
	{
		DefaultLit_SampleMaterial(RayDirection, Payload, RandSample, OutDirection, OutWeight, OutPdf);
	}
	else if (IsClearCoatMaterial(Payload))
	{
		ClearCoat_SampleMaterial(RayDirection, Payload, RandSample, OutDirection, OutWeight, OutPdf);
	}
	else if (IsTwoSidedFoliageMaterial(Payload))
	{
		TwoSidedFoliage_SampleMaterial(RayDirection, Payload, RandSample, OutDirection, OutWeight, OutPdf, OutPositionBiasSign);
	}
	else if (IsUnlitMaterial(Payload))
	{
		// Nothing to do, material does not scatter light
		OutDirection = 0;
		OutWeight = 0;
		OutPdf = 0;
	}
	else
	{
		Lambert_SampleMaterial(Payload, RandSample, OutDirection, OutWeight, OutPdf);
	}
#endif

}

void EvalMaterial(
	float3 IncomingDirection,
	float3 OutgoingDirection,
	FMaterialClosestHitPayload Payload,
	bool bForceRadianceProbe,
	out float3 OutWeight,
	out float OutPdf
)
{
	if (bForceRadianceProbe)
	{
		RadianceProbe_EvalMaterial(OutgoingDirection, Payload, OutWeight, OutPdf);
		return;
	}
	
#if FORCE_ALL_MATERIALS_DIFFUSE
	{
		Lambert_EvalMaterial(OutgoingDirection, Payload, OutWeight, OutPdf);
	}
#else
	if (IsPureSpecularTransmission(Payload))
	{
		SpecularTransmission_EvalMaterial(OutWeight, OutPdf);
	}
	else if (IsDefaultLitMaterial(Payload))
	{
		DefaultLit_EvalMaterial(IncomingDirection, OutgoingDirection, Payload, OutWeight, OutPdf);
	}
	else if (IsClearCoatMaterial(Payload))
	{
		ClearCoat_EvalMaterial(IncomingDirection, OutgoingDirection, Payload, OutWeight, OutPdf);
	}
	else if (IsTwoSidedFoliageMaterial(Payload))
	{
		TwoSidedFoliage_EvalMaterial(IncomingDirection, OutgoingDirection, Payload, OutWeight, OutPdf);
	}
	else if (IsUnlitMaterial(Payload))
	{
		OutWeight = 0.0;
		OutPdf = 0.0;
	}
	else
	{
		Lambert_EvalMaterial(OutgoingDirection, Payload, OutWeight, OutPdf);
	}
#endif
}


void PdfMaterial(
	float3 IncomingDirection,
	float3 OutgoingDirection,
	FMaterialClosestHitPayload Payload,
	bool bForceRadianceProbe,
	out float OutPdf
)
{
	// NOTE: rely on compiler to optimize unused calculations
	float3 Weight = 0;
	EvalMaterial(IncomingDirection, OutgoingDirection, Payload, bForceRadianceProbe, Weight, OutPdf);
}
