// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
	PathTracingDefaultLit.usf: Path tracing BRDF model for default lit material
===============================================================================================*/

#pragma once

#include "PathTracingFresnel.ush"

float CalcLobeSelectionPdf(float3 V, FMaterialClosestHitPayload Payload)
{
	// TODO: This could be improved if we had a directional albedo tabulation, but this formulation will at least prevent
	// under-sampling when one lobe is black (like with metals)

	float3 Diff = GetDiffuseColor(Payload);
	float3 Spec = GetSpecularColor(Payload);

	return LobeSelectionProb(Diff, Spec);
}

void DefaultLit_EvalMaterial(
	float3 IncomingDirection,
	float3 OutgoingDirection,
	FMaterialClosestHitPayload Payload,
	out float3 OutWeight,
	out float OutPdf
)
{
	OutWeight = 0;
	OutPdf = 0;

	const float3 V_World = -IncomingDirection;
	const float3 L_World = OutgoingDirection;
	const float3 N_World = GetWorldNormal(Payload);

	float2 Alpha = 0;
	const float3x3 Basis = GetGGXBasis(Payload.Roughness, Payload.Anisotropy, Payload.WorldNormal, Payload.WorldTangent, Alpha);

	// move vectors into right shading frame
	const float3 V = mul(Basis, V_World);
	const float3 L = mul(Basis, L_World);
	const float3 H = normalize(V + L);

	const float NoL = saturate(L.z);
	const float VoH = saturate(dot(V, H));

	// Probability of picking diffuse lobe vs. specular lobe
	const float LobeSelectionPdf = CalcLobeSelectionPdf(V_World, Payload);

	// Diffuse Lobe
	AddLobeWithMIS(OutWeight, OutPdf, GetDiffuseColor(Payload), NoL / PI, LobeSelectionPdf);

	// Specular lobe
	const float2 GGXResult = GGXEvalReflection(L, V, H, Alpha);
	const float3 F = F_Schlick(GetSpecularColor(Payload), VoH);
	const float3 SpecWeight = F * GGXResult.x;
	const float SpecPdf = GGXResult.y;

	AddLobeWithMIS(OutWeight, OutPdf, SpecWeight, SpecPdf, 1.0 - LobeSelectionPdf);
}

void DefaultLit_SampleMaterial(
	float3 RayDirection,
	FMaterialClosestHitPayload Payload,
	float4 RandSample,
	out float3 OutDirection,
	out float3 OutWeight,
	out float OutPdf
)
{
	OutDirection = 0;
	OutWeight = 0;
	OutPdf = 0;

	float3 N = GetWorldNormal(Payload);
	float3 V = -RayDirection;
	
	float LobeSelectionPdf = CalcLobeSelectionPdf(V, Payload);

	float2 Alpha;
	float3x3 Basis = GetGGXBasis(Payload.Roughness, Payload.Anisotropy, Payload.WorldNormal, Payload.WorldTangent, Alpha);

	V = mul(Basis, V);
	
	// Randomly choose to sample diffuse or specular
	float3 L = 0, H = 0;
	if (RandSample.x < LobeSelectionPdf)
	{
		RandSample.x /= LobeSelectionPdf;

		// Lambert
#if 1
		float4 Result = CosineSampleHemisphere(RandSample.xy);
#else
		float4 Result = CosineSampleHemisphereConcentric(RandSample.xy);
#endif

		L = Result.xyz;
		H = normalize(L + V);
	}
	else
	{
		RandSample.x -= LobeSelectionPdf;
		RandSample.x /= (1.0 - LobeSelectionPdf);


		// #dxr_todo: Evaluate UniformSampleDiskConcentric
		H = ImportanceSampleVisibleGGX_aniso(UniformSampleDisk(RandSample.xy), Alpha, V).xyz;

		L = reflect(-V, H);
		if (L.z <= 0) {
			// invalid output direction, exit early
			return;
		}
	}

	// With a valid direction in hand -- now evaluate the BxDF (taking advantage of already computed terms)

	const float NoL = saturate(L.z);
	const float VoH = saturate(dot(V, H));

	// Diffuse Lobe
	AddLobeWithMIS(OutWeight, OutPdf, GetDiffuseColor(Payload), NoL / PI, LobeSelectionPdf);

	// Specular lobe
	const float2 GGXResult = GGXEvalReflection(L, V, H, Alpha);
	const float3 F = F_Schlick(GetSpecularColor(Payload), VoH);
	const float3 SpecWeight = F * GGXResult.x;
	const float SpecPdf = GGXResult.y;
	AddLobeWithMIS(OutWeight, OutPdf, SpecWeight, SpecPdf, 1.0 - LobeSelectionPdf);

	// transform to world space
	OutDirection = normalize(mul(L, Basis));
}
