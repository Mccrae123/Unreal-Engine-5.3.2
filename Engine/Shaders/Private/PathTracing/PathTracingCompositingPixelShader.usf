// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
ReferencePathTracinPixelShader.ush: Reference path tracing  compositing pixel shader for progressive update.
===============================================================================================*/

#include "../Common.ush"
#include "Utilities/PathTracingFixedPointArithmetic.ush"

uint Iteration;
Texture2D<float4> RadianceTexture;


float TonemapGammaAndHDR(float Value)
{
	if (Value > 1.0)
	{
		Value = 1.0 + 2.0 * log(Value);
	}
	else
	{
		Value = pow(Value, 2.0);
	}
	return Value;
}

float NoTonemap(float Value)
{
	return Value;
}

float Tonemap(float Value)
{
	return TonemapGammaAndHDR(Value);
}

void CompositeMain(
	in noperspective float2 UV : TEXCOORD0,
	out float4 OutColor : SV_Target0
)
{
	float2 BufferSize = View.BufferSizeAndInvSize.xy;
	int3 TexCoord = int3(UV * BufferSize, 0);

	float4 Radiance = RadianceTexture.Load(TexCoord);

	OutColor = float4(Radiance.rgb * View.PreExposure, 1.0);

#if 0
    // split-screen debugging aids
	if (UV.x < 0.5)
	{
		uint NumSamples = Iteration + 1;
		float OutVariance = Radiance.a;
		float Lum = Luminance(Radiance.rgb); // mean
		float StdErr = NumSamples > 0 ? sqrt(OutVariance / NumSamples) : 0; // stderr
		//OutColor = Tonemap(Lum + 3 * StdErr) - Tonemap(max(Lum - 3 * StdErr, 0.0)); // error estimator
		OutColor = StdErr * View.PreExposure;
		//OutColor = StdErr / (Lum + 0.0001) * View.PreExposure;
	}
#endif
}
