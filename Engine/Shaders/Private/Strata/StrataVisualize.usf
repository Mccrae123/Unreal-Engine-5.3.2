// Copyright Epic Games, Inc. All Rights Reserved.

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/DeferredShadingCommon.ush"

#include "/Engine/Private/Strata/Strata.ush"

#include "/Engine/Private/MiniFontCommon.ush"


// On some platforms, UnpackStrataIn causes the following error@
// (error, code:7203) - not enough registers available for the entire program. In order to permit spilling to memory please either disable this error via '#pragma warning (disable:7203)' or reduce it to a warning via '#pragma warning (default:7203)'
// To fix this and increase occupancy, we will have to progressively unpack the BSDFs on the fly (and thus only have a single BSDF allocating registers)
#pragma warning (disable:7203)


void VisualizeMaterialPS(
	float4 SVPos : SV_POSITION,
	out float4 OutColor : SV_Target0)
{
	const uint2 PixelPos = uint2(SVPos.xy);
	const uint2 MaterialPos = View.CursorPosition;
	const int  InspectSquare = 10;

	// Sample scene textures.
	float2 BufferUV = SvPositionToBufferUV(SVPos);
	FGBufferData GBuffer = GetGBufferDataFromSceneTextures(BufferUV);
	bool bStrataMaterial = GBuffer.ShadingModelID == SHADINGMODELID_STRATA;

#if 0
	OutColor = 0;
	if (bStrataMaterial)
	{
		uint PixelStrataDataByteOffset = GetStrataPixelDataByteOffset(PixelPos, View.BufferSizeAndInvSize.x, Strata.MaxBytesPerPixel);
		FStrataPixelBSDFs PixelBSDFs = UnpackStrataIn(Strata.MaterialLobesBuffer, PixelStrataDataByteOffset);
		OutColor.w = 0.05f;
		if (PixelBSDFs.BSDFCount == 1)
		{
			OutColor = float4(0, 0, 1, 0);
		}
		else if (PixelBSDFs.BSDFCount == 2)
		{
			OutColor = float4(0, 1, 0, 0);
		}
		else if (PixelBSDFs.BSDFCount == 3)
		{
			OutColor = float4(1, 1, 0, 0);
		}
		else if (PixelBSDFs.BSDFCount == 4)
		{
			OutColor = float4(1, 0, 0, 0);
		}
		else if (PixelBSDFs.BSDFCount > 4)
		{
			OutColor = float4(1, 1, 1, 0);
		}
	}
	return;
#endif

	OutColor = float4(0.0f, 0.0f, 0.0f, 1.0f);

	if (all(float2(PixelPos) > float2(MaterialPos + InspectSquare)))
	{
		OutColor.w = 0.0f;				// Set background visiblity to 0 in the bottom right part of the screen to better reads the debug values
	}

	if (bStrataMaterial)
	{
		uint PixelStrataDataByteOffset = GetStrataPixelDataByteOffset(MaterialPos, View.BufferSizeAndInvSize.x, Strata.MaxBytesPerPixel);
		FStrataPixelBSDFs PixelBSDFs = UnpackStrataIn(Strata.MaterialLobesBuffer, PixelStrataDataByteOffset);

		float3 BSDFFontColor = float3(0.25, 1.0, 0.25);
		float3 INFOFontColor = float3(1.0, 0.5, 0.25);
		float3 PARAMFontColor = float3(0.8, 0.8, 0.8);
		float3 FontColor = float3(0.25, 1.0, 1.0);
		int2 TopLeftInit = MaterialPos + InspectSquare + int2(3,3);
		int2 TopLeft = TopLeftInit;

#define PRINTPARAMCHAR(X) PrintCharacter(PixelPos, OutColor.xyz, PARAMFontColor, TopLeft, X);
#define PRINTINFOCHAR(X) PrintCharacter(PixelPos, OutColor.xyz, INFOFontColor, TopLeft, X);
#define PRINTBSDFCHAR(X) PrintCharacter(PixelPos, OutColor.xyz, BSDFFontColor, TopLeft, X);

#define PRINTBSDFWEIGHT()	PRINTBSDFCHAR(_SPC_); PRINTBSDFCHAR(_MINUS_); PRINTBSDFCHAR(_SPC_); PrintFloat(PixelPos, OutColor.xyz, FontColor, TopLeft, BSDF.Weight.x); TopLeft.x+=8*7; PRINTBSDFCHAR(_SPC_); PrintFloat(PixelPos, OutColor.xyz, FontColor, TopLeft, BSDF.Weight.y); TopLeft.x+=8*7; PRINTBSDFCHAR(_SPC_); PrintFloat(PixelPos, OutColor.xyz, FontColor, TopLeft, BSDF.Weight.z);
#define PRINTBSDFCOUNT()	PRINTBSDFCHAR(min(_0_+PixelBSDFs.BSDFCount,_F_)); PRINTBSDFCHAR(_SPC_); PRINTBSDFCHAR(_B_); PRINTBSDFCHAR(_S_); PRINTBSDFCHAR(_D_); PRINTBSDFCHAR(_F_);
#define PRINTFLOAT3(X) PrintFloat(PixelPos, OutColor.xyz, PARAMFontColor, TopLeft, X.x); TopLeft.x+=8*7; PRINTBSDFCHAR(_SPC_); PrintFloat(PixelPos, OutColor.xyz, PARAMFontColor, TopLeft, X.y); TopLeft.x+=8*7; PRINTBSDFCHAR(_SPC_); PrintFloat(PixelPos, OutColor.xyz, PARAMFontColor, TopLeft, X.z);
#define PRINTFLOAT1(Value) PrintFloat(PixelPos, OutColor.xyz, PARAMFontColor, TopLeft, Value); TopLeft.x+=8*7;
#define SIGNOFFLOAT1(Value) if(Value < 0.0f) { PrintCharacter(PixelPos, OutColor.xyz, PARAMFontColor, TopLeft, _MINUS_); } /*else { PrintCharacter(PixelPos, OutColor.xyz, PARAMFontColor, TopLeft, _SPC_);}*/

#define NEXTLINE  TopLeft.y += 8; TopLeft.x = TopLeftInit.x;
#define HORIZONTALSEPARATION  TopLeft.y += 4;
#define HORIZONTALTAB  TopLeft.x += 8;

		PRINTINFOCHAR(_T_); PRINTINFOCHAR(_O_); PRINTINFOCHAR(_P_);
		NEXTLINE;
		HORIZONTALSEPARATION;
		PRINTBSDFCOUNT();
		NEXTLINE;
		HORIZONTALSEPARATION;

		for (int i = 0; i < PixelBSDFs.BSDFCount; ++i)
		{
			FStrataBSDF BSDF = PixelBSDFs.BSDFs[i];

			TopLeft.x = TopLeftInit.x;

			switch (BSDF.BSDFType)
			{
			case STRATA_BSDF_TYPE_DIFFUSE_ON:
				PRINTBSDFCHAR(_D_); PRINTBSDFCHAR(_I_); PRINTBSDFCHAR(_F_); PRINTBSDFCHAR(_F_); PRINTBSDFCHAR(_O_); PRINTBSDFCHAR(_N_);
				PRINTBSDFCHAR(_SPC_); PRINTBSDFCHAR(_SPC_); PRINTBSDFCHAR(_SPC_); PRINTBSDFCHAR(_SPC_); PRINTBSDFCHAR(_SPC_); PRINTBSDFCHAR(_SPC_);
				PRINTBSDFWEIGHT();
				NEXTLINE;

				HORIZONTALTAB; PRINTPARAMCHAR(_A_); PRINTPARAMCHAR(_L_); PRINTPARAMCHAR(_B_); PRINTPARAMCHAR(_E_); PRINTPARAMCHAR(_D_); PRINTPARAMCHAR(_O_);
				HORIZONTALTAB; PRINTFLOAT3(DIFFUSE_ALBEDO(BSDF));
				NEXTLINE;
				HORIZONTALTAB; PRINTPARAMCHAR(_R_); PRINTPARAMCHAR(_O_); PRINTPARAMCHAR(_U_); PRINTPARAMCHAR(_G_); PRINTPARAMCHAR(_H_); PRINTPARAMCHAR(_SPC_);
				HORIZONTALTAB; PRINTFLOAT1(DIFFUSE_ROUGHNESS(BSDF));
				NEXTLINE;

				break;

			case STRATA_BSDF_TYPE_DIFFUSE_CHAN:
				PRINTBSDFCHAR(_D_); PRINTBSDFCHAR(_I_); PRINTBSDFCHAR(_F_); PRINTBSDFCHAR(_F_);
				PRINTBSDFCHAR(_C_); PRINTBSDFCHAR(_H_); PRINTBSDFCHAR(_A_); PRINTBSDFCHAR(_N_);
				PRINTBSDFWEIGHT();
				NEXTLINE;

				HORIZONTALTAB; PRINTPARAMCHAR(_A_); PRINTPARAMCHAR(_L_); PRINTPARAMCHAR(_B_); PRINTPARAMCHAR(_E_); PRINTPARAMCHAR(_D_); PRINTPARAMCHAR(_O_); 
				HORIZONTALTAB; PRINTFLOAT3(DIFFUSE_ALBEDO(BSDF));
				NEXTLINE;
				HORIZONTALTAB; PRINTPARAMCHAR(_R_); PRINTPARAMCHAR(_O_); PRINTPARAMCHAR(_U_); PRINTPARAMCHAR(_G_); PRINTPARAMCHAR(_H_); PRINTPARAMCHAR(_SPC_);
				HORIZONTALTAB; PRINTFLOAT1(DIFFUSE_ROUGHNESS(BSDF));
				NEXTLINE;

				break;

			case STRATA_BSDF_TYPE_DIELECTRIC:
				PRINTBSDFCHAR(_D_); PRINTBSDFCHAR(_I_); PRINTBSDFCHAR(_E_); PRINTBSDFCHAR(_L_); PRINTBSDFCHAR(_E_);
				PRINTBSDFCHAR(_C_); PRINTBSDFCHAR(_T_); PRINTBSDFCHAR(_R_); PRINTBSDFCHAR(_I_); PRINTBSDFCHAR(_C_);
				PRINTBSDFWEIGHT();
				NEXTLINE;

				HORIZONTALTAB; PRINTPARAMCHAR(_I_); PRINTPARAMCHAR(_O_); PRINTPARAMCHAR(_R_); PRINTPARAMCHAR(_SPC_); PRINTPARAMCHAR(_SPC_); PRINTPARAMCHAR(_SPC_);
				HORIZONTALTAB; PRINTFLOAT1(DIELECTRIC_IOR(BSDF));
				NEXTLINE;
				HORIZONTALTAB; PRINTPARAMCHAR(_T_); PRINTPARAMCHAR(_I_); PRINTPARAMCHAR(_N_); PRINTPARAMCHAR(_T_); PRINTPARAMCHAR(_SPC_); PRINTPARAMCHAR(_SPC_);
				HORIZONTALTAB; PRINTFLOAT3(DIELECTRIC_TINT(BSDF));
				NEXTLINE;
				HORIZONTALTAB; PRINTPARAMCHAR(_R_); PRINTPARAMCHAR(_O_); PRINTPARAMCHAR(_U_); PRINTPARAMCHAR(_G_); PRINTPARAMCHAR(_H_); PRINTPARAMCHAR(_SPC_);
				HORIZONTALTAB; PRINTFLOAT1(DIELECTRIC_ROUGHNESS0(BSDF));
				NEXTLINE;

				break;

			case STRATA_BSDF_TYPE_CONDUCTOR:
				PRINTBSDFCHAR(_C_); PRINTBSDFCHAR(_O_); PRINTBSDFCHAR(_N_); PRINTBSDFCHAR(_D_); PRINTBSDFCHAR(_U_);
				PRINTBSDFCHAR(_C_); PRINTBSDFCHAR(_T_); PRINTBSDFCHAR(_O_); PRINTBSDFCHAR(_R_); PRINTBSDFCHAR(_SPC_);
				PRINTBSDFWEIGHT();
				NEXTLINE;

				HORIZONTALTAB; PRINTPARAMCHAR(_R_); PRINTPARAMCHAR(_E_); PRINTPARAMCHAR(_F_); PRINTPARAMCHAR(_L_); PRINTPARAMCHAR(_E_); PRINTPARAMCHAR(_C_);
				HORIZONTALTAB; PRINTFLOAT3(CONDUCTOR_REFLECTIVITY(BSDF));
				NEXTLINE;
				HORIZONTALTAB; PRINTPARAMCHAR(_E_); PRINTPARAMCHAR(_D_); PRINTPARAMCHAR(_G_); PRINTPARAMCHAR(_E_); PRINTPARAMCHAR(_C_); PRINTPARAMCHAR(_SPC_);
				HORIZONTALTAB; PRINTFLOAT3(CONDUCTOR_EDGECOLOR(BSDF));
				NEXTLINE;
				HORIZONTALTAB; PRINTPARAMCHAR(_R_); PRINTPARAMCHAR(_O_); PRINTPARAMCHAR(_U_); PRINTPARAMCHAR(_G_); PRINTPARAMCHAR(_H_); PRINTPARAMCHAR(_SPC_);
				HORIZONTALTAB; PRINTFLOAT1(CONDUCTOR_ROUGHNESS0(BSDF));
				NEXTLINE;

				break;

			case STRATA_BSDF_TYPE_VOLUME:
				PRINTBSDFCHAR(_V_); PRINTBSDFCHAR(_O_); PRINTBSDFCHAR(_L_); PRINTBSDFCHAR(_U_); PRINTBSDFCHAR(_M_); 
				PRINTBSDFCHAR(_E_); PRINTBSDFCHAR(_SPC_); PRINTBSDFCHAR(_SPC_); PRINTBSDFCHAR(_SPC_); PRINTBSDFCHAR(_SPC_);
				PRINTBSDFWEIGHT();
				NEXTLINE;
				
				HORIZONTALTAB; PRINTPARAMCHAR(_A_); PRINTPARAMCHAR(_L_); PRINTPARAMCHAR(_B_); PRINTPARAMCHAR(_E_); PRINTPARAMCHAR(_D_); PRINTPARAMCHAR(_O_); 
				HORIZONTALTAB; PRINTFLOAT3(VOLUME_ALBEDO(BSDF));
				NEXTLINE;
				HORIZONTALTAB; PRINTPARAMCHAR(_E_); PRINTPARAMCHAR(_X_); PRINTPARAMCHAR(_T_); PRINTPARAMCHAR(_I_); PRINTPARAMCHAR(_N_); PRINTPARAMCHAR(_C_); 
				HORIZONTALTAB; PRINTFLOAT3(VOLUME_EXTINCTION(BSDF));
				NEXTLINE;
				HORIZONTALTAB; PRINTPARAMCHAR(_A_); PRINTPARAMCHAR(_N_); PRINTPARAMCHAR(_I_); PRINTPARAMCHAR(_S_); PRINTPARAMCHAR(_O_); PRINTPARAMCHAR(_T_); 
				HORIZONTALTAB; SIGNOFFLOAT1(VOLUME_ANISOTROPY(BSDF)); PRINTFLOAT1(abs(VOLUME_ANISOTROPY(BSDF)));
				NEXTLINE;
				HORIZONTALTAB; PRINTPARAMCHAR(_T_); PRINTPARAMCHAR(_H_); PRINTPARAMCHAR(_I_); PRINTPARAMCHAR(_C_); PRINTPARAMCHAR(_K_); PRINTPARAMCHAR(_N_); 
				HORIZONTALTAB; PRINTFLOAT1(VOLUME_THICKNESS(BSDF) *1000.0f); PRINTPARAMCHAR(_SPC_); PRINTPARAMCHAR(_M_); PRINTPARAMCHAR(_I_); PRINTPARAMCHAR(_L_); PRINTPARAMCHAR(_L_); PRINTPARAMCHAR(_I_);
				NEXTLINE;

				break;
			}

			HORIZONTALSEPARATION;
		}

		PRINTINFOCHAR(_B_); PRINTINFOCHAR(_O_); PRINTINFOCHAR(_T_); PRINTINFOCHAR(_T_); PRINTINFOCHAR(_O_); PRINTINFOCHAR(_M_);
		NEXTLINE;
	}
}


