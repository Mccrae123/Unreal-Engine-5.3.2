// Copyright Epic Games, Inc. All Rights Reserved.

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/DeferredShadingCommon.ush"

#define STRATA_INLINE_SHADING 0
#define STRATA_SSS_MATERIAL_OVERRIDE 0
#define STRATA_SSS_TRANSMISSION 0  // Disable for now, as the SSS profile texture need to be bound
#include "/Engine/Private/Strata/StrataEvaluation.ush"
#include "/Engine/Private/Strata/StrataTile.ush"

#include "/Engine/Private/ShaderPrint.ush"
#include "../ColorMap.ush"

// This is for the fxc compiler to compile faster.
#define STRATA_VIZ_MAX_BSDF 2

void DrawReferentialTWS(float3 P /*In Translated World Space*/, float3 X, float3 Y, float3 N, float3 InColor)
{
	const float Size = 10.f;
	const float SizeWithTip = 12.0f;
	const float4 Color = float4(InColor, 1);
	const float4 ColorX = float4(1, 0, 0, 1);
	const float4 ColorY = float4(0, 1, 0, 1);
	const float4 ColorZ = float4(0, 0, 1, 1);

	// Core
	AddLineTWS(P, P + X * Size, Color, Color);
	AddLineTWS(P, P + Y * Size, Color, Color);
	AddLineTWS(P, P + N * Size, Color, Color);
	// Tips
	AddLineTWS(P + X * Size, P + X * SizeWithTip, ColorX, ColorX);
	AddLineTWS(P + Y * Size, P + Y * SizeWithTip, ColorY, ColorY);
	AddLineTWS(P + N * Size, P + N * SizeWithTip, ColorZ, ColorZ);
}

void AddDrawPixelFootprint(float3 P, float3 dPdx, float3 dPdy, float2 Scale, bool bNormalize, float4 Color)
{
	const float3 T = (bNormalize ? normalize(dPdx) : dPdx) * Scale.x;
	const float3 B = (bNormalize ? normalize(dPdy) : dPdy) * Scale.y;
	const float3 N = normalize(cross(T, B));

	const float3 WP0 = P - T - B;
	const float3 WP1 = P + T - B;
	const float3 WP2 = P + T + B;
	const float3 WP3 = P - T + B;

	AddLineTWS(WP0, WP1, Color);
	AddLineTWS(WP1, WP2, Color);
	AddLineTWS(WP2, WP3, Color);
	AddLineTWS(WP3, WP0, Color);
}

void DrawPixelFootprint(float3 P, float3 dPdx, float3 dPdy, uint2 PixelCoord)
{
	const FStrataSubsurfaceData SSSData = StrataUnpackSSSData(Strata.SSSTexture.Load(uint3(PixelCoord, 0)));
	if (SSSData.bIsValid)
	{
		float3 MFP = 0;
		if (SSSData.bIsProfile)
		{
			MFP = GetSubsurfaceProfileMFPInCm(SSSData.ProfileId).xyz * SSSData.ProfileRadiusScale;
		}
		else
		{
			MFP = SSSData.MFP;
		}

		FStrataPixelFootprint Footprint = StrataGetPixelFootprint(P);
		AddDrawPixelFootprint(P, dPdx, dPdy, 0.5f, false, ColorRed);
		AddDrawPixelFootprint(P, dPdx, dPdy, Footprint.PixelRadiusInWorldSpace, true, ColorOrange);
		AddDrawPixelFootprint(P, dPdx, dPdy, max3(MFP.x, MFP.y, MFP.z), true, ColorCyan);

		// Normal
		const float3 N = normalize(cross(normalize(dPdx), normalize(dPdy)));
		AddLineTWS(P, P + N * 10.f, ColorBlue);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Material Print

#if SHADER_MATERIALPRINT

#ifndef MULTIPASS_ENABLE 
#define MULTIPASS_ENABLE 0
#endif

uint BSDFIndex;
RWBuffer<uint> RWPositionOffsetBuffer;

// View mode:
// 1: Plot a single pixel
// 2: Color code the number of BSDFs (green -> red)
// 3: Add layer visualization
void PrintBool(inout FShaderPrintContext Ctx, bool In, FFontColor InColor)
{
	if (In)
	{
		Print(Ctx, TEXT("Yes  "), FontGreen);
	}
	else
	{
		Print(Ctx, TEXT("No   "), FontRed);
	}
}

void PrintPixelType(inout FShaderPrintContext Ctx, bool bIsSimpleMaterial, bool bIsSingleMaterial, FFontColor InColor)
{
		 if (bIsSimpleMaterial)	Print(Ctx, TEXT("Simple  "), InColor);
	else if (bIsSingleMaterial)	Print(Ctx, TEXT("Single  "), InColor);
	else						Print(Ctx, TEXT("Complex "), InColor);
}

void PrintBSDF(inout FShaderPrintContext Context, inout FStrataAddressing StrataAddressing, FStrataPixelHeader Header, float3 WorldPosition, float3 V)
{
	const FFontColor FontBSDF         = FontSilver;
	const FFontColor FontBSDFType     = FontEmerald;
	const FFontColor FontBSDFStateName= FontWhite;
	const FFontColor FontBSDFPropName = FontOrange;
	const FFontColor FontBSDFPropValu = FontWhite;

	const FStrataBSDF BSDF = UnpackStrataBSDFIn(Strata.MaterialTextureArray, StrataAddressing, Header);

	// Draw Referential
	{
		const float3 DummyL = float3(0, 0, 1);
		FStrataBSDFContext BSDFContext = StrataCreateBSDFContext(Header, BSDF, StrataAddressing, V, DummyL);
		DrawReferentialTWS(WorldPosition, BSDFContext.X, BSDFContext.Y, BSDFContext.N, float3(1, 1, 0));
	}

	switch (BSDF_GETTYPE(BSDF))
	{
		case STRATA_BSDF_TYPE_SLAB:
		{
			const bool bGreyWeightV = BSDF_GETHASGREYWEIGHT(BSDF);

			Print(Context, TEXT("Slab "), FontBSDFType);
			Newline(Context);
			Print(Context, TEXT(" NormalID Aniso TopLayer Scattering SingleScatt. IsThin WeightV "), FontBSDFStateName);
			if (!bGreyWeightV)
			{
				Print(Context, TEXT("           "), FontBSDFStateName);
			}
			Print(Context, TEXT("WeightL"), FontBSDFStateName);
			Newline(Context);

			Print(Context, TEXT(" "), FontSilver);
			Print(Context, BSDF_GETSHAREDLOCALBASISID(BSDF), FontBSDF, 2, 1);	Print(Context, TEXT("       "), FontSilver);
			PrintBool(Context, BSDF_GETHASANISOTROPY(BSDF), FontBSDF);			Print(Context, TEXT(" "), FontSilver);
			PrintBool(Context, BSDF_GETISTOPLAYER(BSDF), FontBSDF);				Print(Context, TEXT("    "), FontSilver);
			PrintBool(Context, BSDF_GETHASSSS(BSDF), FontBSDF);					Print(Context, TEXT("      "), FontSilver);
			PrintBool(Context, BSDF_GETISSIMPLEVOLUME(BSDF), FontBSDF);			Print(Context, TEXT("        "), FontSilver);
			PrintBool(Context, BSDF_GETISTHIN(BSDF), FontBSDF);					Print(Context, TEXT("  "), FontSilver);

			// View Weight
			if (BSDF_GETHASGREYWEIGHT(BSDF))
			{
				Print(Context, BSDF.LuminanceWeightV.x, FontSilver, 6, 4);
			}
			else
			{
				Print(Context, BSDF.LuminanceWeightV.r, FontLightRed,   6, 4);
				Print(Context, BSDF.LuminanceWeightV.g, FontLightGreen, 6, 4);
				Print(Context, BSDF.LuminanceWeightV.b, FontLightBlue,  6, 4);
			}

			// Lighy weight
			if (any(BSDF.LuminanceWeightL < 1.f))
			{
				Print(Context, TEXT(" "), FontSilver);
				const bool bGreyLuminanceL = BSDF.LuminanceWeightL.x == BSDF.LuminanceWeightL.y && BSDF.LuminanceWeightL.x == BSDF.LuminanceWeightL.z;
				if (bGreyLuminanceL)
				{
					Print(Context, BSDF.LuminanceWeightL.x, FontSilver);
				}
				else	
				{
					Print(Context, BSDF.LuminanceWeightL.r, FontLightRed,   6, 4);
					Print(Context, BSDF.LuminanceWeightL.g, FontLightGreen, 6, 4);
					Print(Context, BSDF.LuminanceWeightL.b, FontLightBlue,  6, 4);
				}
			}
			Newline(Context);

			Print(Context, TEXT(" Diffuse     "), FontBSDFPropName);	Print(Context, SLAB_DIFFUSEALBEDO(BSDF), FontBSDFPropValu);			Newline(Context);

			const bool bGreyF0 = SLAB_F0(BSDF).x == SLAB_F0(BSDF).y && SLAB_F0(BSDF).x == SLAB_F0(BSDF).z;
			if (bGreyF0)
			{
			Print(Context, TEXT(" F0          "), FontBSDFPropName);	Print(Context, SLAB_F0(BSDF).x, FontBSDFPropValu);					Newline(Context);
			}
			else
			{
			Print(Context, TEXT(" F0          "), FontBSDFPropName);	Print(Context, SLAB_F0(BSDF), FontBSDFPropValu);					Newline(Context);
			}


			if (BSDF_GETHASF90(BSDF))
			{
			const bool bGreyF90 = SLAB_F90(BSDF).x == SLAB_F90(BSDF).y && SLAB_F90(BSDF).x == SLAB_F90(BSDF).z;
			if (bGreyF90)
			{
			Print(Context, TEXT(" F90         "), FontBSDFPropName);	Print(Context, SLAB_F90(BSDF).x, FontBSDFPropValu);					Newline(Context);
			}
			else
			{
			Print(Context, TEXT(" F90         "), FontBSDFPropName);	Print(Context, SLAB_F90(BSDF), FontBSDFPropValu);					Newline(Context);
			}
			}

			Print(Context, TEXT(" Roughness   "), FontBSDFPropName);	Print(Context, SLAB_ROUGHNESS(BSDF), FontBSDFPropValu);				Newline(Context);

			if (BSDF_GETHASANISOTROPY(BSDF))
			{
			Print(Context, TEXT(" Anisotropy  "), FontBSDFPropName);	Print(Context, SLAB_ANISOTROPY(BSDF), FontBSDFPropValu);			Newline(Context);
			}

			if (BSDF_GETHASHAZINESS(BSDF))
			{
			Print(Context, TEXT(" Haziness    "), FontBSDFPropName);	Print(Context, SLAB_HAZINESS(BSDF), FontBSDFPropValu);				Newline(Context);
			}
			
			if (BSDF_GETHASSSS(BSDF) || BSDF_GETISSIMPLEVOLUME(BSDF) || BSDF_GETISTHIN(BSDF))
			{

			if (BSDF_GETHASSSSPROFILE(BSDF) && BSDF_GETISSIMPLEVOLUME(BSDF) == 0)
			{
			Print(Context, TEXT(" SSS ID.     "), FontBSDFPropName);	Print(Context, SLAB_SSSPROFILEID(BSDF), FontBSDFPropValu);			Newline(Context);
			Print(Context, TEXT(" SSS Radius  "), FontBSDFPropName);	Print(Context, SLAB_SSSPROFILERADIUSSCALE(BSDF), FontBSDFPropValu);	Newline(Context);
			}
			else
			{
			Print(Context, TEXT(" SSS MFP     "), FontBSDFPropName);	Print(Context, SLAB_SSSMFP(BSDF), FontBSDFPropValu);				Newline(Context);
			}

			} // SSS

			if (BSDF_GETHASFUZZ(BSDF))
			{
			Print(Context, TEXT(" Fuzz Amount "), FontBSDFPropName);	Print(Context, SLAB_FUZZ_AMOUNT(BSDF), FontBSDFPropValu);			Newline(Context);
			Print(Context, TEXT(" Fuzz Color  "), FontBSDFPropName);	Print(Context, SLAB_FUZZ_COLOR(BSDF), FontBSDFPropValu);			Newline(Context);
			}
		}
		break;

		case STRATA_BSDF_TYPE_HAIR:
		{
			Print(Context, TEXT("Hair"), FontBSDFType);
			Newline(Context);
			Print(Context, TEXT(" NormalID Aniso IsTopLayer LuminanceWeight"), FontBSDF);
			Newline(Context);

			Print(Context, BSDF_GETSHAREDLOCALBASISID(BSDF), FontBSDF);
			PrintBool(Context, BSDF_GETHASANISOTROPY(BSDF), FontBSDF);
			PrintBool(Context, BSDF_GETISTOPLAYER(BSDF), FontBSDF);
			if (BSDF_GETHASGREYWEIGHT(BSDF))
			{
				Print(Context, BSDF.LuminanceWeightV.x, FontSilver);
			}
			else
			{
				Print(Context, BSDF.LuminanceWeightV.r, FontLightRed);
				Print(Context, BSDF.LuminanceWeightV.g, FontLightGreen);
				Print(Context, BSDF.LuminanceWeightV.b, FontLightBlue);
			}
			Newline(Context);

			Print(Context, TEXT(" BaseColor         "), FontBSDFPropName);	Print(Context, HAIR_BASECOLOR(BSDF), FontBSDFPropValu);				Newline(Context);
			Print(Context, TEXT(" Specular          "), FontBSDFPropName);	Print(Context, HAIR_SPECULAR(BSDF), FontBSDFPropValu);				Newline(Context);
			Print(Context, TEXT(" Roughness         "), FontBSDFPropName);	Print(Context, HAIR_ROUGHNESS(BSDF), FontBSDFPropValu);				Newline(Context);
			Print(Context, TEXT(" Scatter           "), FontBSDFPropName);	Print(Context, HAIR_SCATTER(BSDF), FontBSDFPropValu);				Newline(Context);
			Print(Context, TEXT(" Backlit           "), FontBSDFPropName);	Print(Context, HAIR_BACKLIT(BSDF), FontBSDFPropValu);				Newline(Context);
			Print(Context, TEXT(" Has Transmittance "), FontBSDFPropName);	Print(Context, HAIR_COMPLEXTRANSMITTANCE(BSDF), FontBSDFPropValu);	Newline(Context);
		}
		break;

		case STRATA_BSDF_TYPE_SINGLELAYERWATER:
		{
			Print(Context, TEXT("Water"), FontBSDFType);

			Newline(Context);
			Print(Context, TEXT(" BaseColor            "), FontBSDFPropName);	Print(Context, SLW_BASECOLOR(BSDF), FontBSDFPropValu);			Newline(Context);
			Print(Context, TEXT(" Metallic             "), FontBSDFPropName);	Print(Context, SLW_METALLIC(BSDF), FontBSDFPropValu);			Newline(Context);
			Print(Context, TEXT(" Specular             "), FontBSDFPropName);	Print(Context, SLW_SPECULAR(BSDF), FontBSDFPropValu);			Newline(Context);
			Print(Context, TEXT(" Roughness            "), FontBSDFPropName);	Print(Context, SLW_ROUGHNESS(BSDF), FontBSDFPropValu);			Newline(Context);
			Print(Context, TEXT(" Top Material Opacity "), FontBSDFPropName);	Print(Context, SLW_TOPMATERIALOPACITY(BSDF), FontBSDFPropValu);	Newline(Context);
		}
		break;

	default:
		{
			Print(Context, TEXT("Error"), FontRed);
		}
		break;
	}

	Newline(Context);
}

void PrintPixel(uint2 InCoord, float3 InWorldPosition, float3 V)
{
	FShaderPrintContext Context;
	#if MULTIPASS_ENABLE
	if (BSDFIndex > 0)
	{
		float2 PrintOffset;
		PrintOffset.x = asfloat(RWPositionOffsetBuffer[0]);
		PrintOffset.y = asfloat(RWPositionOffsetBuffer[1]);
		Context = InitShaderPrintContext(true, PrintOffset);
	}
	else
	#endif
	{
		Context = InitShaderPrintContext(true, uint2(50, 50));
	}

	FStrataAddressing StrataAddressing = GetStrataPixelDataByteOffset(InCoord, uint2(View.BufferSizeAndInvSize.xy), Strata.MaxBytesPerPixel);
	const uint FootPrint_Start = StrataAddressing.ReadBytes;

	FStrataPixelHeader Header = UnpackStrataHeaderIn(Strata.MaterialTextureArray, StrataAddressing, Strata.TopLayerTexture);
	const uint FootPrint_PostHeader = StrataAddressing.ReadBytes;

	const FFontColor FontBSDFCount = FontEmerald;
	const FFontColor FontHeaderStateName = FontWhite;
	const FFontColor FontHeaderPropName = FontWhite;
	const FFontColor FontHeaderPropValue = FontSilver;

	// Header
	if (BSDFIndex < Header.BSDFCount && BSDFIndex == 0)
	{
		const FStrataTopLayerData TopLayerData = StrataUnpackTopLayerData(Strata.TopLayerTexture.Load(uint3(InCoord, 0)));
		const FStrataSubsurfaceData SSSData = StrataUnpackSSSData(Strata.SSSTexture.Load(uint3(InCoord, 0)));

		const bool bStrataMaterial = Header.BSDFCount > 0;
		const bool bIsSimpleMaterial = IsSimpleMaterial(Header) || Header.BSDFCount == 0;
		const bool bIsSingleMaterial = !IsSimpleMaterial(Header) && IsSingleMaterial(Header);

		Print(Context, Header.BSDFCount, FontBSDFCount, 2, 0);
		Print(Context, TEXT("BSDF"), FontBSDFCount);
		Print(Context, TEXT(" - "), FontWhite);
		PrintPixelType(Context, bIsSimpleMaterial, bIsSingleMaterial, FontLightRed);
		Newline(Context);

		Print(Context, TEXT(" AO    TopRoughness PreShadow ZeroShadow ContacShadow Ind.Occluder IsWater HasSSS"), FontHeaderStateName);
		Newline(Context);

		Print(Context, TEXT(" "));
		Print(Context, StrataGetAO(Header), FontHeaderPropValue, 5, 3);									Print(Context, TEXT(" "));
		Print(Context, TopLayerData.Roughness, FontHeaderPropValue, 5, 3);								Print(Context, TEXT("        "));
		PrintBool(Context, HasPrecShadowMask(Header), FontHeaderPropValue);								Print(Context, TEXT("     "));
		PrintBool(Context, HasZeroPrecShadowMask(Header), FontHeaderPropValue);							Print(Context, TEXT("      "));
		PrintBool(Context, DoesCastContactShadow(Header), FontHeaderPropValue);							Print(Context, TEXT("        "));
		PrintBool(Context, HasDynamicIndirectShadowCasterRepresentation(Header), FontHeaderPropValue);	Print(Context, TEXT("        "));
		PrintBool(Context, IsSingleLayerWater(Header), FontHeaderPropValue);							Print(Context, TEXT("   "));
		PrintBool(Context, HasSubsurface(Header), FontHeaderPropValue);
		Newline(Context);
		Newline(Context);
	}

	// BSDFs
#if MULTIPASS_ENABLE
	if (BSDFIndex < Header.BSDFCount)
	{
		if (BSDFIndex > 0)
		{
			StrataSeekBSDF(StrataAddressing, UnpackBSDFOffset(Strata.BSDFOffsetTexture[InCoord], Header.BSDFCount), BSDFIndex);
		}
		PrintBSDF(Context, StrataAddressing, Header, InWorldPosition, V);

		RWPositionOffsetBuffer[0] = asuint(Context.Pos.x);
		RWPositionOffsetBuffer[1] = asuint(Context.Pos.y);
	}
#else // MULTIPASS_ENABLE
	if (BSDFIndex == 0 && Header.BSDFCount > 0)
	{
	#if 1
		#if COMPILER_DXC == 1
		LOOP
		for (uint BSDFIndex = 0; BSDFIndex < Header.BSDFCount; ++BSDFIndex)
		#else
		Header.BSDFCount = min(Header.BSDFCount, STRATA_VIZ_MAX_BSDF);
		UNROLL_N(STRATA_VIZ_MAX_BSDF) // FXC requires that we specify an upper bound here. Not DXC.
		for (uint LocalBSDFIndex = 0; LocalBSDFIndex < Header.BSDFCount; ++LocalBSDFIndex)
		#endif
	#endif
		{
			PrintBSDF(Context, StrataAddressing, Header, InWorldPosition, V);
		}
	}
#endif // MULTIPASS_ENABLE

	// Memory footprint
#if MULTIPASS_ENABLE
	if (BSDFIndex+1 == Header.BSDFCount)
#endif
	{
		const uint FootPrint_PostBSDFs = StrataAddressing.ReadBytes;

		const uint HeaderSize = FootPrint_PostHeader - FootPrint_Start;
		const uint BSDFsSize  = FootPrint_PostBSDFs - FootPrint_PostHeader;
		const uint TotalSize  = FootPrint_PostBSDFs - FootPrint_Start;

		Print(Context, TEXT("Memory"), FontEmerald); Newline(Context);
		Print(Context, TEXT(" Header "), FontSilver); Print(Context, HeaderSize, FontSilver, 3, 0); Print(Context, TEXT("bytes"), FontSilver); Newline(Context);
		Print(Context, TEXT(" BSDFs  "), FontSilver); Print(Context, BSDFsSize,  FontSilver, 3, 0); Print(Context, TEXT("bytes"), FontSilver); Newline(Context);
		Print(Context, TEXT(" Total  "), FontOrange); Print(Context, TotalSize,  FontOrange, 3, 0); Print(Context, TEXT("bytes"), FontOrange); Newline(Context);
	}
}

[numthreads(1, 1, 1)]
void MaterialPrintInfoCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	const uint2 PixelPos = View.CursorPosition;
	const float2 BufferUV = SvPositionToBufferUV(float4(PixelPos + 0.5f, 0, 0));
	const float2 ScreenPosition = SvPositionToScreenPosition(float4(PixelPos, 0.5f, 1)).xy;
	const float DeviceZ = SampleDeviceZFromSceneTextures(BufferUV);
	const float SceneDepth = ConvertFromDeviceZ(DeviceZ);
	const float3 WorldPosition = mul(float4(ScreenPosition * SceneDepth, SceneDepth, 1), PrimaryView.ScreenToTranslatedWorld).xyz;
	const float3 V = -normalize(WorldPosition - PrimaryView.TranslatedWorldCameraOrigin);

	PrintPixel(PixelPos, WorldPosition, V);
}
#endif // SHADER_MATERIALPRINT

///////////////////////////////////////////////////////////////////////////////////////////////////
// Material Visualize

#if SHADER_MATERIALVISUALIZE

uint ViewMode;

void VisualizeMaterialPS(
	float4 SVPos : SV_POSITION,
	out float4 OutColor : SV_Target0)
{
	const uint2 PixelPos = uint2(SVPos.xy);
	float2 BufferUV = SvPositionToBufferUV(float4(PixelPos, SVPos.zw));

	const float2 ScreenPosition = SvPositionToScreenPosition(SVPos).xy;
	const float2 ScreenMaterialPosition = SvPositionToScreenPosition(float4(PixelPos, 0.5f, 1)).xy;
	float DeviceZ = SampleDeviceZFromSceneTextures(BufferUV);
	float SceneDepth = ConvertFromDeviceZ(DeviceZ);
	const float3 WorldPosition = mul(float4(ScreenMaterialPosition * SceneDepth, SceneDepth, 1), PrimaryView.ScreenToTranslatedWorld).xyz;
	const float3 V = -normalize(WorldPosition - PrimaryView.TranslatedWorldCameraOrigin);

	FStrataAddressing StrataAddressing = GetStrataPixelDataByteOffset(PixelPos, uint2(View.BufferSizeAndInvSize.xy), Strata.MaxBytesPerPixel);
	FStrataPixelHeader Header = UnpackStrataHeaderIn(Strata.MaterialTextureArray, StrataAddressing, Strata.TopLayerTexture);
	bool bStrataMaterial = Header.BSDFCount > 0;

	OutColor = 0;

	// BSDF count
	if (ViewMode == 2)
	{
		OutColor.w = 0.1f;
		if (Header.BSDFCount > 0)
		{
			const float BSDFCost = saturate(float(Header.BSDFCount) / 4.f);
			OutColor.xyz = ColorMapTurbo(BSDFCost);
		}
	}
	else
	{
		OutColor = float4(0.0f, 0.0f, 0.0f, 1.0f);
	}
}
#endif // SHADER_MATERIALVISUALIZE
