// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "/Engine/Private/Common.ush"
#include "/Engine/Shared/StrataDefinitions.h"   
#include "Strata.ush"

#if STRATA_ENABLED

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Strata material type tile

uint2 StrataUnpackTile(uint In)
{
	return uint2(In & 0xFFFF, In >> 16);
}

uint StrataPackTile(uint2 TileCoord)
{
	return TileCoord.x | (TileCoord.y << 16); // assumes 16bit is enough to represent a tiled resolution up to 65,535 :)
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Strata BSDF tile

// For tile whose conatins at least 1 pixel with several BSDF, we store a list of 'overflow' tiles
// 
// For handling material with several BSDF per pixel we extend the original texture (primary space) 
// with an overflow space. Pixels with more than one BSDF data will write BSDF 2/3/... data into 
// the overflow space
//  ________________
// |				|
// | Primary space	|
// |________________|
// | Overflow space |
// |________________|
//
// The primary & overflow spaces are divided into tiles, and one primary-space tile refers a list 
// of tiles in overflow-space, if the tile contains at least one pixel with has more than 1 BSDF
// If several tiles are needed, they are contigously stored in overflow space
//  ________________
// |_:_:_:_:_:_:_:_:|
// |_:_:_:_:_:_:_:_:| Primary space
// |_:_:_:_:_:_:_:_:|
//  ----------------
// |_:_:_:_:_:_:	| Overflow space
// |________________|

struct FStrataBSDFTile
{
	uint2 TileCoord; // If Index == 0, points to the first 'overflow' tiles. If Index != 0, points towards the 'parent'/primary space tile
	uint  Index;
	uint  Count;
};

uint PackBSDFTile(FStrataBSDFTile In)
{
	// Tile coord are encoded onto 10bits. Max resolution 8k x 8k. Max 8 tiles.
	return (In.TileCoord.x & 0x3FF) | ((In.TileCoord.y & 0x3FF) << 10) | ((In.Index & 0x7) << 20) | ((In.Count & 0x7) << 23);
}

FStrataBSDFTile UnpackBSDFTile(uint In)
{
	FStrataBSDFTile Out;
	Out.TileCoord.x = In & 0x3FF;
	Out.TileCoord.y = (In >> 10u) & 0x3FF;
	Out.Index = (In >> 20u) & 0x7;
	Out.Count = (In >> 23u) & 0x7;
	return Out;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Strata BSDF offset

// Store the material slice index offset for each BSDF, for pixels containing several BSDFs
struct FStrataBSDFOffset
{
	uint BSDFOffsets[STRATA_MAX_BSDF_COUNT];
	uint BSDFCount;
};

uint PackBSDFOffset(FStrataBSDFOffset In)
{
	// Packed as relative cumulative offsets, stored into 32 bits
	// | 4 bits | 2 bits | 2 bits | 2 bits | ... | 2 bits |
	//   BSDF 0   BSDF 1   BSDF 2   BSDF 3  ...   BSDF 15 (STRATA_MAX_BSDF_COUNT)

	uint Out = 0;
	const uint BSDFCount = min(In.BSDFCount, STRATA_MAX_BSDF_COUNT);
	if (BSDFCount > 0)
	{
		Out = In.BSDFOffsets[0] & 0xF;
		UNROLL
		for (uint i = 1; i < BSDFCount; i++)
		{
			uint Curr = (In.BSDFOffsets[i  ] & 0x3);
			uint Prev = (In.BSDFOffsets[i-1] & 0x3);
			Out = Out | (((Curr - Prev) & 0x3) << (2u*i));
		}
	}
	return Out;
}

FStrataBSDFOffset UnpackBSDFOffset(uint In, uint InBSDFCount)
{
	FStrataBSDFOffset Out = (FStrataBSDFOffset)0;
	if (InBSDFCount > 0)
	{
		Out.BSDFCount = min(InBSDFCount, STRATA_MAX_BSDF_COUNT);
		Out.BSDFOffsets[0] = (In & 0xF);

		FStrataBSDFOffset Out = (FStrataBSDFOffset)0;
		UNROLL
		for (uint i = 1; i < Out.BSDFCount; i++)
		{
			Out.BSDFOffsets[i] = Out.BSDFOffsets[i-1] + ((In>>(2u*i)) & 0x3);
		}
	}
	return Out;
}

void StrataSeekBSDF(inout FStrataAddressing Addressing, FStrataBSDFOffset Offsets, uint BSDFIndex)
{
	if (BSDFIndex < Offsets.BSDFCount)
	{
		Addressing.CurrentIndex = Offsets.BSDFOffsets[BSDFIndex];
		Addressing.ReadBytes = Addressing.CurrentIndex * 4;
	}
}

#endif // STRATA_ENABLED