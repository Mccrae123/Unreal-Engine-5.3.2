// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "../Common.ush"
#include "../BRDF.ush"
#include "../ShadingCommon.ush"


// STRATA_TODO
//	- What model exactly
//	- Fat dielectric model? Or make it adaptative (for instance Medium_ could be optional to store/load)
//	- Have a Disney model that is convernient to be super packed and be able to represent current mateiral?
//	- Shared normal? Up to N normals? On CPU, inputs have a hash that could be use to decuplicate normals
//	- Transmittance lob modelisation (GGX statistics?) and blocking surface such as FStrataDiffuse?
//	- fp16 on gen5


///////////////////////////////////////////////////////////////////////////////
// BSDFs representation

struct FStrataDiffuse
{
	float3	Albedo;
	float   Roughness;

	float3	Normal;
};

struct FStrataDielectric
{
	float	IOR;
	float3	Tint;
	float2	Roughness;

	float3	Normal;
};

struct FStrataConductor
{
	float3	Reflectivity;
	float3	EdgeColor;
	float2	Roughness;

	float3	Normal;
};

struct FStrataVolume
{
	float3	Albedo;
	float3	Extinction;
	float	Anisotropy;
	float	Thickness;
};


#define STRATA_BSDF_TYPE_DIFFUSE_ON			0
#define STRATA_BSDF_TYPE_DIFFUSE_CHAN		1
#define STRATA_BSDF_TYPE_DIELECTRIC			2
#define STRATA_BSDF_TYPE_CONDUCTOR			3
#define STRATA_BSDF_TYPE_VOLUME				4



// The largest Strata BSDF is FStrataConductor having as size of 24 bytes.
// So we will have 
//		STRATA_MAX_TOTAL_BSDF * sizeof(FStrataConductor) +				// 4 * 24
//		STRATA_MAX_TOTAL_BSDF * (sizeof(BSDFType) + sizeof(Weight))		// 4 * 8
//		sizeof(BSDFCount)												// UINT
//		= 4 * 24 + 4 * 8 + 1 = 96 + 32 + 1 = 129						// See Strata.cpp
struct FStrataBSDF
{
	int					BSDFType;
	float3				Weight;		// Weight is a float3 because, when loaded from the material buffer, it contains the BSDF throughput (coverage and transmittance combined)

	// Even thought the compiler should optimise, it would be nice to have a union with reinterpretation of the register memory.
	FStrataDiffuse		Diffuse;
	FStrataDielectric	Dielectric;
	FStrataConductor	Conductor;
	FStrataVolume		Volume;
};


#define STRATA_MAX_BSDF_COUNT_PER_LAYER	4
#define STRATA_MAX_LAYER_COUNT			4
#define STRATA_MAX_TOTAL_BSDF			4

struct FStrataLayer
{
	int BSDFCount;

	FStrataBSDF BSDFs[STRATA_MAX_BSDF_COUNT_PER_LAYER];
};

struct FStrataData
{
	int LayerCount;

	FStrataLayer Layers[STRATA_MAX_LAYER_COUNT];	// Layer 0 is the top layer
};


FStrataData GetInitialisedStrataData()
{
	FStrataData StrataData = (FStrataData)0;
	return StrataData;
}

FStrataData GetStrataDiffuseOrenNayarBSDF(float3 Albedo, float Roughness, float3 Normal)
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.LayerCount++;

	StrataData.Layers[0].BSDFCount++;
	StrataData.Layers[0].BSDFs[0].BSDFType						= STRATA_BSDF_TYPE_DIFFUSE_ON;
	StrataData.Layers[0].BSDFs[0].Diffuse.Albedo				= Albedo;
	StrataData.Layers[0].BSDFs[0].Diffuse.Roughness				= Roughness;
	StrataData.Layers[0].BSDFs[0].Diffuse.Normal				= Normal;

	StrataData.Layers[0].BSDFs[0].Weight						= 1.0f;

	return StrataData;
}

FStrataData GetStrataDiffuseChanBSDF(float3 Albedo, float Roughness, float3 Normal)
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.LayerCount++;

	StrataData.Layers[0].BSDFCount++;
	StrataData.Layers[0].BSDFs[0].BSDFType						= STRATA_BSDF_TYPE_DIFFUSE_CHAN;
	StrataData.Layers[0].BSDFs[0].Diffuse.Albedo				= Albedo;
	StrataData.Layers[0].BSDFs[0].Diffuse.Roughness				= Roughness;
	StrataData.Layers[0].BSDFs[0].Diffuse.Normal				= Normal;

	StrataData.Layers[0].BSDFs[0].Weight						= 1.0f;

	return StrataData;
}

FStrataData GetStrataDielectricBSDF(float2 Roughness, float IOR, float3 Tint, float3 Normal)
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.LayerCount++;

	StrataData.Layers[0].BSDFCount++;
	StrataData.Layers[0].BSDFs[0].BSDFType						= STRATA_BSDF_TYPE_DIELECTRIC;
	StrataData.Layers[0].BSDFs[0].Dielectric.IOR				= IOR;
	StrataData.Layers[0].BSDFs[0].Dielectric.Tint				= Tint;
	StrataData.Layers[0].BSDFs[0].Dielectric.Roughness			= Roughness;
	StrataData.Layers[0].BSDFs[0].Dielectric.Normal				= Normal;

	StrataData.Layers[0].BSDFs[0].Weight						= 1.0f;

	return StrataData;
}

FStrataData GetStrataConductorBSDF(float3 Reflectivity, float3 EdgeColor, float2 Roughness, float3 Normal)
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.LayerCount++;

	StrataData.Layers[0].BSDFCount++;
	StrataData.Layers[0].BSDFs[0].BSDFType						= STRATA_BSDF_TYPE_CONDUCTOR;
	StrataData.Layers[0].BSDFs[0].Conductor.Reflectivity		= Reflectivity;
	StrataData.Layers[0].BSDFs[0].Conductor.EdgeColor			= EdgeColor;
	StrataData.Layers[0].BSDFs[0].Conductor.Roughness			= Roughness;
	StrataData.Layers[0].BSDFs[0].Conductor.Normal				= Normal;

	StrataData.Layers[0].BSDFs[0].Weight						= 1.0f;

	return StrataData;
}

FStrataData GetStrataVolumeBSDF(float3 Albedo, float3 Extinction, float Anisotropy, float Thickness)
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.LayerCount++;

	StrataData.Layers[0].BSDFCount++;
	StrataData.Layers[0].BSDFs[0].BSDFType						= STRATA_BSDF_TYPE_VOLUME;
	StrataData.Layers[0].BSDFs[0].Volume.Albedo					= Albedo;
	StrataData.Layers[0].BSDFs[0].Volume.Extinction				= Extinction;
	StrataData.Layers[0].BSDFs[0].Volume.Anisotropy				= Anisotropy;
	StrataData.Layers[0].BSDFs[0].Volume.Thickness				= Thickness;

	StrataData.Layers[0].BSDFs[0].Weight						= 1.0f;

	return StrataData;
}



///////////////////////////////////////////////////////////////////////////////
// Operators node


FStrataData StrataAdd(FStrataData A, FStrataData B)
{
	FStrataData StrataData = A;

	// Append each BSDF from B to A, with same layer position
	for (int Layer = 0; Layer < B.LayerCount; ++Layer)
	{
		FStrataLayer ALayer = A.Layers[Layer];
		FStrataLayer BLayer = B.Layers[Layer];
		for (int BSDF = 0; BSDF < BLayer.BSDFCount; BSDF++)
		{
			StrataData.Layers[Layer].BSDFs[ALayer.BSDFCount + BSDF] = BLayer.BSDFs[BSDF];
		}

		StrataData.Layers[Layer].BSDFCount = ALayer.BSDFCount + BLayer.BSDFCount;
	}

	StrataData.LayerCount = max(A.LayerCount, B.LayerCount);

	return StrataData;
}

FStrataData StrataMultiply(FStrataData A, float3 Weight)
{
	FStrataData StrataData = A;

	// Apply the weight to each BSDF
	for (int Layer = 0; Layer < StrataData.LayerCount; ++Layer)
	{
		for (int BSDF = 0; BSDF < StrataData.Layers[Layer].BSDFCount; ++BSDF)
		{
			StrataData.Layers[Layer].BSDFs[BSDF].Weight *= Weight;
		}
	}

	return StrataData;
}

FStrataData StrataHorizontalMixing(FStrataData Foreground, FStrataData Background, float Mix)
{
	const float ForgroundMixFactor = Mix;
	const float BackgroundMixFactor = 1.0 - Mix;

	FStrataData A = StrataMultiply(Foreground, ForgroundMixFactor);
	FStrataData B = StrataMultiply(Background, BackgroundMixFactor);
	return StrataAdd(A, B);
}

FStrataData StrataVerticalLayering(FStrataData Top, FStrataData Base)
{
	FStrataData StrataData = Top;

	// Add each layer from Base under Top
	int TopLayerCount = Top.LayerCount;
	for (int Layer = 0; Layer < Base.LayerCount; ++Layer)
	{
		StrataData.Layers[TopLayerCount + Layer] = Base.Layers[Layer];
	}

	StrataData.LayerCount += Base.LayerCount;

	return StrataData;
}










///////////////////////////////////////////////////////////////////////////////
// BSDFs packing/unpacking

uint PackR11G11B10F(float3 rgb)
{
	uint r = (f32tof16(rgb.r) << 17) & 0xFFE00000;
	uint g = (f32tof16(rgb.g) << 6)  & 0x001FFC00;
	uint b = (f32tof16(rgb.b) >> 5)  & 0x000003FF;
	return r | g | b;
}

float3 UnpackR11G11B10F(uint rgb)
{
	float r = f16tof32((rgb >> 17) & 0x7FF0);
	float g = f16tof32((rgb >> 6)  & 0x7FF0);
	float b = f16tof32((rgb << 5)  & 0x7FE0);
	return float3(r, g, b);
}

uint2 PackR16G16B16A16F(float4 rgba)
{
	uint A = (f32tof16(rgba.r) << 16) | f32tof16(rgba.g);
	uint B = (f32tof16(rgba.b) << 16) | f32tof16(rgba.a);
	return uint2 (A, B);
}

float4 UnpackR16G16B16A16F(uint2 AB)
{
	float r = f16tof32(AB.x >> 16);
	float g = f16tof32(AB.x);
	float b = f16tof32(AB.y >> 16);
	float a = f16tof32(AB.y);
	return float4(r, g, b, a);
}

uint PackAlbedoLinearToGamma2(float3 rgb)
{
	uint r = (uint(sqrt(saturate(rgb.r)) * 255.0f) << 16);
	uint g = (uint(sqrt(saturate(rgb.g)) * 255.0f) << 8);
	uint b = (uint(sqrt(saturate(rgb.b)) * 255.0f) << 0);
	return r | g | b;
}

float3 UnpackAlbedoGamma2ToLinear(uint rgb)
{
	float r = float((rgb >> 16) & 0x000000FF);
	float g = float((rgb >> 8)  & 0x000000FF);
	float b = float((rgb >> 0)  & 0x000000FF);
	float3 Gamma2 = float3(r, g, b) * (1.0f / 255.0f);
	return Gamma2 * Gamma2;	// Simple gamma 2.0
}



#define STRATA_STORE_UINT1(x) StrataBuffer.Store (ByteOffset, asuint(x)); ByteOffset += 4;
#define STRATA_STORE_UINT2(x) StrataBuffer.Store2(ByteOffset, asuint(x)); ByteOffset += 8;
#define STRATA_STORE_UINT3(x) StrataBuffer.Store3(ByteOffset, asuint(x)); ByteOffset += 12;
#define STRATA_STORE_UINT4(x) StrataBuffer.Store4(ByteOffset, asuint(x)); ByteOffset += 16;

#define STRATA_LOAD_UINT1(x) x = StrataBuffer.Load (ByteOffset); ByteOffset += 4;
#define STRATA_LOAD_UINT2(x) x = StrataBuffer.Load2(ByteOffset); ByteOffset += 8;
#define STRATA_LOAD_UINT3(x) x = StrataBuffer.Load3(ByteOffset); ByteOffset += 12;
#define STRATA_LOAD_UINT4(x) x = StrataBuffer.Load4(ByteOffset); ByteOffset += 16;

#define STRATA_LOAD_FLOAT1(x) x = asfloat(StrataBuffer.Load (ByteOffset)); ByteOffset += 4;
#define STRATA_LOAD_FLOAT2(x) x = asfloat(StrataBuffer.Load2(ByteOffset)); ByteOffset += 8;
#define STRATA_LOAD_FLOAT3(x) x = asfloat(StrataBuffer.Load3(ByteOffset)); ByteOffset += 12;
#define STRATA_LOAD_FLOAT4(x) x = asfloat(StrataBuffer.Load4(ByteOffset)); ByteOffset += 16;

uint  StrataLoadUint1(ByteAddressBuffer StrataBuffer, inout uint ByteOffset) { uint  x = StrataBuffer.Load (ByteOffset); ByteOffset += 4; return x; }
uint2 StrataLoadUint2(ByteAddressBuffer StrataBuffer, inout uint ByteOffset) { uint2 x = StrataBuffer.Load2(ByteOffset); ByteOffset += 8; return x; }
uint3 StrataLoadUint3(ByteAddressBuffer StrataBuffer, inout uint ByteOffset) { uint3 x = StrataBuffer.Load3(ByteOffset); ByteOffset +=12; return x; }
uint4 StrataLoadUint4(ByteAddressBuffer StrataBuffer, inout uint ByteOffset) { uint4 x = StrataBuffer.Load4(ByteOffset); ByteOffset +=16; return x; }

void StrataLoad_R16G16B16F_A16F(ByteAddressBuffer StrataBuffer, inout uint ByteOffset, inout float3 A, inout float B)
{
	float4 temp = UnpackR16G16B16A16F(StrataLoadUint2(StrataBuffer, ByteOffset));
	A = temp.xyz;
	B = temp.a;
}

void StrataLoad_R11G11B10F(ByteAddressBuffer StrataBuffer, inout uint ByteOffset, inout float3 A)
{
	A = UnpackR11G11B10F(StrataLoadUint1(StrataBuffer, ByteOffset));
}

void StrataLoad_R11G11_B10F(ByteAddressBuffer StrataBuffer, inout uint ByteOffset, inout float2 A, inout float B)
{
	float3 temp = UnpackR11G11B10F(StrataLoadUint1(StrataBuffer, ByteOffset));
	A = temp.xy;
	B = temp.z;
}

void StrataLoad_R11_G11_B10F(ByteAddressBuffer StrataBuffer, inout uint ByteOffset, inout float A, inout float B, inout float C)
{
	float3 temp = UnpackR11G11B10F(StrataLoadUint1(StrataBuffer, ByteOffset));
	A = temp.x;
	B = temp.y;
	C = temp.z;
}

void StrataLoad_AlbedoGamma2ToLinear(ByteAddressBuffer StrataBuffer, inout uint ByteOffset, inout float3 A)
{
	A = UnpackAlbedoGamma2ToLinear(StrataLoadUint1(StrataBuffer, ByteOffset));
}



void PackStrataOut(
	RWByteAddressBuffer StrataBuffer, 
	uint ByteOffset, 
	FStrataData Strata, 
	float3 MeshWorldNormal, 
	float3 V)
{
	// We cannot output (layers x bsdf) information because if we try to load them later, the reserved amount of VGPRS would be crazy high.
	// So instead we simply store a list of BSDF and we allow only up to STRATA_MAX_TOTAL_BSDF of them.
	// For each of the BSDF, we evaluated their final waight according to the material operation performed (layering, mixing, etc.).

	// STRATA_TODO:
	//	- We could clean up irrelevant BSDFs 
	//	- We could generate transmittance BSDFs 

	const float OpaqueBSDFThroughput = 0.0f;
	const float FullThroughput = 1.0f;

	uint BSDFCount = 0;
	float3 Throughput = 1.0f;

	int l;
	for (l = 0; l < Strata.LayerCount; ++l)
	{
		float3 LayerThroughput = 0.0f;
		float3 LayerCoverage = 0.0f;

		for (int i = 0; i < Strata.Layers[l].BSDFCount; ++i)
		{
			FStrataBSDF BSDF = Strata.Layers[l].BSDFs[i];
			const float3 BSDFCoverage = BSDF.Weight;
			BSDFCount++;

			float3 N = MeshWorldNormal;
			switch (BSDF.BSDFType)		// TODO_STRATA: all have a normal, even subsurface?
			{
			case STRATA_BSDF_TYPE_DIFFUSE_ON:
			case STRATA_BSDF_TYPE_DIFFUSE_CHAN:
			{ N = BSDF.Diffuse.Normal; break; }
			case STRATA_BSDF_TYPE_DIELECTRIC:
			{ N = BSDF.Dielectric.Normal; break; }
			case STRATA_BSDF_TYPE_CONDUCTOR:
			{ N = BSDF.Conductor.Normal; break; }
			}
			N = normalize(N);

			// STRATA_TODO apply the same normal transform as for the material

			BxDFContext ContextNoLight = (BxDFContext)0;
			const float3 FakeL = float3(0, 0, 1);
			Init(ContextNoLight, N, V, FakeL);

			switch (BSDF.BSDFType)
			{
			case STRATA_BSDF_TYPE_DIFFUSE_ON:
			{
				LayerCoverage	+= BSDFCoverage;
				LayerThroughput += BSDFCoverage * OpaqueBSDFThroughput;
				break;
			}

			case STRATA_BSDF_TYPE_DIFFUSE_CHAN:
			{
				LayerCoverage	+= BSDFCoverage;
				LayerThroughput += BSDFCoverage * OpaqueBSDFThroughput;
				break;
			}

			case STRATA_BSDF_TYPE_DIELECTRIC:
			{
				float F0 = DielectricIorToF0(BSDF.Dielectric.IOR);
				float3 F = F_Schlick(F0, ContextNoLight.VoH);

				LayerCoverage	+= BSDFCoverage;
				LayerThroughput += BSDFCoverage * (1.0f - F); // STRATA_TODO use 1-FGD instead of simple 1-F, event if we ignore ray scattering/spreading
				break;
			}

			case STRATA_BSDF_TYPE_CONDUCTOR:
			{
				float3 F = F_Schlick(BSDF.Conductor.Reflectivity, BSDF.Conductor.EdgeColor, ContextNoLight.VoH);

				LayerCoverage	+= BSDFCoverage;
				LayerThroughput += BSDFCoverage * OpaqueBSDFThroughput;
				break;
			}

			case STRATA_BSDF_TYPE_VOLUME:
			{
				const float3 Albedo					= BSDF.Volume.Albedo;
				const float3 ExtinctionCoefficients = BSDF.Volume.Extinction;
				const float3 ScatteringCoefficients = Albedo * ExtinctionCoefficients;
				const float3 AbsorptionCoefficients = ExtinctionCoefficients - ScatteringCoefficients;
				const float  Thickness				= BSDF.Volume.Thickness;

				const float3 SafeExtinctionThreshold = 0.000001f;
				const float3 SafeExtinctionCoefficients = max(SafeExtinctionThreshold, ExtinctionCoefficients);

				const float PathLength = Thickness / max(0.0001f, abs(ContextNoLight.NoV));
				const float3 SafePathSegmentTransmittance = exp(-SafeExtinctionCoefficients * PathLength);

				LayerCoverage	+= BSDFCoverage;
				LayerThroughput += BSDFCoverage * SafePathSegmentTransmittance;
				break;
			}
			} // switch

			// Update the weights to take into account throughput towards the view from layers above
			Strata.Layers[l].BSDFs[i].Weight *= Throughput;
		}

		// Take into account the non covered part for this layer and update throughput accordingly
		LayerThroughput += (1.0 - saturate(LayerCoverage)) * FullThroughput;

		// And combine this layer throughtput with he material throughput
		Throughput *= LayerThroughput;
	}


	// Now write out the BSDFs

	BSDFCount = min(BSDFCount, uint(STRATA_MAX_TOTAL_BSDF));
	STRATA_STORE_UINT1(BSDFCount);

	BSDFCount = 0;
	for (l = 0; l < Strata.LayerCount; ++l)
	{
		FStrataLayer Layer = Strata.Layers[l];

		for (int i = 0; i < Layer.BSDFCount; ++i)
		{
			FStrataBSDF BSDF = Layer.BSDFs[i];

			STRATA_STORE_UINT2(PackR16G16B16A16F(float4(BSDF.Weight, BSDF.BSDFType)));

			switch (BSDF.BSDFType)
			{
			case STRATA_BSDF_TYPE_DIFFUSE_ON:
			case STRATA_BSDF_TYPE_DIFFUSE_CHAN:
			{
				STRATA_STORE_UINT1(PackAlbedoLinearToGamma2(BSDF.Diffuse.Albedo));
				STRATA_STORE_UINT2(PackR16G16B16A16F(float4(BSDF.Diffuse.Normal, BSDF.Diffuse.Roughness)));
				// 12 bytes
			}
			break;
			case STRATA_BSDF_TYPE_DIELECTRIC: //
			{
				STRATA_STORE_UINT1(PackR11G11B10F(BSDF.Dielectric.Tint));
				STRATA_STORE_UINT1(PackR11G11B10F(float3(BSDF.Dielectric.Roughness, BSDF.Dielectric.IOR)));
				STRATA_STORE_UINT2(PackR16G16B16A16F(float4(BSDF.Dielectric.Normal, 0.0f)));
				// 16 bytes
			}
			break;
			case STRATA_BSDF_TYPE_CONDUCTOR:
			{
				STRATA_STORE_UINT2(PackR16G16B16A16F(float4(BSDF.Conductor.Reflectivity, BSDF.Conductor.Roughness.x)));
				STRATA_STORE_UINT2(PackR16G16B16A16F(float4(BSDF.Conductor.EdgeColor, BSDF.Conductor.Roughness.y)));
				STRATA_STORE_UINT2(PackR16G16B16A16F(float4(BSDF.Conductor.Normal, 0.0f)));
				// 24 bytes
			}
			break;
			case STRATA_BSDF_TYPE_VOLUME:
			{
				STRATA_STORE_UINT1(PackR11G11B10F(BSDF.Volume.Albedo));
				STRATA_STORE_UINT1(PackR11G11B10F(BSDF.Volume.Extinction));
				STRATA_STORE_UINT1(PackR11G11B10F(float3(abs(BSDF.Volume.Anisotropy), BSDF.Volume.Thickness, BSDF.Volume.Anisotropy > 0.0f ? 2.0f : 0.0f)));
				// 12 bytes
			}
			break;
			}

			// Stop writing if above budget.
			BSDFCount++;
			if (BSDFCount >= STRATA_MAX_TOTAL_BSDF)
			{
				return;
			}
		}
	}
}


struct FStrataPixelBSDFs
{
	int BSDFCount;
	FStrataBSDF BSDFs[STRATA_MAX_TOTAL_BSDF];
};

FStrataPixelBSDFs UnpackStrataIn(ByteAddressBuffer StrataBuffer, uint ByteOffset)
{
	FStrataPixelBSDFs PixelBSDFs = (FStrataPixelBSDFs)0;

	STRATA_LOAD_UINT1(PixelBSDFs.BSDFCount);
	PixelBSDFs.BSDFCount = min(PixelBSDFs.BSDFCount, STRATA_MAX_TOTAL_BSDF);	// To make the compiler happy with unrolling

	float DummyFloat = 0.0f;

	UNROLL
	for (int i = 0; i < PixelBSDFs.BSDFCount; ++i)
	{
		{
			float4 temp4  = UnpackR16G16B16A16F(StrataLoadUint2(StrataBuffer, ByteOffset));
			PixelBSDFs.BSDFs[i].Weight   = temp4.xyz;
			PixelBSDFs.BSDFs[i].BSDFType = int(temp4.a);
		}

		switch (PixelBSDFs.BSDFs[i].BSDFType)
		{
		case STRATA_BSDF_TYPE_DIFFUSE_ON:
		case STRATA_BSDF_TYPE_DIFFUSE_CHAN:
		{
			StrataLoad_AlbedoGamma2ToLinear	(StrataBuffer, ByteOffset, PixelBSDFs.BSDFs[i].Diffuse.Albedo);
			StrataLoad_R16G16B16F_A16F		(StrataBuffer, ByteOffset, PixelBSDFs.BSDFs[i].Diffuse.Normal,			PixelBSDFs.BSDFs[i].Diffuse.Roughness);
		}
		break;
		case STRATA_BSDF_TYPE_DIELECTRIC:
		{
			StrataLoad_R11G11B10F			(StrataBuffer, ByteOffset, PixelBSDFs.BSDFs[i].Dielectric.Tint);
			StrataLoad_R11G11_B10F			(StrataBuffer, ByteOffset, PixelBSDFs.BSDFs[i].Dielectric.Roughness,	PixelBSDFs.BSDFs[i].Dielectric.IOR);
			StrataLoad_R16G16B16F_A16F		(StrataBuffer, ByteOffset, PixelBSDFs.BSDFs[i].Dielectric.Normal,		DummyFloat);
		}
		break;
		case STRATA_BSDF_TYPE_CONDUCTOR:
		{
			StrataLoad_R16G16B16F_A16F		(StrataBuffer, ByteOffset, PixelBSDFs.BSDFs[i].Conductor.Reflectivity,	PixelBSDFs.BSDFs[i].Conductor.Roughness.x);
			StrataLoad_R16G16B16F_A16F		(StrataBuffer, ByteOffset, PixelBSDFs.BSDFs[i].Conductor.EdgeColor,		PixelBSDFs.BSDFs[i].Conductor.Roughness.y);
			StrataLoad_R16G16B16F_A16F		(StrataBuffer, ByteOffset, PixelBSDFs.BSDFs[i].Conductor.Normal,		DummyFloat);
		}
		break;
		case STRATA_BSDF_TYPE_VOLUME:
		{
			StrataLoad_R11G11B10F			(StrataBuffer, ByteOffset, PixelBSDFs.BSDFs[i].Volume.Albedo);
			StrataLoad_R11G11B10F			(StrataBuffer, ByteOffset, PixelBSDFs.BSDFs[i].Volume.Extinction);

			float SignOfAnisotropy = 0.0f;
			StrataLoad_R11_G11_B10F			(StrataBuffer, ByteOffset, PixelBSDFs.BSDFs[i].Volume.Anisotropy, PixelBSDFs.BSDFs[i].Volume.Thickness, SignOfAnisotropy);
			PixelBSDFs.BSDFs[i].Volume.Anisotropy *= (SignOfAnisotropy - 1.0f);
		}
		break;
		}
	}

	return PixelBSDFs;
}


