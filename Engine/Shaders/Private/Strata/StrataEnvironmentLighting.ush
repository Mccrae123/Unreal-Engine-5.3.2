// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

// Env. lighting evaluation for strata material.
// Unpack BSDF on-the-fly
float3 StrataEnvironmentLighting(
	float2 BufferUV,
	FGBufferData GBuffer,
	float3 WorldPosition,
	float3 CameraToPixel,
	float3 V,
	float AmbientOcclusion,
	ByteAddressBuffer StrataDataBuffer,
	uint PixelStrataDataByteOffset)
{
	FStrataPixelHeader Header = UnpackStrataHeaderIn(StrataDataBuffer, PixelStrataDataByteOffset);

	float3 SkyLighting = 0;
	for (uint BSDFIndex = 0; BSDFIndex < Header.BSDFCount; ++BSDFIndex)
	{
		const FStrataBSDF BSDF = UnpackStrataBSDFIn(StrataDataBuffer, PixelStrataDataByteOffset);
		const float3 BSDFThroughput = BSDF.Weight;

		// Create the BSDF context
		const float3 UnusedL = float3(0.0f, 0.0f, 1.0f);
		FStrataBSDFContext StrataBSDFContext = StrataCreateBSDFContext(Header.SharedNormals, BSDF, V, UnusedL);

		// Evaluate environment lighting
		const bool bEnableSpecular = ReflectionStruct.SkyLightParameters.y > 0.0f;
		FStrataEnvLightResult StrataEnvLight = StrataEvaluateForEnvLight(StrataBSDFContext, bEnableSpecular);

		// Diffuse component
		if (any(StrataEnvLight.DiffuseAlbedo > 0.0f))
		{
			// Apply bent normal if needed
			#if APPLY_SKY_SHADOWING
			{
				StrataEnvLight.DiffuseNormal = UpsampleDFAO(BufferUV, GBuffer.Depth, StrataEnvLight.DiffuseNormal); // Bent normal
			}
			#endif

			// Compute the common sky visibility factors
			FSkyLightVisibilityData SkyVisData = GetSkyLightVisibilityData(GBuffer, AmbientOcclusion, StrataEnvLight.DiffuseNormal);

			// Finally sample the sky diffuse contribution (spherical harmonic, Lambert BRDF)
			float3 DiffuseLookup = GetSkySHDiffuse(StrataEnvLight.DiffuseNormal) * View.SkyLightColor.rgb;			// STRATA_TODO compute SH coefficients for ON or Chan
			// And accumulate
			SkyLighting += BSDFThroughput * (SkyVisData.SkyDiffuseLookUpMul * DiffuseLookup + SkyVisData.SkyDiffuseLookUpAdd) * StrataEnvLight.DiffuseAlbedo;
		}

		// Specular component
		if (any(StrataEnvLight.SpecularWeight > 0.0f))
		{
			float SkyAverageBrightness = 1.0f;
			const float3 SpecularLuminance = GetSkyLightReflection(StrataEnvLight.SpecularDirection, StrataEnvLight.SpecularSafeRoughness, SkyAverageBrightness);

			SkyLighting += BSDFThroughput * SpecularLuminance * StrataEnvLight.SpecularWeight * View.SkyLightColor.rgb * AmbientOcclusion;
		}

	}
#if USE_PREEXPOSURE
	SkyLighting *= View.PreExposure;
#endif
	return SkyLighting;
}

