// Copyright Epic Games, Inc. All Rights Reserved.

#define PATH_TRACING 1
#define SCENE_TEXTURES_DISABLED 1 // Ray tracing shaders cannot access scene textures

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/RayTracing/RayTracingCommon.ush"

#define DecalTilePosition RayTracingDecalParameters.DecalTilePosition
#define WorldToDecal RayTracingDecalParameters.WorldToDecal
#define SvPositionToDecal WorldToDecal
#define DecalToWorld RayTracingDecalParameters.DecalToWorld
#define DecalToWorldInvScale RayTracingDecalParameters.DecalToWorldInvScale
#define DecalOrientation RayTracingDecalParameters.DecalOrientation
#define DecalParams RayTracingDecalParameters.DecalParams
#define DecalWriteFlags RayTracingDecalParameters.DecalWriteFlags

#define DECAL_WRITE_BASE_COLOR_FLAG						(1 << 0)
#define DECAL_WRITE_NORMAL_FLAG							(1 << 1)
#define DECAL_WRITE_ROUGHNESS_SPECULAR_METALLIC_FLAG	(1 << 2)
#define DECAL_WRITE_EMISSIVE_FLAG						(1 << 3)
#define DECAL_WRITE_AMBIENT_OCCLUSION_FLAG				(1 << 4)

// DECAL_PRIMITIVE informs material templates which functions to expose when rendering decals.
#define DECAL_PRIMITIVE 1
#include "/Engine/Generated/Material.ush"   

RAY_TRACING_ENTRY_CALLABLE(RayTracingDecalMaterialShader,
	FDecalCallableShaderParams, Params)
{
	ResolvedView = ResolveView();

	const float3 TranslatedWorldPosition = Params.TranslatedWorldPosition_MetallicSpecularRoughnessAO.xyz;

	float4 DecalPos = mul(float4(TranslatedWorldPosition.xyz, 1), WorldToDecal);

	if (any(abs(DecalPos.xyz) > 1))
	{
		// clip content outside the decal
		return;
	}

	float3 CameraVector = normalize(PrimaryView.TranslatedWorldCameraOrigin - TranslatedWorldPosition.xyz);

	// can be optimized
	float3 DecalVector = DecalPos.xyz * 0.5f + 0.5f;

	// Swizzle so that DecalVector.xy are perpendicular to the projection direction and DecalVector.z is distance along the projection direction
	float3 SwizzlePos = DecalVector.zyx;

	// By default, map textures using the vectors perpendicular to the projection direction
	float2 DecalUVs = SwizzlePos.xy;

	FMaterialPixelParameters MaterialParameters = MakeInitializedMaterialPixelParameters();
#if NUM_MATERIAL_TEXCOORDS
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS; CoordinateIndex++)
	{
		MaterialParameters.TexCoords[CoordinateIndex] = DecalUVs;
	}
#endif
	MaterialParameters.TwoSidedSign = 1;
	MaterialParameters.VertexColor = 1;
	MaterialParameters.CameraVector = CameraVector;
	MaterialParameters.SvPosition = 0.0f; // TODO
	MaterialParameters.ScreenPosition = 0.0f; // TODO
	MaterialParameters.LightVector = SwizzlePos;

	MaterialParameters.AbsoluteWorldPosition = MaterialParameters.WorldPosition_NoOffsets = LWCSubtract(TranslatedWorldPosition.xyz, PrimaryView.PreViewTranslation);
	MaterialParameters.WorldPosition_CamRelative = MaterialParameters.WorldPosition_NoOffsets_CamRelative = TranslatedWorldPosition.xyz;

	FPixelMaterialInputs PixelMaterialInputs;
	CalcPixelMaterialInputs(MaterialParameters, PixelMaterialInputs);

	const float DecalFading = saturate(4 - 4 * abs(SwizzlePos.z * 2 - 1)) * DecalParams.x;
	Params.Color.a = GetMaterialOpacity(PixelMaterialInputs) * DecalFading;

	if (DecalWriteFlags & DECAL_WRITE_BASE_COLOR_FLAG)
	{
		Params.Color.rgb = GetMaterialBaseColor(PixelMaterialInputs);
	}

	if (DecalWriteFlags & DECAL_WRITE_NORMAL_FLAG)
	{
		Params.WorldNormal.rgb = MaterialParameters.WorldNormal;
	}

	if (DecalWriteFlags & DECAL_WRITE_ROUGHNESS_SPECULAR_METALLIC_FLAG)
	{
		Params.TranslatedWorldPosition_MetallicSpecularRoughnessAO.r = GetMaterialMetallic(PixelMaterialInputs);
		Params.TranslatedWorldPosition_MetallicSpecularRoughnessAO.g = GetMaterialSpecular(PixelMaterialInputs);
		Params.TranslatedWorldPosition_MetallicSpecularRoughnessAO.b = GetMaterialRoughness(PixelMaterialInputs);
	}
	else
	{
		Params.TranslatedWorldPosition_MetallicSpecularRoughnessAO.r = -1;
		Params.TranslatedWorldPosition_MetallicSpecularRoughnessAO.g = -1;
		Params.TranslatedWorldPosition_MetallicSpecularRoughnessAO.b = -1;
	}

	if (DecalWriteFlags & DECAL_WRITE_AMBIENT_OCCLUSION_FLAG)
	{
		Params.TranslatedWorldPosition_MetallicSpecularRoughnessAO.a = GetMaterialAmbientOcclusion(PixelMaterialInputs);
	}
	else
	{
		Params.TranslatedWorldPosition_MetallicSpecularRoughnessAO.a = -1;
	}

	if (DecalWriteFlags & DECAL_WRITE_EMISSIVE_FLAG)
	{
		Params.Emissive = GetMaterialEmissive(PixelMaterialInputs);
	}
}
