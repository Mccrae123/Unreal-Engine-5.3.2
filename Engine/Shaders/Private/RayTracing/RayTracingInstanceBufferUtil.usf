// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
	RayTracingInstanceCopy.usf: Build ray tracing instances in the GPU 
===============================================================================================*/

#include "RayTracingCommon.ush"
//#include "../SceneData.ush"
#include "../Common.ush"

#ifndef THREADGROUP_SIZE
#define THREADGROUP_SIZE 1
#endif

struct FRayTracingInstanceDescriptorInput
{
	uint TransformIndex;
	uint OutputDescriptorIndex;
	uint AccelerationStructureIndex;
	uint InstanceId;
	uint InstanceMaskAndFlags;
	uint InstanceContributionToHitGroupIndex;
};

uint NumInstances;
uint InputDescOffset;

RWStructuredBuffer<FRayTracingInstanceDescriptor> InstancesDescriptors;

StructuredBuffer<FRayTracingInstanceDescriptorInput> InputInstanceDescriptors;
ByteAddressBuffer AccelerationStructureAddresses;
// Transforms are float3x4 row-major matrices stored as 3 float4
// because of FXC matrix packing issues when using StructuredBuffer<float3x4>
StructuredBuffer<float4> InstanceTransforms;

[numthreads(THREADGROUP_SIZE, 1, 1)]
void RayTracingBuildInstanceBufferCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	uint Index = DispatchThreadId.x;

	if (Index < NumInstances)
	{
		FRayTracingInstanceDescriptorInput InputDesc = InputInstanceDescriptors[InputDescOffset + Index];

		//FInstanceSceneData InstanceSceneData = GetInstanceSceneData(InputDesc.GPUSceneInstanceIndex, View.InstanceSceneDataSOAStride);
		//float4x4 LocalToWorld = InstanceSceneData.LocalToWorld;

		float3x4 LocalToWorld;
		LocalToWorld[0] = InstanceTransforms[InputDesc.TransformIndex * 3 + 0];
		LocalToWorld[1] = InstanceTransforms[InputDesc.TransformIndex * 3 + 1];
		LocalToWorld[2] = InstanceTransforms[InputDesc.TransformIndex * 3 + 2];

		uint2 BlasAddress = 0;

		if (InputDesc.AccelerationStructureIndex != 0xFFFFFFFF)
		{
			BlasAddress = AccelerationStructureAddresses.Load2(InputDesc.AccelerationStructureIndex * 8);
		}

		InstancesDescriptors[InputDesc.OutputDescriptorIndex] = BuildPlatformRayTracingInstanceDesc(
			InputDesc.InstanceMaskAndFlags & 0xFF,
			InputDesc.InstanceId,
			TranslateRayTracingInstanceFlags((InputDesc.InstanceMaskAndFlags >> 8) & 0xFF),
			InputDesc.InstanceContributionToHitGroupIndex,
			LocalToWorld,
			BlasAddress);
	}
}
