// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	VFXTraceRay.ush: VFX Specific ray tracing utilities.
=============================================================================*/

#pragma once

#ifndef VFX_TRACE_RAY_USH_INCLUDED
#define VFX_TRACE_RAY_USH_INCLUDED

#include "RayTracingCommon.ush"
#include "RayTracingHitGroupCommon.ush"


#ifdef OVERRIDE_VFXTRACERAY_USH
#include "/Platform/Private/VFXTraceRay.ush"
#else // OVERRIDE_VFXTRACERAY_USH


float3 GetWorldNormalCommon(FVFXTracePayload Payload)
{
	FTriangleBaseAttributes Tri = LoadTriangleBaseAttributes(PrimitiveIndex());

	float3 LocalPosition = (1.0f - Payload.Barycentrics.x - Payload.Barycentrics.y) * Tri.LocalPositions[0]
		+ Payload.Barycentrics.x * Tri.LocalPositions[1]
		+ Payload.Barycentrics.y * Tri.LocalPositions[2];

	float3 LocalEdges[2] = { Tri.LocalPositions[1] - Tri.LocalPositions[0], Tri.LocalPositions[2] - Tri.LocalPositions[0] };
	float3 LocalNormal = cross(LocalEdges[1], LocalEdges[0]);
	float3x3 InverseTranspose3x3 = transpose((float3x3)WorldToObject4x3());

	return normalize(mul(LocalNormal, InverseTranspose3x3));
}

void InitVFXTracePayloadFromHitShader(FDefaultAttributes Attributes, out FVFXTracePayload OutPayload)
{
	OutPayload.HitT = RayTCurrent();
	OutPayload.PrimitiveIndex = GetInstanceUserData();
	OutPayload.InstanceIndex = InstanceIndex() - GetBaseInstanceIndex();
	OutPayload.Barycentrics = Attributes.Barycentrics;

	OutPayload.WorldPosition = WorldRayOrigin() + WorldRayDirection() * RayTCurrent();

	OutPayload.WorldNormal = GetWorldNormalCommon(OutPayload);
}

#define VFX_TRACE_RAY(TLAS, RayFlags, InstanceInclusionMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToShaderIndex, MissShaderIndex, Ray, Payload)\
		TraceRay(TLAS, RayFlags, InstanceInclusionMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToShaderIndex, MissShaderIndex, Ray, Payload);

#endif //#ifndef UE_TRACE_RAY

#endif // UE_TRACE_RAY_USH_INCLUDED // Workarround for UE-66460
