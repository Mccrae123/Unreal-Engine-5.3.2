// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	LumenCardBVHCulling.usf
=============================================================================*/

RWBuffer<uint> RWBVHQueryArray;
RWBuffer<uint> RWBVHQueryNum;

RWBuffer<uint> RWCulledCardLinkHeadGrid;
RWBuffer<uint> RWCulledCardLinkData;
RWBuffer<uint> RWCulledCardLinkNext;

Buffer<uint> InputBVHQueryArray;
Buffer<uint> InputBVHQueryNum;

uint NumCullGridCells;
uint MaxCulledCardLinks;
uint MaxBVHQueries;

[numthreads(THREADGROUP_SIZE, 1, 1)]
void BVHCullingCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	uint CullGridCellIndex = NumCullGridCells;
	uint BVHNodeId = INVALID_BVH_NODE_ID;

#if FIRST_PASS
	CullGridCellIndex = GroupId.x;
	BVHNodeId = 0;
#else
	uint BVHQueryIndex = GroupId.x;
	uint NumBVHQueries = InputBVHQueryNum[0];
	if (BVHQueryIndex < NumBVHQueries)
	{
		uint PackedQuery = InputBVHQueryArray[BVHQueryIndex];
		CullGridCellIndex = PackedQuery >> 16;
		BVHNodeId = PackedQuery & 0xFFFF;
	}
#endif

	if (CullGridCellIndex < NumCullGridCells)
	{
		uint BVHNodeChildIndex = GroupThreadId.x;

		uint3 CullGridPos;
		CullGridPos.x = CullGridCellIndex % CullGridSize.x;
		CullGridPos.y = (CullGridCellIndex / CullGridSize.x) % CullGridSize.y;
		CullGridPos.z = CullGridCellIndex / (CullGridSize.x * CullGridSize.y);

		FLumenCardBVHNodeData BVHNode = GetLumenCardBVHNodeData(BVHNodeId, BVHNodeChildIndex);
		if (BVHCullingNodeTest(BVHNode, CullGridPos))
		{
			if (BVHNode.ChildId != INVALID_BVH_NODE_ID)
			{
				uint NextQueryId;
				InterlockedAdd(RWBVHQueryNum[0], 1, NextQueryId);
				if (NextQueryId < MaxBVHQueries)
				{
					RWBVHQueryArray[NextQueryId] = (CullGridCellIndex << 16) | BVHNode.ChildId;
				}
			}

			if (BVHNode.LumenCardId != INVALID_PROXY_CARD_ID)
			{
				uint NextLink;
				InterlockedAdd(RWCulledCardLinkNext[0], 1U, NextLink);

				if (NextLink < MaxCulledCardLinks)
				{
					uint PreviousLink;
					InterlockedExchange(RWCulledCardLinkHeadGrid[CullGridCellIndex], NextLink, PreviousLink);
					RWCulledCardLinkData[NextLink * CULLED_CARD_LINK_STRIDE + 0] = BVHNode.LumenCardId;
					RWCulledCardLinkData[NextLink * CULLED_CARD_LINK_STRIDE + 1] = PreviousLink;
				}
			}
		}
	}
}