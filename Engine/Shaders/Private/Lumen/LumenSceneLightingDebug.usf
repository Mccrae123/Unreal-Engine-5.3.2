// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	LumenCardSceneLightingDebug.usf
=============================================================================*/

#include "../Common.ush"
#include "../ShaderPrintCommon.ush"
#include "LumenCardCommon.ush"
#include "LumenCardTile.ush"
#include "LumenSceneLighting.ush"

uint LightingStatMode;
StructuredBuffer<uint> PriorityHistogram;
StructuredBuffer<uint> MaxUpdateBucket;
StructuredBuffer<uint> CardPageTileAllocator;
StructuredBuffer<uint> DirectLightingCardPageIndexAllocator;
StructuredBuffer<uint> IndirectLightingCardPageIndexAllocator;

void LumenSceneLightingStats(uint CardUpdateContext, StructuredBuffer<uint> CardPageIndexAllocator)
{
	float2 Origin = float2(0.1, 0.1);
	float2 TextPos = Origin;

	TextPos = ShaderPrintNewline(TextPos);

	[loop]
	for (uint BucketIndex = 0; BucketIndex < PRIORITY_HISTOGRAM_SIZE; ++BucketIndex)
	{
		TextPos = ShaderPrint(TextPos, PriorityHistogram[CardUpdateContext * PRIORITY_HISTOGRAM_SIZE + BucketIndex]);

		if ((BucketIndex + 1) % 8 == 0)
		{
			TextPos = ShaderPrintNewline(TextPos);
		}
		else
		{
			TextPos = ShaderPrintSymbol(TextPos, _SPC_);
		}
	}

	const uint MaxUpdateBucketIndex = MaxUpdateBucket[MAX_UPDATE_BUCKET_STRIDE * CardUpdateContext + 0];
	const uint MaxUpdateBucketMaxTiles = MaxUpdateBucket[MAX_UPDATE_BUCKET_STRIDE * CardUpdateContext + 1];

	TextPos = ShaderPrintSymbol(TextPos, _M_);
	TextPos = ShaderPrintSymbol(TextPos, _B_);
	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrint(TextPos, MaxUpdateBucketIndex);
	TextPos = ShaderPrintNewline(TextPos);

	TextPos = ShaderPrintSymbol(TextPos, _M_);
	TextPos = ShaderPrintSymbol(TextPos, _T_);
	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrint(TextPos, MaxUpdateBucketMaxTiles);
	TextPos = ShaderPrintNewline(TextPos);

	TextPos = ShaderPrintSymbol(TextPos, _O_);
	TextPos = ShaderPrintSymbol(TextPos, _U_);
	TextPos = ShaderPrintSymbol(TextPos, _T_);
	TextPos = ShaderPrintNewline(TextPos);

	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrintSymbol(TextPos, _P_);
	TextPos = ShaderPrintSymbol(TextPos, _A_);
	TextPos = ShaderPrintSymbol(TextPos, _G_);
	TextPos = ShaderPrintSymbol(TextPos, _E_);
	TextPos = ShaderPrintSymbol(TextPos, _S_);
	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrint(TextPos, CardPageIndexAllocator[0]);

	TextPos = ShaderPrintNewline(TextPos);
	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrintSymbol(TextPos, _T_);
	TextPos = ShaderPrintSymbol(TextPos, _I_);
	TextPos = ShaderPrintSymbol(TextPos, _L_);
	TextPos = ShaderPrintSymbol(TextPos, _E_);
	TextPos = ShaderPrintSymbol(TextPos, _S_);
	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrint(TextPos, CardPageTileAllocator[CARD_PAGE_TILE_ALLOCATOR_STRIDE * CardUpdateContext + 0]);
}

/** 
 * Print out various stats for debugging surface cache updates
 */
[numthreads(1, 1, 1)]
void LumenSceneLightingStatsCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	if (LightingStatMode == 1)
	{
		LumenSceneLightingStats(CARD_UPDATE_CONTEXT_DIRECT_LIGHTING, DirectLightingCardPageIndexAllocator);
	}
	else
	{
		LumenSceneLightingStats(CARD_UPDATE_CONTEXT_INDIRECT_LIGHTING, IndirectLightingCardPageIndexAllocator);
	}
}