// Copyright Epic Games, Inc. All Rights Reserved.

#ifndef VIRTUAL_SHADOW_MAP
	#define VIRTUAL_SHADOW_MAP 0
#endif
#ifndef DENSE_SHADOW_MAP
	#define DENSE_SHADOW_MAP 0
#endif
#ifndef THREADGROUP_SIZE
	#define THREADGROUP_SIZE 1
#endif

#include "../Common.ush"
#include "LumenCardCommon.ush"
#include "LumenCardTile.ush"
#define SUPPORT_CONTACT_SHADOWS 0
#include "../DeferredLightingCommon.ush"
#include "../VolumeLightingCommon.ush"
#include "../ForwardShadowingCommon.ush"
#include "../LightGridCommon.ush"
#if VIRTUAL_SHADOW_MAP
#include "../VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
#endif
#define DISTANCE_FIELD_IN_VIEW_UB 1
#define DF_SHADOW_QUALITY 2
#include "LumenTracingCommon.ush"
#include "../DistanceFieldShadowingShared.ush"
#include "LumenSceneDirectLighting.ush"

// Bias
float ShadowMapSamplingBias;
float VirtualShadowMapSamplingBias;
float HeightfieldShadowRayBias;
float MeshSDFShadowRayBias;
float GlobalSDFShadowRayBias;
float HeightfieldShadowReceiverBias;

int VirtualShadowMapId;

// Debug variables
uint ForceShadowMaps;
uint ForceOffscreenShadowing;

// Workaround for a console shader compiler bug generating incorrect code. Likely can be removed in next SDK.
uint DummyZeroForFixingShaderCompilerBug;

StructuredBuffer<uint2> LightTiles;
StructuredBuffer<uint> LightTileAllocator;
StructuredBuffer<uint> LightTileOffsetsPerLight;
uint LightIndex;
uint ViewIndex;
uint NumViews;

RWStructuredBuffer<uint> RWShadowTraces;
RWStructuredBuffer<uint> RWShadowTraceAllocator;

#if THREADGROUP_SIZE_32
	#define THREADGROUP_SIZE_X 8
	#define THREADGROUP_SIZE_Y 4
#else
	#define THREADGROUP_SIZE_X 8
	#define THREADGROUP_SIZE_Y 8
#endif

groupshared uint SharedNumShadowTraces;
groupshared uint SharedShadowTraces[THREADGROUP_SIZE_X * THREADGROUP_SIZE_Y];
groupshared uint SharedGlobalShadowTraceOffset;

// 2 bits per texel
groupshared uint SharedShadowMask[(2 * THREADGROUP_SIZE_X * THREADGROUP_SIZE_Y) / 32];

void ReadSharedShadowMaskRay(uint2 CoordInCardTile, inout FShadowMaskRay ShadowMaskRay)
{
	uint BitOffset = 2 * (CoordInCardTile.x + CoordInCardTile.y * CARD_TILE_SIZE);

	uint ShadowMask = SharedShadowMask[BitOffset / 32];
	ShadowMask = (ShadowMask >> (BitOffset % 32)) & 0x3;

	ShadowMaskRay.ShadowFactor = ShadowMask & 0x1 ? 0.0f : 1.0f;
	ShadowMaskRay.bShadowFactorComplete = ShadowMask & 0x2 ? true : false;
}

void WriteSharedShadowMaskRay(FShadowMaskRay Ray, uint2 CoordInCardTile)
{
	if (Ray.bShadowFactorComplete)
	{
		uint Mask = 0;
		if (Ray.ShadowFactor <= 0.5f)
		{
			// Set first bit
			Mask |= 0x1;
		}
		if (Ray.bShadowFactorComplete)
		{
			// Set second bit
			Mask |= 0x2;
		}

		uint BitOffset = 2 * (CoordInCardTile.x + CoordInCardTile.y * CARD_TILE_SIZE);
		InterlockedOr(SharedShadowMask[BitOffset / 32], Mask << (BitOffset % 32));
	}
}

#ifdef LIGHT_TYPE
[numthreads(THREADGROUP_SIZE_X, THREADGROUP_SIZE_Y, 1)]
void LumenSceneDirectLightingSampleShadowMapCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	uint LinearGroupThreadId = GroupThreadId.x + GroupThreadId.y * THREADGROUP_SIZE_X;

#if THREADGROUP_SIZE_32
	uint LocalLightTileIndex = GroupId.x / 2;
	uint2 CoordInCardTile = GroupThreadId.xy + uint2(0, GroupId.x % 2 ? 0 : 4);
	uint ShadowMaskSize = 2;
	uint ShadowMaskOffset = GroupId.x % 2 ? 0 : 1;
#else
	uint LocalLightTileIndex = GroupId.x;
	uint2 CoordInCardTile = GroupThreadId.xy;
	uint ShadowMaskSize = 4;
	uint ShadowMaskOffset = 0;
#endif

	if (GroupThreadId.x < ShadowMaskSize && GroupThreadId.y == 0)
	{
		SharedShadowMask[GroupThreadId.x] = 0;
	}

	if (all(GroupThreadId.xy == 0))
	{
		SharedNumShadowTraces = 0;
		SharedGlobalShadowTraceOffset = 0;
		SharedShadowTraces[0] = 0;
	}

	GroupMemoryBarrierWithGroupSync();

	uint LightTileIndex = LocalLightTileIndex + LightTileOffsetsPerLight[LightIndex * NumViews + ViewIndex];
	FLightTile LightTile = UnpackLightTile(LightTiles[LightTileIndex]);
	uint2 TexelInCardPageCoord = LightTile.TileCoord * CARD_TILE_SIZE + CoordInCardTile;

	FLumenCardPageData CardPage = GetLumenCardPageData(LightTile.CardPageIndex + DummyZeroForFixingShaderCompilerBug);
	float2 AtlasUV = CardPage.PhysicalAtlasUVRect.xy + CardPage.PhysicalAtlasUVTexelScale * (TexelInCardPageCoord + 0.5f);
	float2 CardUV = CardPage.CardUVRect.xy + CardPage.CardUVTexelScale * (TexelInCardPageCoord + 0.5f);

	FShadowMaskRay ShadowMaskRay;
	ShadowMaskRay.ShadowFactor = 0.0f;
	ShadowMaskRay.bShadowFactorComplete = true;

	FLumenCardData Card = GetLumenCardData(CardPage.CardIndex);
	FLumenSurfaceCacheData SurfaceCacheData = GetSurfaceCacheData(Card, CardUV, AtlasUV);

	if (SurfaceCacheData.bValid)
	{
		FDeferredLightData LightData = LoadLightData(LIGHT_TYPE);
		float3 WorldNormal = SurfaceCacheData.WorldNormal;
		float3 WorldPosition = SurfaceCacheData.WorldPosition;
		float3 TranslatedWorldPosition = WorldPosition + LWCHackToFloat(PrimaryView.PreViewTranslation);

		float3 L = LightData.Direction;
		float3 ToLight = L;

		float CombinedAttenuation = saturate(dot(WorldNormal, L));

#if LIGHT_TYPE != LIGHT_TYPE_DIRECTIONAL
		float LightMask = 1;
		if (LightData.bRadialLight)
		{
			LightMask = GetLocalLightAttenuation(TranslatedWorldPosition, LightData, ToLight, L);
		}

		float Attenuation;

		if (LightData.bRectLight)
		{
			FRect Rect = GetRect(ToLight, LightData);
			Attenuation = IntegrateLight(Rect, InitRectTexture(LightData));
		}
		else
		{
			FCapsuleLight Capsule = GetCapsule(ToLight, LightData);
			Capsule.DistBiasSqr = 0;
			Attenuation = IntegrateLight(Capsule, LightData.bInverseSquared);
		}

		CombinedAttenuation *= Attenuation * LightMask;
#endif

		if (CombinedAttenuation > 0)
		{
			ShadowMaskRay.ShadowFactor = 1.0f;
			ShadowMaskRay.bShadowFactorComplete = false;

			if (ForceOffscreenShadowing == 0)
			{
				ShadowMaskRay.ShadowFactor = 1.0f;
				ShadowMaskRay.bShadowFactorComplete = false;
				bool bVSMValid = false;

				const float4 PostProjectionPosition = mul(float4(WorldPosition, 1.0), LWCHackToFloat(PrimaryView.WorldToClip));
				float ReceiverBias = 0.0f;
				if (Card.bHeightfield)
				{
					float3 WorldCameraOrigin = LWCHackToFloat(PrimaryView.WorldCameraOrigin);
					ReceiverBias = CalculateDistanceBasedHeightfieldBias(HeightfieldShadowReceiverBias, WorldPosition, WorldCameraOrigin);
				}

				// Shadow maps are culled so only query points inside the view frustum are valid
				if (all(and(PostProjectionPosition.xy < PostProjectionPosition.w, PostProjectionPosition.xy > -PostProjectionPosition.w)))
				{
					#if VIRTUAL_SHADOW_MAP
					{
						// Bias only ray start to maximize chances of hitting an allocated page
						FVirtualShadowMapSampleResult VirtualShadowMapSample = SampleVirtualShadowMapLWCHack(VirtualShadowMapId, WorldPosition, VirtualShadowMapSamplingBias + ReceiverBias, WorldNormal);

						bVSMValid = VirtualShadowMapSample.bValid;
						ShadowMaskRay.ShadowFactor = VirtualShadowMapSample.ShadowFactor;
						
						// If there's also a dense shadow map present we need to sample both (unless the VSM determines we are fully shadowed anyways)
						ShadowMaskRay.bShadowFactorComplete = ShadowMaskRay.ShadowFactor < 0.01f;
						#if !DENSE_SHADOW_MAP
						ShadowMaskRay.bShadowFactorComplete = ShadowMaskRay.bShadowFactorComplete || VirtualShadowMapSample.bValid;
						#endif
					}
					#endif

					#if DENSE_SHADOW_MAP
					if (!ShadowMaskRay.bShadowFactorComplete)
					{
						float3 TranslatedWorldPositionForShadowing = GetCardWorldPositionForShadowing(TranslatedWorldPosition, L, WorldNormal, ShadowMapSamplingBias + ReceiverBias);

						#if LIGHT_TYPE == LIGHT_TYPE_DIRECTIONAL
						{
							#if DYNAMICALLY_SHADOWED
							{
								float SceneDepth = dot(TranslatedWorldPositionForShadowing - PrimaryView.TranslatedWorldCameraOrigin, View.ViewForward);

								bool bShadowingFromValidUVArea = false;
								float NewShadowFactor = ComputeDirectionalLightDynamicShadowing(TranslatedWorldPositionForShadowing, SceneDepth, bShadowingFromValidUVArea);

								if (bShadowingFromValidUVArea)
								{
									ShadowMaskRay.ShadowFactor *= NewShadowFactor;
									ShadowMaskRay.bShadowFactorComplete = VIRTUAL_SHADOW_MAP ? bVSMValid : true;
								}
							}
							#endif
						}
						#else
						{
							bool bShadowingFromValidUVArea = false;
							float NewShadowFactor = ComputeVolumeShadowing(TranslatedWorldPositionForShadowing, LightData.bRadialLight && !LightData.bSpotLight, LightData.bSpotLight, bShadowingFromValidUVArea);

							if (bShadowingFromValidUVArea) 
							{
								ShadowMaskRay.ShadowFactor *= NewShadowFactor;
								ShadowMaskRay.bShadowFactorComplete = VIRTUAL_SHADOW_MAP ? bVSMValid : true;
							}
						}
						#endif
					}
					#endif
				}
			}
		}
		else
		{
			ShadowMaskRay.ShadowFactor = 0.0f;
			ShadowMaskRay.bShadowFactorComplete = true;
		}
	}

	if (ForceShadowMaps != 0)
	{
		ShadowMaskRay.bShadowFactorComplete = true;
	}

	WriteSharedShadowMaskRay(ShadowMaskRay, GroupThreadId.xy);

	#if COMPACT_SHADOW_TRACES
	{
		if (!ShadowMaskRay.bShadowFactorComplete)
		{
			uint ShadowTraceIndex = 0;
			InterlockedAdd(SharedNumShadowTraces, 1, ShadowTraceIndex);

			FShadowTrace ShadowTrace;
			ShadowTrace.LightTileIndex = LightTileIndex;
			ShadowTrace.LightTileCoord = CoordInCardTile;

			SharedShadowTraces[ShadowTraceIndex] = PackShadowTrace(ShadowTrace);
		}
	}
	#endif

	GroupMemoryBarrierWithGroupSync();

	#if COMPACT_SHADOW_TRACES
	{
		if (all(GroupThreadId == 0))
		{
			InterlockedAdd(RWShadowTraceAllocator[0], SharedNumShadowTraces, SharedGlobalShadowTraceOffset);
		}
	}
	#endif

	GroupMemoryBarrierWithGroupSync();

	#if COMPACT_SHADOW_TRACES
	{
		if (LinearGroupThreadId < SharedNumShadowTraces)
		{
			RWShadowTraces[SharedGlobalShadowTraceOffset + LinearGroupThreadId] = SharedShadowTraces[LinearGroupThreadId];
		}
	}
	#endif

	if (GroupThreadId.x < ShadowMaskSize && GroupThreadId.y == 0)
	{
		RWShadowMaskTiles[4 * LightTileIndex + 2 * ShadowMaskOffset + GroupThreadId.x] = SharedShadowMask[GroupThreadId.x];
	}
}
#endif

float MaxTraceDistance;
float SDFSurfaceBiasScale;

float ShadowTraceHeightfield(
	float3 WorldRayStart,
	float3 WorldRayDirection,
	float MaxTraceDistance)
{
	float ConeAngle = 0.0f;
	float MinSampleRadius = 0.0f;
	FConeTraceInput ConeTraceInput;
	ConeTraceInput.Setup(
		WorldRayStart,
		WorldRayDirection,
		ConeAngle,
		MinSampleRadius,
		/*MinTraceDistance*/ 0.0f,
		MaxTraceDistance,
		/*StepFactor*/ 1.0f
	);

	uint NumIntersectingObjects = 0;
	uint CulledDataStart = 0;
	GetHeightfieldShadowTileCulledData(WorldRayStart + LWCHackToFloat(PrimaryView.PreViewTranslation), CulledDataStart, NumIntersectingObjects);

	for (uint IndexInCulledList = 0; IndexInCulledList < NumIntersectingObjects; ++IndexInCulledList)
	{
		const uint HeightfieldObjectIndex = HeightfieldShadowTileArrayData.Load(IndexInCulledList + CulledDataStart);
		FLumenHeightfieldData LumenHeightfield = GetLumenHeightfieldData(HeightfieldObjectIndex);
		if (LumenHeightfield.bValid)
		{
			FConeTraceHeightfieldSimpleResult SimpleResult = ConeTraceHeightfieldSimple(ConeTraceInput, HeightfieldObjectIndex);
			if (SimpleResult.bIsHit)
			{
				return 0.0f;
			}
		}
	}

	return 1.0f;
}

float TraceOffscreenShadows(FLumenCardData CardData, float3 WorldPosition, float3 L, float3 ToLight, float3 WorldNormal, bool bLocalLight)
{
	float ShadowFactor = 1.0f;

	// Offscreen shadowing, trace to light
	float TraceDistance = MaxTraceDistance;

	#if LIGHT_TYPE != LIGHT_TYPE_DIRECTIONAL
		TraceDistance = min(length(ToLight), MaxTraceDistance);
	#endif

	#if (LIGHT_TYPE == LIGHT_TYPE_DIRECTIONAL) && (OFFSCREEN_SHADOWING_TRACE_MESH_SDF || OFFSCREEN_SHADOWING_TRACE_HEIGHTFIELDS)
	{
		#if OFFSCREEN_SHADOWING_TRACE_MESH_SDF
		{
			float3 WorldPositionForShadowing = GetCardWorldPositionForShadowing(WorldPosition, L, WorldNormal, MeshSDFShadowRayBias);
			float3 TranslatedWorldRayStart = WorldPositionForShadowing + LWCHackToFloat(PrimaryView.PreViewTranslation);
			float3 TranslatedWorldRayEnd = TranslatedWorldRayStart + L * TraceDistance;

			uint NumIntersectingObjects = GetCulledNumObjects();
			uint CulledDataParameter = 0;
			GetShadowTileCulledData(TranslatedWorldRayStart, CulledDataParameter, NumIntersectingObjects);

			float SubsurfaceDensity = 0;
			bool bUseSubsurfaceTransmission = false;

			ShadowFactor = ShadowRayTraceThroughCulledObjects(
				TranslatedWorldRayStart,
				TranslatedWorldRayEnd,
				TraceDistance,
				0, //@todo - TanLightSourceAngle - causes mismatch with CSM which doesn't support LightSourceAngle
				0,
				100,
				SubsurfaceDensity,
				CulledDataParameter,
				NumIntersectingObjects,
				true,
				true,
				bUseSubsurfaceTransmission,
				/*bExpandSurface*/ true);
		}
		#endif

		#if OFFSCREEN_SHADOWING_TRACE_HEIGHTFIELDS
		{
			float3 WorldPositionForShadowing = GetCardWorldPositionForShadowing(WorldPosition, L, WorldNormal, HeightfieldShadowRayBias * CardData.TexelSize);

			ShadowFactor *= ShadowTraceHeightfield(
				WorldPositionForShadowing,
				L,
				TraceDistance);
		}
		#endif
	}
	#elif OFFSCREEN_SHADOWING_TRACE_GLOBAL_SDF
	{
		FGlobalSDFTraceInput TraceInput = SetupGlobalSDFTraceInput(WorldPosition, L, 0.0f, TraceDistance, 1.0f, 1.0f);

		// Bias away from the starting point on surface
		TraceInput.VoxelSizeRelativeBias = GetCardBiasForShadowing(L, WorldNormal, GlobalSDFShadowRayBias);

		if (bLocalLight)
		{
			// Bias also the end point (local light position) in case if light is near the geometry
			TraceInput.VoxelSizeRelativeRayEndBias = GlobalSDFShadowRayBias;
		}

		FGlobalSDFTraceResult SDFResult = RayTraceGlobalDistanceField(TraceInput);

		//@todo - approximate cone trace from SDF for antialiasing
		ShadowFactor = GlobalSDFTraceResultIsHit(SDFResult) ? 0.0f : 1.0f;
	}
	#endif

	return ShadowFactor;
}

#ifdef LIGHT_TYPE
[numthreads(THREADGROUP_SIZE_X, THREADGROUP_SIZE_Y, 1)]
void LumenSceneDirectLightingTraceDistanceFieldShadowsCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
#if THREADGROUP_SIZE_32
	uint LocalLightTileIndex = GroupId.x / 2;
	uint2 CoordInCardTile = GroupThreadId.xy + uint2(0, GroupId.x % 2 ? 0 : 4);
	uint ShadowMaskSize = 2;
	uint ShadowMaskOffset = GroupId.x % 2 ? 0 : 1;
#else
	uint LocalLightTileIndex = GroupId.x;
	uint2 CoordInCardTile = GroupThreadId.xy;
	uint ShadowMaskSize = 4;
	uint ShadowMaskOffset = 0;
#endif

	uint LightTileIndex = LocalLightTileIndex + LightTileOffsetsPerLight[LightIndex * NumViews + ViewIndex];

	if (GroupThreadId.x < ShadowMaskSize && GroupThreadId.y == 0)
	{
		SharedShadowMask[GroupThreadId.x] = RWShadowMaskTiles[4 * LightTileIndex + 2 * ShadowMaskOffset + GroupThreadId.x];
	}

	GroupMemoryBarrierWithGroupSync();

	FLightTile LightTile = UnpackLightTile(LightTiles[LightTileIndex]);
	uint2 TexelInCardPageCoord = LightTile.TileCoord * CARD_TILE_SIZE + CoordInCardTile;

	FLumenCardPageData CardPage = GetLumenCardPageData(LightTile.CardPageIndex + DummyZeroForFixingShaderCompilerBug);
	float2 AtlasUV = CardPage.PhysicalAtlasUVRect.xy + CardPage.PhysicalAtlasUVTexelScale * (TexelInCardPageCoord + 0.5f);
	float2 CardUV = CardPage.CardUVRect.xy + CardPage.CardUVTexelScale * (TexelInCardPageCoord + 0.5f);

	FShadowMaskRay ShadowMaskRay;
	ReadSharedShadowMaskRay(GroupThreadId.xy, ShadowMaskRay);

	if (!ShadowMaskRay.bShadowFactorComplete)
	{
		FDeferredLightData LightData = LoadLightData(LIGHT_TYPE);

		FLumenCardData CardData = GetLumenCardData(CardPage.CardIndex);
		FLumenSurfaceCacheData SurfaceCacheData = GetSurfaceCacheData(CardData, CardUV, AtlasUV);

		float3 WorldPosition = SurfaceCacheData.WorldPosition;
		float3 WorldNormal = SurfaceCacheData.WorldNormal;

		float3 L = LightData.Direction;
		float3 ToLight = L;
		bool bLocalLight = false;

#if LIGHT_TYPE != LIGHT_TYPE_DIRECTIONAL
		if (LightData.bRadialLight)
		{
			float3 TranslatedWorldPosition = WorldPosition + LWCHackToFloat(PrimaryView.PreViewTranslation);
			ToLight = LightData.TranslatedWorldPosition - TranslatedWorldPosition;
			L = normalize(ToLight);
			bLocalLight = true;
		}
#endif

		ShadowMaskRay.bShadowFactorComplete = true;
		ShadowMaskRay.ShadowFactor = TraceOffscreenShadows(CardData, WorldPosition, L, ToLight, WorldNormal, bLocalLight);

		WriteSharedShadowMaskRay(ShadowMaskRay, GroupThreadId.xy);
	}

	GroupMemoryBarrierWithGroupSync();

	if (GroupThreadId.x < ShadowMaskSize && GroupThreadId.y == 0)
	{
		RWShadowMaskTiles[4 * LightTileIndex + 2 * ShadowMaskOffset + GroupThreadId.x] = SharedShadowMask[GroupThreadId.x];
	}
}
#endif

RWBuffer<uint> RWShadowTraceIndirectArgs;
StructuredBuffer<uint> ShadowTraceAllocator;

[numthreads(THREADGROUP_SIZE, 1, 1)]
void InitShadowTraceIndirectArgsCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	if (all(DispatchThreadId.xyz == 0))
	{
		uint NumShadowTraces = ShadowTraceAllocator[0];

		// One thread per card tile
		RWShadowTraceIndirectArgs[0] = (NumShadowTraces + 64 - 1) / 64;
		RWShadowTraceIndirectArgs[1] = 1;
		RWShadowTraceIndirectArgs[2] = 1;
	}
}