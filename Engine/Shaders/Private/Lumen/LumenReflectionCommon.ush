// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "../MonteCarlo.ush"
#include "../BlueNoise.ush"

#define REFLECTION_THREADGROUP_SIZE_2D 8
#define REFLECTION_THREADGROUP_SIZE_1D 64

uint2 ReflectionTracingViewSize;
uint2 ReflectionTracingBufferSize;

// Downsample factor from full res to tracing res
uint ReflectionDownsampleFactor;

// Note: negative if invalid ray
Texture2D DownsampledDepth;
Texture2D<float4> RayBuffer;

Texture2D<float3> TraceRadiance;
Texture2D<float> TraceHit;

#if 1
	#define SCREEN_TEMPORAL_INDEX			View.StateFrameIndexMod8
#else
	#define SCREEN_TEMPORAL_INDEX			0
#endif

#if 1
	#define RAY_DIRECTION_TEMPORAL_INDEX	View.StateFrameIndex
#else
	#define RAY_DIRECTION_TEMPORAL_INDEX	0
#endif

// Returns the jitter offset in the range [0, ReflectionDownsampleFactor - 1]
float2 GetScreenTileJitter(uint TemporalIndex)
{
	//uint2 RandomSeed = Rand3DPCG16(int3(ReflectionTracingCoord, 1)).xy;
	return floor(Hammersley16(TemporalIndex, 8, uint2(0, 0)) * ReflectionDownsampleFactor);
}

float2 GetScreenUVFromReflectionTracingCoord(uint2 ReflectionTracingCoord)
{
	float2 ScreenCoord = ReflectionTracingCoord * ReflectionDownsampleFactor + View.ViewRectMin.xy + GetScreenTileJitter(SCREEN_TEMPORAL_INDEX) + 0.5f;
	// ScreenUV can be outside of valid viewport, since viewport is downsampled with DivideAndRoundUp
	ScreenCoord = min(ScreenCoord, View.ViewRectMin.xy + View.ViewSizeAndInvSize.xy - 1.0f);
	return ScreenCoord * View.BufferSizeAndInvSize.zw;
}

float2 GetReflectionTracingCoordFromScreenUV(float2 ScreenUV, uint TemporalIndex)
{
	float2 ReflectionTracingCoord = (ScreenUV - (View.ViewRectMin.xy + GetScreenTileJitter(TemporalIndex) + 0.5f) * View.BufferSizeAndInvSize.zw) / (ReflectionDownsampleFactor * View.BufferSizeAndInvSize.zw);
	return ReflectionTracingCoord;
}

float3 GetWorldPositionFromScreenUV(float2 ScreenUV, float SceneDepth)
{
	float2 ScreenPosition = (ScreenUV - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
	float3 WorldPosition = mul(float4(ScreenPosition * SceneDepth, SceneDepth, 1), View.ScreenToWorld).xyz;
	return WorldPosition;
}

float GetMaxHitDistance()
{
	return MaxHalfFloat;
}

float EncodeRayDistance(float HitDistance, bool bHit)
{
	return HitDistance * (bHit ? -1.0f : 1.0f);
}

float DecodeRayDistance(float Encoded, out bool bHit)
{
	bHit = Encoded < 0.0f;
	return abs(Encoded);
}

float DecodeProbeRayDistance(float Encoded)
{
	return abs(Encoded);
}

struct FRayData
{
	float3 Direction;
	float PDF;
	float ConeHalfAngle;
};

FRayData DecodeRayData(float4 PackedRayData)
{
	FRayData RayData;
	RayData.Direction = PackedRayData.xyz;
	RayData.ConeHalfAngle = PackedRayData.w;
	RayData.PDF = 1.0f / max(PackedRayData.w, .00001f);
	return RayData;
}

Buffer<uint> ReflectionTileData;

uint2 GetReflectionScreenCoord(uint TileIndex, uint ThreadIndex)
{
	uint2 TileOffset = uint2(ReflectionTileData[TileIndex] & 0xFFFF, (ReflectionTileData[TileIndex] >> 16) & 0xFFFF);
	return TileOffset * REFLECTION_THREADGROUP_SIZE_2D + uint2(ThreadIndex % REFLECTION_THREADGROUP_SIZE_2D, ThreadIndex / REFLECTION_THREADGROUP_SIZE_2D);
}