// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../DeferredShadingCommon.ush"
#include "../BRDF.ush"
#include "LumenScreenProbeCommon.ush"
#include "../MonteCarlo.ush"
#include "../ShadingModelsSampling.ush"
#include "../SceneTextureParameters.ush"
#include "LumenScreenTracing.ush"

#define IS_SSGI_SHADER 1
#include "../SSRT/SSRTRayCast.ush"

#ifndef THREADGROUP_SIZE
#define THREADGROUP_SIZE 1
#endif


RWTexture2D<UNORM float4> RWScreenBentNormal;
float SlopeCompareToleranceScale;

Texture2D FurthestHZBTexture;
#define FurthestHZBTextureSampler GlobalPointClampedSampler
float4 HZBUvFactorAndInvFactor;

[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void ScreenSpaceBentNormalCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	float2 ScreenUV = float2((DispatchThreadId.xy + .5f) * View.BufferSizeAndInvSize.zw);
	float SceneDepth = CalcSceneDepth(ScreenUV);

	FGBufferData GBufferData = GetGBufferDataUint(DispatchThreadId.xy);

	if (GBufferData.ShadingModelID != SHADINGMODELID_UNLIT)
	{
		float3 TranslatedWorldPosition = GetTranslatedWorldPositionFromScreenUV(ScreenUV, SceneDepth);
		float3x3 TangentBasis = GetTangentBasis(GBufferData.WorldNormal);
		uint2 Seed0 = Rand3DPCG16(int3(DispatchThreadId.xy, GENERAL_TEMPORAL_INDEX)).xy;
		float MaxScreenTraceFraction = ScreenProbeDownsampleFactor * 2 * View.ViewSizeAndInvSize.z;
		float TraceDistance = SceneDepth * MaxScreenTraceFraction * 2.0 * GetTanHalfFieldOfView().x;
		float DepthThresholdScale = HasDistanceFieldRepresentation(ScreenUV) ? 1.0f : ScreenTraceNoFallbackThicknessScale;
		float2 ScreenPosition = (ScreenUV - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
		uint NumPixelSamples = NUM_PIXEL_RAYS;

		float3 UnoccludedSum = 0;
		float3 BentNormal = 0;
		float HitFastMovingSum = 0;

		UNROLL
		for (uint PixelRayIndex = 0; PixelRayIndex < NumPixelSamples; PixelRayIndex++)
		{
			float2 UniformRandom = Hammersley16(PixelRayIndex, NumPixelSamples, Seed0);
			//@todo - other shading models
			float4 HemisphereSample = CosineSampleHemisphere(UniformRandom);
			float3 RayDirection = mul(HemisphereSample.xyz, TangentBasis);
			float DirectionVisible = 1;

			#define TRACE_SCREEN 1
			#if TRACE_SCREEN
			{
				uint NumSteps = 4;
				float StartMipLevel = 0;

				uint2 NoiseCoord = DispatchThreadId.xy * uint2(NumPixelSamples, 1) + uint2(PixelRayIndex, 0);
				float StepOffset = InterleavedGradientNoise(NoiseCoord + 0.5f, 0.0f);

				float RayRoughness = .2f;
		
				FSSRTCastingSettings CastSettings = CreateDefaultCastSettings();
				CastSettings.bStopWhenUncertain = true;

				bool bHit = false;
				float Level;
				float3 HitUVz;
				bool bRayWasClipped;

				FSSRTRay Ray = InitScreenSpaceRayFromWorldSpace(
					TranslatedWorldPosition + LWCHackToFloat(PrimaryView.PreViewTranslation), RayDirection,
					/* WorldTMax = */ TraceDistance,
					/* SceneDepth = */ SceneDepth,
					/* SlopeCompareToleranceScale */ SlopeCompareToleranceScale * DepthThresholdScale,
					/* bExtendRayToScreenBorder = */ false,
					/* out */ bRayWasClipped);

				bool bUncertain;
				float3 DebugOutput;

				CastScreenSpaceRay(
					FurthestHZBTexture, FurthestHZBTextureSampler,
					StartMipLevel,
					CastSettings,
					Ray, RayRoughness, NumSteps, StepOffset - .9f,
					HZBUvFactorAndInvFactor, false,
					/* out */ DebugOutput,
					/* out */ HitUVz,
					/* out */ Level,
					/* out */ bHit,
					/* out */ bUncertain);

				DirectionVisible = bHit && !bUncertain ? 0.0f : 1.0f;

#if CALCULATE_FAST_MOVING
				if (bHit && !bUncertain)
				{
					float2 HitScreenUV = HitUVz.xy;
					float HitDeviceZ = SceneDepthTexture.SampleLevel(GlobalPointClampedSampler, HitScreenUV, 0).r;
					float HitSceneDepth = ConvertFromDeviceZ(HitDeviceZ);
					float2 HitScreenPosition = (HitUVz.xy - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
					float3 HitTranslatedWorldPosition = mul(float4(HitScreenPosition * HitSceneDepth, HitSceneDepth, 1), View.ScreenToTranslatedWorld).xyz;

					float3 HitHistoryScreenPosition = GetHistoryScreenPositionIncludingTAAJitter(HitScreenPosition, HitScreenUV, HitDeviceZ);
					float3 HitWorldVelocity = HitTranslatedWorldPosition - GetTranslatedPrevWorldPosition(HitHistoryScreenPosition);

					float RelativeSpeedDifferenceToConsiderLightingMoving = .005f;
					//float HitFastMoving = abs(length(SourceWorldVelocity) - length(HitWorldVelocity)) / max(HitSceneDepth, 100.0f) > RelativeSpeedDifferenceToConsiderLightingMoving ? 1 : 0;
					float HitFastMoving =  length(HitWorldVelocity) / max(HitSceneDepth, 10.0f) > RelativeSpeedDifferenceToConsiderLightingMoving ? 1 : 0;

					if (length(ScreenPosition - HitScreenPosition) > .01f && (SceneDepth - HitSceneDepth) < .05f * max(SceneDepth, .00001f))
					{
						HitFastMovingSum += HitFastMoving;
					}
				}
#endif
			}
			#endif

			UnoccludedSum += RayDirection;
			BentNormal += RayDirection * DirectionVisible;
		}

		float NormalizeFactor = length(UnoccludedSum);

		if (NormalizeFactor > 0)
		{
			BentNormal /= NormalizeFactor;
		}

		// Debug passthrough
		//BentNormal = GBufferData.WorldNormal;

		float HitFastMoving = HitFastMovingSum / (float)NumPixelSamples;

		RWScreenBentNormal[DispatchThreadId.xy] = float4(BentNormal * .5f + .5f, HitFastMoving);
	}
}