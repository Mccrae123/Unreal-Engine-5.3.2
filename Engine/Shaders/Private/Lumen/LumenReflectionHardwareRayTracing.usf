// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../MonteCarlo.ush"
#include "../SceneTextureParameters.ush"

#include "LumenCardCommon.ush"
#include "LumenTracingCommon.ush"
#include "LumenReflectionCommon.ush"
#include "LumenVisualizeTraces.ush"
#include "LumenRadianceCacheCommon.ush"
#include "LumenHardwareRayTracingPipelineCommon.ush"

#ifndef THREADGROUP_SIZE_2D
#define THREADGROUP_SIZE_2D 8
#endif

#ifndef THREADGROUP_SIZE_1D
#define THREADGROUP_SIZE_1D THREADGROUP_SIZE_2D * THREADGROUP_SIZE_2D
#endif

#define LIGHTING_MODE_SURFACE_CACHE 0
#define LIGHTING_MODE_HIT_LIGHTING 1

Buffer<int> RayAllocator;
Buffer<uint2> TraceTexelDataPacked;
StructuredBuffer<FTraceDataPacked> TraceDataPacked;
RWStructuredBuffer<FTraceDataPacked> RWTraceDataPacked;

RWBuffer<uint> RWHardwareRayTracingIndirectArgs;

[numthreads(1, 1, 1)]
void FLumenReflectionHardwareRayTracingIndirectArgsCS()
{
	RWHardwareRayTracingIndirectArgs[0] = RayAllocator[0];
	RWHardwareRayTracingIndirectArgs[1] = 1;
	RWHardwareRayTracingIndirectArgs[2] = 1;
}

#if LUMEN_HARDWARE_RAYTRACING

float3 FarFieldReferencePos;

#include "LumenHardwareRayTracingCommon.ush"

RaytracingAccelerationStructure TLAS;

uint ThreadCount;
uint GroupCount;
int NearFieldLightingMode;
float MaxTraceDistance;
float FarFieldMaxTraceDistance;
float PullbackBias;
int MaxTranslucentSkipCount;
int ApplySkyLight;

RWTexture2D<float3> RWTraceRadiance;
RWTexture2D<float> RWTraceHit;

RAY_TRACING_ENTRY_RAYGEN(LumenReflectionHardwareRayTracingRGS)
{
	uint ThreadIndex = DispatchRaysIndex().x;
	uint GroupIndex = DispatchRaysIndex().y;

#if DIM_INDIRECT_DISPATCH
	uint Iteration = 0;
	uint DispatchedThreads = RayAllocator[0];
#else
	uint DispatchedThreads = ThreadCount * GroupCount;
	uint IterationCount = (RayAllocator[0] + DispatchedThreads - 1) / DispatchedThreads;
	for (uint Iteration = 0; Iteration < IterationCount; ++Iteration)
#endif
	{
		uint RayIndex = Iteration * DispatchedThreads + GroupIndex * ThreadCount + ThreadIndex;
		if (RayIndex >= RayAllocator[0])
		{
			return;
		}

		uint2 TraceCoord;
		float TraceHitDistance = 0;
		DecodeTraceTexel(TraceTexelDataPacked[RayIndex], TraceCoord, TraceHitDistance);

		float2 ScreenUV = GetScreenUVFromReflectionTracingCoord(TraceCoord);
		float2 ScreenCoord = ScreenUV * View.BufferSizeAndInvSize.xy;
		uint LinearCoord = ScreenCoord.y * View.BufferSizeAndInvSize.x + ScreenCoord.x;

		float SceneDepth = DownsampledDepth.Load(int3(TraceCoord, 0)).x;
		float3 WorldPosition = GetWorldPositionFromScreenUV(ScreenUV, SceneDepth);
		float3 WorldNormal = DecodeNormal(GBufferATexture.Load(int3(ScreenUV * View.BufferSizeAndInvSize.xy, 0)).xyz);

		FRayData RayData = GetRayData(TraceCoord);

		RayDesc Ray;
		Ray.Origin = WorldPosition;
		Ray.Direction = RayData.Direction;
		float RayBias = 0.05;
		Ray.TMin = max(TraceHitDistance - PullbackBias, RayBias);
		Ray.TMax = RayData.TraceDistance;

		float NormalBias = 0.05;
		ApplyPositionBias(Ray.Origin, Ray.Direction, WorldNormal, NormalBias);

		FRayCone RayCone = (FRayCone)0;
		RayCone.SpreadAngle = View.EyeToPixelSpreadAngle;
		RayCone = PropagateRayCone(RayCone, RayData.ConeHalfAngle, SceneDepth);

		const bool bHiResSurface = true;
		const bool bCullBackFacingTriangles = true;
		FRayTracedLightingContext Context = CreateRayTracedLightingContext(TLAS, RayCone, TraceCoord, LinearCoord, bCullBackFacingTriangles, MaxTranslucentSkipCount, bHiResSurface);
		Context.FarFieldMaxTraceDistance = FarFieldMaxTraceDistance;
		Context.FarFieldReferencePos = FarFieldReferencePos;
#if DIM_SPECULAR_OCCLUSION
		Context.bAcceptFirstHitAndEndSearch = true;
		Context.bSkipClosestHitShader = true;
#endif // DIM_SPECULAR_OCCLUSION

#if DIM_LIGHTING_MODE == LIGHTING_MODE_HIT_LIGHTING
		FTraceData TraceData = UnpackTraceData(TraceDataPacked[RayIndex]);
		if (TraceData.bIsFarField)
		{
			Context.InstanceMask = RAY_TRACING_MASK_FAR_FIELD;
			Ray.TMax = FarFieldMaxTraceDistance;
		}
		const float Epsilon = 0.5;
		Ray.TMin = TraceData.TraceDistance - Epsilon;

		int LightingMode = (TraceData.bIsFarField || !TraceData.bIsValidMeshCardIndex) ?
			EVALUATE_MATERIAL_AND_DIRECT_LIGHTING_AND_SKY_LIGHTING :
			NearFieldLightingMode;
		LightingMode = EVALUATE_MATERIAL_AND_DIRECT_LIGHTING_AND_SKY_LIGHTING;
		FRayTracedLightingResult Result = TraceAndCalculateRayTracedLighting(Ray, Context, LightingMode, TraceData.Bookmark);

#else // DIM_LIGHTING_MODE == LIGHTING_MODE_SURFACE_CACHE
		FRayTracedLightingResult Result = TraceAndCalculateRayTracedLightingFromSurfaceCache(Ray, Context);

#endif // DIM_LIGHTING_MODE

		if ((ApplySkyLight != 0) && !Result.bIsHit)
		{
			FConeTraceResult TraceResult;
			TraceResult.Lighting = Result.Radiance;
			TraceResult.Transparency = 1;

#if DIM_RADIANCE_CACHE
			if (RayData.TraceDistance < MaxTraceDistance * .99f)
			{
				SampleRadianceCacheAndApply(WorldPosition, RayData.Direction, RayData.ConeHalfAngle, float3(0, 0, 0), TraceResult.Lighting, TraceResult.Transparency);

				Result.TraceHitDistance = RayData.TraceDistance;
			}
			else
#endif
			{
				Result.TraceHitDistance = MaxTraceDistance;
				EvaluateSkyRadianceForCone(RayData.Direction, tan(RayData.ConeHalfAngle), TraceResult);
			}

			Result.Radiance = TraceResult.Lighting;
			Result.bIsHit = true;
		}

#if DIM_LIGHTING_MODE == LIGHTING_MODE_SURFACE_CACHE
		RWTraceDataPacked[RayIndex] = PackTraceData(CreateTraceData(Result.TraceHitDistance, Result.MaterialShaderIndex, Result.Bookmark, Result.bIsHit, Result.MeshCardsIndex != LUMEN_INVALID_CARD_INDEX, Result.bIsFarField));
#endif // DIM_LIGHTING_MODE

#if DIM_WRITE_FINAL_LIGHTING
		Result.Radiance *= View.PreExposure;

		float MaxLighting = max3(Result.Radiance.x, Result.Radiance.y, Result.Radiance.z);

		if (MaxLighting > MaxRayIntensity)
		{
			Result.Radiance *= MaxRayIntensity / MaxLighting;
		}

		RWTraceRadiance[TraceCoord] = Result.Radiance;
		RWTraceHit[TraceCoord] = EncodeRayDistance(Result.TraceHitDistance, Result.bIsHit);

		#define DEBUG_SUPPORT_VISUALIZE_TRACE_COHERENCY 0
		#if DEBUG_SUPPORT_VISUALIZE_TRACE_COHERENCY
			if (VisualizeTraceCoherency != 0)
			{
				uint DebugGroupIndex = 10240;
				// UE_RAY_TRACING_DISPATCH_1D
				int DebugTraceIndex = (int)RayIndex - (int)DebugGroupIndex * 32;

				if (DebugTraceIndex >= 0 && DebugTraceIndex < 32)
				{
					WriteTraceForVisualization(DebugTraceIndex, WorldPosition, RayData.Direction, Result.TraceHitDistance, /*Result.Radiance*/float3(1, 0, 0));
				}
			}
		#endif
#endif // DIM_WRITE_FINAL_LIGHTING
	}
}

#endif // LUMEN_HARDWARE_RAYTRACING