// Copyright Epic Games, Inc. All Rights Reserved.

// TODO: Remove hair dependency
#include "../HairStrands/HairStrandsVoxelPageCommonStruct.ush"

#include "../Common.ush"
#include "../MonteCarlo.ush"
#include "../SceneTextureParameters.ush"

#include "LumenCardCommon.ush"
#include "LumenTracingCommon.ush"
#include "LumenReflectionCommon.ush"
#include "LumenHardwareRayTracingCommon.ush"

RWTexture2D<float> RWTraceHit;
RWTexture2D<float3> RWTraceRadiance;

RaytracingAccelerationStructure TLAS;
float MaxTraceDistance;


RAY_TRACING_ENTRY_RAYGEN(LumenReflectionHardwareRayTracingRGS)
{
	if (DispatchRaysIndex().x < CompactedTraceTexelAllocator[0])
	{
		uint2 ReflectionTracingCoord;
		float TraceHitDistance = 0;
		DecodeTraceTexel(CompactedTraceTexelData[DispatchRaysIndex().x], ReflectionTracingCoord, TraceHitDistance);

		float2 ScreenUV = GetScreenUVFromReflectionTracingCoord(ReflectionTracingCoord);
		float2 ScreenCoord = ScreenUV * View.BufferSizeAndInvSize.xy;
		uint LinearCoord = ScreenCoord.y * View.BufferSizeAndInvSize.x + ScreenCoord.x;

		float SceneDepth = DownsampledDepth.Load(int3(ReflectionTracingCoord, 0)).x;
		float3 WorldPosition = GetWorldPositionFromScreenUV(ScreenUV, SceneDepth);
		float3 WorldNormal = DecodeNormal(GBufferATexture.Load(int3(ScreenUV * View.BufferSizeAndInvSize.xy, 0)).xyz);

		FRayData RayData = DecodeRayData(RayBuffer[ReflectionTracingCoord]);

		RayDesc Ray;
		Ray.Origin = WorldPosition;
		Ray.Direction = RayData.Direction;
		float RayBias = 0.05;
		Ray.TMin = max(TraceHitDistance, RayBias);
		Ray.TMax = MaxTraceDistance;

		float NormalBias = 0.05;
		ApplyPositionBias(Ray.Origin, Ray.Direction, WorldNormal, NormalBias);

		FRayCone RayCone = (FRayCone)0;
		RayCone.SpreadAngle = View.EyeToPixelSpreadAngle;
		RayCone = PropagateRayCone(RayCone, RayData.ConeHalfAngle, SceneDepth);

		FRayTracedLightingContext Context;
		Context.TLAS = TLAS;
		Context.RayCone = RayCone;
		Context.TraceCoord = ReflectionTracingCoord;
		Context.LinearCoord = LinearCoord;

		float3 Radiance;
		bool bHit = CalculateRayTracedLighting(Ray, Context, DIM_LIGHTING_MODE, DIM_NORMAL_MODE, TraceHitDistance, Radiance);
		RWTraceRadiance[ReflectionTracingCoord] = Radiance;
		RWTraceHit[ReflectionTracingCoord] = EncodeRayDistance(TraceHitDistance, bHit);
	}
}
