// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	LumenCardBVH.usf
=============================================================================*/

#include "../Common.ush"
#include "LumenCardCommon.ush"

RWBuffer<uint> RWBVHQueryNum;

[numthreads(THREADGROUP_SIZE, 1, 1)]
void InitBVHQueryUAVCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	uint BufferIndex = DispatchThreadId.x;
	if (BufferIndex < 4)
	{
		RWBVHQueryNum[BufferIndex] = BufferIndex == 0 ? 0 : 1;
	}
}

uint3 CullGridSize;
Buffer<uint> CulledCardLinkHeadGrid;
Buffer<uint> CulledCardLinkData;
RWBuffer<uint> RWUsedCardData;
RWBuffer<uint> RWCulledCardGridHeader;
RWBuffer<uint> RWCulledCardGridData;
RWBuffer<uint> RWCulledCardGridNext;
uint CulledCardDataGridSize;

void CompactReverseLinkedList(uint GridIndex)
{
	uint NumCulledCards = 0;
	uint StartLinkOffset = CulledCardLinkHeadGrid[GridIndex];
	uint LinkOffset = StartLinkOffset;

	// Traverse the linked list to count how many culled indices we have
	while (LinkOffset != 0xFFFFFFFF)
	{
		NumCulledCards++;
		LinkOffset = CulledCardLinkData[LinkOffset * CULLED_CARD_LINK_STRIDE + 1];
	}

	uint CulledCardDataStart;
	InterlockedAdd(RWCulledCardGridNext[0], NumCulledCards, CulledCardDataStart);
	RWCulledCardGridHeader[GridIndex * CULLED_CARD_GRID_HEADER_STRIDE + 0] = NumCulledCards;
	RWCulledCardGridHeader[GridIndex * CULLED_CARD_GRID_HEADER_STRIDE + 1] = CulledCardDataStart;

	LinkOffset = StartLinkOffset;
	uint CulledCardIndex = 0;

	while (LinkOffset != 0xFFFFFFFF)
	{
		// Reverse the order as we write them out, which restores the original order before the reverse linked list was built
		uint DataIndex = CulledCardDataStart + NumCulledCards - CulledCardIndex - 1;
		if (DataIndex < CulledCardDataGridSize)
		{
			RWCulledCardGridData[DataIndex] = CulledCardLinkData[LinkOffset * CULLED_CARD_LINK_STRIDE + 0];
		}

#if CULL_UNUSED_LINKS
		RWUsedCardData[DataIndex] = 0;
#endif

		CulledCardIndex++;
		LinkOffset = CulledCardLinkData[LinkOffset * CULLED_CARD_LINK_STRIDE + 1];
	}
}

[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, THREADGROUP_SIZE)]
void CompactCardListIntoGridCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	uint3 GridCoordinate = DispatchThreadId;
	if (all(GridCoordinate < CullGridSize))
	{
		uint GridIndex = (GridCoordinate.z * CullGridSize.y + GridCoordinate.y) * CullGridSize.x + GridCoordinate.x;

		CompactReverseLinkedList(GridIndex);
	}
}