// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	VirtualShadowMapProjection.usf: 
=============================================================================*/

#include "../Common.ush"
#include "../SceneTexturesCommon.ush"
#include "../DeferredShadingCommon.ush"
#include "../ScreenSpaceDenoise/SSDPublic.ush"
#include "../ScreenSpaceDenoise/SSDDefinitions.ush"
#include "../ScreenSpaceDenoise/SSDPublicHarmonics.ush"
#include "../LightShaderParameters.ush"
#include "PageAccessCommon.ush"
#include "ProjectionCommon.ush"

// See VirtualShadowMapProjection.cpp
// 0 = Output to denoiser
// 1 = Output to screen shadow mask
// 2 = Output debug LOD
#ifndef OUTPUT_TYPE
#define OUTPUT_TYPE 0
#endif

int VirtualShadowMapId;		// For the first layer for clipmaps
int DebugOutputType;
float ContactShadowLength;

// TODO: Share LOD visualization color logic between Debug.usf and here (and possibly Nanite debug)
float3 IntToColor(uint Index)
{
	const float3 ColorTable[8] = {
		float3(1.0f, 0.0f, 0.0f),
		float3(0.0f, 1.0f, 0.0f),
		float3(0.0f, 0.0f, 1.0f),

		float3(1.0f, 1.0f, 0.0f),
		float3(0.0f, 1.0f, 1.0f),
		float3(1.0f, 0.0f, 1.0f),

		float3(0.5f, 0.7f, 0.1f),
		float3(1.0f, 1.0f, 1.0f)
	};
	return ColorTable[Index % 8];
}

float ShadowRayCast(
	float3 RayOriginTranslatedWorld, float3 RayDirection, float RayLength,
	int NumSteps, float StepOffset
)
{
	float4 RayStartClip	= mul( float4( RayOriginTranslatedWorld, 1 ), View.TranslatedWorldToClip );
	float4 RayDirClip	= mul( float4( RayDirection * RayLength, 0 ), View.TranslatedWorldToClip );
	float4 RayEndClip	= RayStartClip + RayDirClip;

	float3 RayStartScreen = RayStartClip.xyz / RayStartClip.w;
	float3 RayEndScreen = RayEndClip.xyz / RayEndClip.w;
	
	float3 RayStepScreen = RayEndScreen - RayStartScreen;

	float3 RayStartUVz = float3( RayStartScreen.xy * View.ScreenPositionScaleBias.xy + View.ScreenPositionScaleBias.wz, RayStartScreen.z );
	float3 RayStepUVz = float3( RayStepScreen.xy * View.ScreenPositionScaleBias.xy, RayStepScreen.z );

	float4 RayDepthClip	= RayStartClip + mul( float4( 0, 0, RayLength, 0 ), View.ViewToClip );
	float3 RayDepthScreen = RayDepthClip.xyz / RayDepthClip.w;

	const float Step = 1.0 / NumSteps;

	// *2 to get less moire pattern in extreme cases, larger values make object appear not grounded in reflections
	const float CompareTolerance = abs( RayDepthScreen.z - RayStartScreen.z ) * Step * 2;

	float SampleTime = StepOffset * Step + Step;

	float FirstHitTime = -1.0;

	for( int i = 0; i < NumSteps; i++ )
	{
		float3 SampleUVz = RayStartUVz + RayStepUVz * SampleTime;
		float SampleDepth = SceneTexturesStruct.SceneDepthTexture.SampleLevel( SceneTexturesStruct_SceneDepthTextureSampler, SampleUVz.xy, 0 ).r;

		float DepthDiff = SampleUVz.z - SampleDepth;
		bool Hit = abs( DepthDiff + CompareTolerance ) < CompareTolerance;

		FirstHitTime = (Hit && FirstHitTime < 0.0) ? SampleTime : FirstHitTime;

		SampleTime += Step;
	}

	float Shadow = FirstHitTime > 0.0 ? 1.0 : 0.0;

	// Off screen masking
	float2 Vignette = max(6.0 * abs(RayStartScreen.xy + RayStepScreen.xy * FirstHitTime) - 5.0, 0.0);
	Shadow *= saturate( 1.0 - dot( Vignette, Vignette ) );

	return 1 - Shadow;
}

float4 EncodeLightAttenuationFromMask(float ShadowMask)
{
	const float ShadowFadeFraction = 1;
	float SSSTransmission = ShadowMask;

	// 0 is shadowed, 1 is unshadowed
	// RETURN_COLOR not needed unless writing to SceneColor;
	float FadedShadow = lerp(1.0f, Square(ShadowMask), ShadowFadeFraction);
	float FadedSSSShadow = lerp(1.0f, Square(SSSTransmission), ShadowFadeFraction);

	// the channel assignment is documented in ShadowRendering.cpp (look for Light Attenuation channel assignment)
	return EncodeLightAttenuation(half4(FadedShadow, FadedSSSShadow, FadedShadow, FadedSSSShadow));
}

void VirtualShadowMapProjectionPS(
	in float4 SvPosition : SV_Position,
	out float4 OutputTarget : SV_Target
	)
{
	// TODO: Unify this with the logic in PageManagement.usf - we need to get the same values in both passes
	const float2 ScreenUV = SvPositionToBufferUV(SvPosition);
	const float DeviceZ = LookupDeviceZ(ScreenUV);
	const float SceneDepth = ConvertFromDeviceZ(DeviceZ);
	
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(float4(SvPosition.xy, DeviceZ, 1.0f));
		
	// TODO: Early out on sky, etc.
	bool bInLightRegion = true;

	FVirtualShadowMapProjectionShaderData ProjectionData = GetVirtualShadowMapProjectionData(VirtualShadowMapId);
	uint LightType = ProjectionData.LightType;

	FLightShaderParameters Light = GetRootLightShaderParameters();
	float3 ToLight = Light.Direction;
	if (ProjectionData.LightType == LIGHT_TYPE_SPOT)
	{
		// Early out if we're outside the spot light cone		
		ToLight = Light.Position - (TranslatedWorldPosition - View.PreViewTranslation);
		bool bInLightRadius = length(ToLight) <= rcp(Light_InvRadius);
		ToLight = normalize(ToLight);
		bool bInLightCone = dot(ToLight, Light.Direction) >= Light.SpotAngles.x;
		bInLightRegion = bInLightRegion && bInLightRadius && bInLightCone;
	}
	if (!bInLightRegion)
	{
		discard;
	}
	
	float ContactShadow = 1.0f;
	float ContactShadowLengthWorld = 0.0f;
	if (ContactShadowLength > 0.0f)
	{
		ContactShadowLengthWorld = ContactShadowLength * View.ClipToView[1][1] * SceneDepth;
		float StepOffset = InterleavedGradientNoise( SvPosition.xy, View.StateFrameIndexMod8 );
		ContactShadow = ShadowRayCast( TranslatedWorldPosition, ToLight, ContactShadowLengthWorld, 12, StepOffset );
	}

	// NOTE: Could skip most of the rest of the shader if contact shadows say we're shadowed, but likely to be small, incoherent branching

	// Figure out slope, we do world space since that is the space where we might override using the shading normal...
	float3 TranslatedWorldPositionDDX = DDX(TranslatedWorldPosition);
	float3 TranslatedWorldPositionDDY = DDY(TranslatedWorldPosition);
	float3 EstimatedGeoWorldNormal = normalize(cross(TranslatedWorldPositionDDX, TranslatedWorldPositionDDY));

#if 1
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	// If the estimated geo normal is too far out we assume it's broken (derivative includes other surfaces or background) and fall back to the shading normal
	if (dot(GBufferData.WorldNormal, EstimatedGeoWorldNormal) < 0.25f)
	{
		EstimatedGeoWorldNormal = GBufferData.WorldNormal;
	}
#endif

	float3 WorldPosition = TranslatedWorldPosition - View.PreViewTranslation;
	// Offset ray to start at the end of the contact shadow trace
	float RayStartDistance = ContactShadowLengthWorld;
	FVirtualShadowMapSampleResult VirtualShadowMapSample = SampleVirtualShadowMap(VirtualShadowMapId, WorldPosition, EstimatedGeoWorldNormal, RayStartDistance);
	
#if OUTPUT_TYPE != 2		// Don't kill pixels in debug output mode
	if (!VirtualShadowMapSample.bValid)
	{
		// Generally shouldn't occur if PT allocation is conservative
		discard;
	}
#endif

	float RayMissFactor = VirtualShadowMapSample.bOccluded ? 0.0f : 1.0f;
	float HitDistance = VirtualShadowMapSample.OccluderDistance;
	if (ContactShadow < 1.0f)
	{
		RayMissFactor *= ContactShadow;
		HitDistance = ContactShadowLengthWorld;
	}

	// See signal encoding for SIGNAL_BUFFER_LAYOUT_PENUMBRA_HISTORY in SSDSignalBufferEncoding.ush
	// We fuse that logic in here to avoid needing another pass, but it's hard to call the functions directly as they depend on a large
	// number of preprocessor defines and logic that we don't want to mirror here.
	// Unfortunately that means this logic can get out of date when the denoiser changes, but that's the trade-off for now.
	float4 OutputSignal = float4(0, 0, 0, 0);
	float SampleCount = 1.0f;
	float TransmissionDistance = RayMissFactor; // As per RayTracingOcclusionRGS.usf
	if (RayMissFactor < 1.0f)
	{
		float WorldBluringRadius = ComputeLightSampleWorldBluringRadius(TranslatedWorldPosition, LightType, Light, HitDistance);

		OutputSignal = float4(
			RayMissFactor,
			SampleCount,
			WorldBluringRadius,
			TransmissionDistance);
	}
	else
	{
		// Miss
		OutputSignal = float4(RayMissFactor, SampleCount, WORLD_RADIUS_MISS, TransmissionDistance);
	}

	

#if OUTPUT_TYPE == 0
	// Output feeds into denoiser
	OutputTarget = OutputSignal;
#elif OUTPUT_TYPE == 1
	// Output to screen shadow mask
	OutputTarget = EncodeLightAttenuationFromMask(OutputSignal.r);
#elif OUTPUT_TYPE == 2
	// Output debug for "vis".
	float3 Color = float3(0, 0, 0);

	if (DebugOutputType == 1)	// Invalid page
	{
		Color = VirtualShadowMapSample.bValid ? (0.25f * OutputSignal.rrr) : float3(1, 0, 1);
	}

	OutputTarget = float4(Color, 1.0f);	
#endif // OUTPUT_TYPE
}

Texture2D<float4> InputSignal;

void VirtualShadowMapCompositePS(
	in float4 SvPosition : SV_Position,
	out float4 OutShadowMask : SV_Target
	)
{
	// NOTE: The signal is encoded as per SSDSignalBufferEncoding.ush, SIGNAL_BUFFER_LAYOUT_PENUMBRA_RECONSTRUCTION
	float4 Input = InputSignal.Load(int3(SvPosition.xy, 0));
	float SampleCount = Input.g;
	float MissFactor = Input.r;
	float Shadow = (SampleCount > 0 ? MissFactor : 1.0f);
	
	OutShadowMask = EncodeLightAttenuationFromMask(Shadow);
}
