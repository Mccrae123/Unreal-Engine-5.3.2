// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	PageAccessCommon.ush:
=============================================================================*/
#pragma once

#include "../Common.ush"
#include "../Nanite/HZBCull.ush"

#ifndef HAS_CACHE_DATA
#define HAS_CACHE_DATA 0
#endif //HAS_CACHE_DATA

// States of a physical page
// Allocated but not cleared
#define VSM_PHYSICAL_PAGE_STATE_INVALID 0
// Cleared
#define VSM_PHYSICAL_PAGE_STATE_CLEARED 1
// Mapped (in page tables) during a call to render (not tracking whether any geo was drawn into the page)
#define VSM_PHYSICAL_PAGE_STATE_RENDERED 2


#if ENABLE_NON_NANITE_VSM
// GPUCULL_TODO: This is probably ok to just leave on.
// Marks pages that are not cached (bit 0)
#define VSM_INVALID_FLAG (1)
// Marks pages that are allocated (bit 1)
#define VSM_ALLOCATED_FLAG (2)
// Super pages are of size 2^SP-Level up to VSM_NUM_SUPER_PAGE_LEVELS
#define VSM_NUM_SUPER_PAGE_LEVELS (3U)
#define VSM_NUM_SUPER_START_BIT (1U)
// Mask inclusive of super pages and the allocated flag, Bits [1,1+VSM_NUM_SUPER_PAGE_LEVELS+1]
#define VSM_SUPER_PAGE_MASK (((1U << (VSM_NUM_SUPER_PAGE_LEVELS + 1U)) - 1U) << 1U)
#else //!ENABLE_NON_NANITE_VSM
// Used in the PageFlags
// Marks pages that are allocated
#define VSM_ALLOCATED_FLAG (1)
// Marks pages that are not cached
#define VSM_INVALID_FLAG (2)
#endif // ENABLE_NON_NANITE_VSM

// GPUCULL_TODO: These 10 bits don't match Nanite and we may run out what with mip-levels and all!
#define VSM_PACKED_PAGE_INFO_VIEW_ID_BITS (10U)
#define VSM_PACKED_PAGE_INFO_SUPER_PAGE_LEVEL_BITS (2U)

struct FPageInfo
{
	uint2 VirtualPage;
	uint ViewId;
	uint SuperPageLevel;
};

//Buffer containing VSM_ALLOCATED_FLAG for each page that is allocated and optionally | VSM_INVALID_FLAG if it needs to be rendered (not cached)
StructuredBuffer<uint> PageFlags;
StructuredBuffer<uint> HPageFlags;
StructuredBuffer<uint> ShadowPageTable;
StructuredBuffer<uint> ShadowHZBPageTable;
// Rectangles bounding allocated pages for each mip level
StructuredBuffer<uint4> PageRectBounds;

uint CalcLog2LevelDimsPages(uint Level)
{
	return VSM_LOG2_LEVEL0_DIM_PAGES_XY - Level;	// log2( VSM_LEVEL0_DIM_PAGES_XY >> Level )
}

uint CalcLevelDimsPages(uint Level)
{
	return 1 << CalcLog2LevelDimsPages( Level );
}

uint CalcLevelDimsTexels(uint Level)
{
	return VSM_VIRTUAL_MAX_RESOLUTION_XY >> Level;
}

uint CalcLevelOffsets(uint Level)
{
	// VSM_LEVEL0_DIM_PAGES_XY is a power of two, so the footprint of each mip level MipSize_i=(VSM_LEVEL0_DIM_PAGES_XY>>i)^2 is also a power of two.
	// The binary representation of a mip size is just a single bit: 1 << log2(MipSize_i) = (1 << (2 * (VSM_LOG2_LEVEL0_DIM_PAGES_XY - i))).
	
	// To calculate the offset we need to calculate a sum of consecutive mip sizes, which is equivalent to producing a bit pattern with one bit per level starting out at 
	// bitposition 2*VSM_LOG2_LEVEL0_DIM_PAGES_XY and going down by 2 for every level.
	// E.g. VSM_LEVEL0_DIM_PAGES_XY=3
	//   Level 0: 0000000
	//   Level 1: 1000000
	//   Level 2: 1010000
	//   Level 3: 1010100
	//   Level 4: 1010101

	// To quickly produce a variable number of bits we just select a range of bits from the alternating bit sequence 0x55=0b01010101.
	uint NumBits = Level << 1;
	uint StartBit = (2 * VSM_LOG2_LEVEL0_DIM_PAGES_XY + 2) - NumBits;
#if COMPILER_SUPPORTS_BITFIELD_INTRINSICS
	uint Mask = BitFieldMaskU32(NumBits, StartBit);
#else
	uint Mask = ((1u << NumBits) - 1u) << StartBit;
#endif

	return 0x55555555u & Mask;
}

uint CalcHPageFlagLevelOffsets(uint Level)
{
	return VirtualShadowMap.HPageFlagLevelOffsets[Level];
}

/**
 * Compute the offset for a mip level page table given a shadow map ID and a level.
 */
uint CalcPageTableLevelOffset(uint ShadowMapID, uint Level)
{
	return ShadowMapID * VSM_PAGE_TABLE_SIZE + CalcLevelOffsets(Level);
}

/**
 * Compute the offset for page within a level page table given a level and PageAddress.
 */
uint CalcPageOffsetInLevel(uint Level, uint2 PageAddress)
{
	// return PageAddress.x + PageAddress.y * LevelDimsPages[Level];
	return PageAddress.x + ( PageAddress.y << CalcLog2LevelDimsPages(Level) );
}

uint CalcPageOffset(uint ShadowMapID, uint Level, uint2 PageAddress)
{
	return CalcPageTableLevelOffset(ShadowMapID, Level) + CalcPageOffsetInLevel(Level, PageAddress);
}

// Linearlize a physical page address to a linear offset
uint PhysPageAddressToIndex(uint2 PhysicalPageAddress)
{
	return (PhysicalPageAddress.y << VirtualShadowMap.PhysicalPageRowShift) + PhysicalPageAddress.x;
}

// Current page table format:
// NOTE: Some redundancy in flags and encoding, but we have spare bits for now
//   [0:9] PageIndex.x
//   [10:19] PageIndex.y
//   [20:23] MipOffset
//   [24:30] (currently unused)
//   [31] bAnyMipValid
struct FShadowPhysicalPage
{
	uint2 PageIndex;		// Physical page index X, Y
	uint MipOffset;			// 0 if page is mapped at this mip; 1 if mapped at next courser level, etc. [0..16)
	bool bAnyMipValid;		// Valid physical page mapped at some mip level
	bool bThisMipValid;		// Valid page mapped at this specific mip level (equivalent to bAnyMipValid && MipOffset == 0)
};

#define VSM_PHYSICAL_PAGE_ANY_MIP_VALID_FLAG 0x8000000
#define VSM_PHYSICAL_PAGE_INVALID 0x00000000

// TODO: Remove this, but need to update cache metadata
#define VSM_INVALID_PHYSICAL_PAGE_ADDRESS 65535

uint ShadowEncodePageTable(uint2 PageIndex)
{
	return VSM_PHYSICAL_PAGE_ANY_MIP_VALID_FLAG | (PageIndex.y << 10) | (PageIndex.x);
}
uint ShadowEncodePageTable(uint2 PageIndex, uint MipOffset)
{
	return VSM_PHYSICAL_PAGE_ANY_MIP_VALID_FLAG | (MipOffset << 20) | (PageIndex.y << 10) | (PageIndex.x);
}

FShadowPhysicalPage ShadowDecodePageTable(uint Value)
{
	FShadowPhysicalPage Result;
	Result.PageIndex = uint2(Value & 0x3FF, (Value >> 10) & 0x3FF);
	Result.MipOffset = (Value >> 20) & 0xF;
	Result.bAnyMipValid = (Value & VSM_PHYSICAL_PAGE_ANY_MIP_VALID_FLAG) != 0;
	Result.bThisMipValid = Result.bAnyMipValid && Result.MipOffset == 0;
	return Result;
}

FShadowPhysicalPage ShadowGetPhysicalPage(uint PageOffset)
{
	return ShadowDecodePageTable(ShadowPageTable[PageOffset]);	
}

bool VirtualToPhysicalTexel(uint ShadowMapID, uint Level, uint2 VirtualTexelAddress, inout uint2 PhysicalTexelAddress)
{
	uint VPageX = VirtualTexelAddress.x >> VSM_LOG2_PAGE_SIZE;
	uint VPageY = VirtualTexelAddress.y >> VSM_LOG2_PAGE_SIZE;

	FShadowPhysicalPage PhysicalPageEntry = ShadowGetPhysicalPage(CalcPageOffset(ShadowMapID, Level, uint2(VPageX, VPageY)));
	PhysicalTexelAddress = PhysicalPageEntry.PageIndex * VSM_PAGE_SIZE + (VirtualTexelAddress & VSM_PAGE_SIZE_MASK);
	return (PhysicalPageEntry.bThisMipValid);
}

struct FShadowPageTranslationResult
{
	bool bValid;
	uint MipLevel;
	uint2 VirtualTexelAddress;
	float2 VirtualTexelAddressFloat;
	uint2 PhysicalTexelAddress;
};

// Finds the best-resolution mapped page at the given UV
FShadowPageTranslationResult ShadowVirtualToPhysicalUV(uint VirtualShadowMapID, float2 ShadowMapUV)
{
	float2 VirtualTexelAddressLevell0Float = ShadowMapUV * float(CalcLevelDimsTexels(0));
	uint2 VirtualTexelAddressLevel0 = uint2(VirtualTexelAddressLevell0Float);
	uint2 vPageLevel0 = uint2(VirtualTexelAddressLevel0 >> VSM_LOG2_PAGE_SIZE);

	FShadowPhysicalPage PhysicalPageEntry = ShadowGetPhysicalPage(CalcPageOffset(VirtualShadowMapID, 0, vPageLevel0));

	FShadowPageTranslationResult Result;
	Result.bValid = PhysicalPageEntry.bAnyMipValid;
	Result.MipLevel = PhysicalPageEntry.MipOffset;	
	// TODO: Can optimize this slightly based on relative offset
	Result.VirtualTexelAddressFloat = ShadowMapUV * float(CalcLevelDimsTexels(Result.MipLevel));
	Result.VirtualTexelAddress = uint2(Result.VirtualTexelAddressFloat);
	Result.PhysicalTexelAddress = PhysicalPageEntry.PageIndex * VSM_PAGE_SIZE + (Result.VirtualTexelAddress & VSM_PAGE_SIZE_MASK);

	return Result;
}

// TODO: this surely needs some special handling of cases that contain the near plane etc.
void TransformBoundingBox2D(float3 BoundsIn[2], float4x4 Transform, inout float2 BoundsOut[2])
{
	// Screen rect from bounds
	UNROLL 
	for (int i = 0; i < 8; ++i)
	{
		float3 PointSrc = float3(
			BoundsIn[(i >> 0) & 1].x,
			BoundsIn[(i >> 1) & 1].y,
			BoundsIn[(i >> 2) & 1].z);

		float4 TransformedPoint = mul(float4(PointSrc, 1.0f), Transform);
		float3 PointScreen = TransformedPoint.xyz / TransformedPoint.w;

		BoundsOut[0] = min(BoundsOut[0], PointScreen.xy);
		BoundsOut[1] = max(BoundsOut[1], PointScreen.xy);
	}
}

// Note: the pixel 'screen' rect in FScreenRect is calculated using only the viewport _size_ as HZB uses a zero-offset buffer.
// However, the page table is with respect to the entire virtual SM so we need to offset here.
bool OverlapsAnyValidPage( uint ShadowMapID, uint MipLevel, int2 ViewPortRectMin, FScreenRect Rect, bool bHasMoved )
{
	// Clusters that has moved must be rendered to any allocated page, whereas static ones only need to be rendered into invalid pages.
	uint FlagMask = bHasMoved ? VSM_ALLOCATED_FLAG : VSM_INVALID_FLAG;
	uint4 RectPages = uint4( Rect.Pixels + ViewPortRectMin.xyxy ) >> VSM_LOG2_PAGE_SIZE;

	uint HMipLevel = MipLevelForRect( RectPages, 2 );
	
	uint PageTableLevelOffset = CalcPageTableLevelOffset( ShadowMapID, MipLevel );

	// Check the page flags directly as not needing h-page flag mip
	if (HMipLevel == 0)
	{
		for( uint y = RectPages.y; y <= RectPages.w; y++ )
		{
			for( uint x = RectPages.x; x <= RectPages.z; x++ )
			{
				if ((PageFlags[PageTableLevelOffset + CalcPageOffsetInLevel(MipLevel, uint2(x, y))] & FlagMask) != 0)
				{
					return true;
				}
			}
		}
	}
	else
	{
		RectPages >>= HMipLevel;

		// Root level size in pages
		uint HLevelSizePages = VSM_LEVEL0_DIM_PAGES_XY >> (MipLevel + HMipLevel);
		
		int HPageLevelOffset = ShadowMapID * VirtualShadowMap.HPageTableSize + CalcHPageFlagLevelOffsets(MipLevel)
			+ CalcLevelOffsets( HMipLevel + MipLevel)
			- CalcLevelOffsets( MipLevel + 1U );

		for( uint y = RectPages.y; y <= RectPages.w; y++ )
		{
			for( uint x = RectPages.x; x <= RectPages.z; x++ )
			{
				int HPageFlagOffset = HPageLevelOffset + y * HLevelSizePages + x;
				if( (HPageFlags[ HPageFlagOffset ] & FlagMask) != 0 )
				{
					return true;
				}
			}
		}
	}
	return false;
}

static const uint HZB_PAGE_SIZE = VSM_PAGE_SIZE / 2;



bool IsVisibleHZB( uint ShadowMapID, uint MipLevel, FScreenRect Rect )
{
	// Don't have an HZB to test.
	if( ShadowMapID == ~0u )
		return true;

	// Can't go past mip level of 4x4 for a 4x4 test without possibly covering more than 4 pages.
	if( Rect.HZBLevel > VSM_LOG2_PAGE_SIZE - 3 )
	{
	#if 1
		return true;
	#else
		Rect.HZBLevel = VSM_LOG2_PAGE_SIZE - 3;
		Rect.HZBTexels = int4( Rect.Pixels.xy, max( Rect.Pixels.xy, Rect.Pixels.zw ) );	
		Rect.HZBTexels >>= Rect.HZBLevel + 1;
	#endif
	}

	uint PageTableLevelOffset = CalcPageTableLevelOffset( ShadowMapID, MipLevel );

	uint4 RectPages = uint4( Rect.Pixels ) >> VSM_LOG2_PAGE_SIZE;

	for( uint y = RectPages.y; y <= RectPages.w; y++ )
	{
		for( uint x = RectPages.x; x <= RectPages.z; x++ )
		{
			uint2 vPage = uint2(x,y);
			uint PageOffset = PageTableLevelOffset + CalcPageOffsetInLevel( MipLevel, vPage );
			FShadowPhysicalPage pPage = ShadowDecodePageTable( ShadowHZBPageTable[ PageOffset ] );

			if( !pPage.bThisMipValid )
			{
				// If this is a new page we can't consider everything occluded the first time.
				//if( PageFlags[ PageOffset ] != 0 )
					return true;

				// If the receiver points were projected into prev HZB space we could accurately ignore parts of the HZB that weren't relevent.
			}
			else
			{
				uint Shift = VSM_LOG2_PAGE_SIZE - 1 - Rect.HZBLevel;

				FScreenRect ClippedRect = Rect;
				ClippedRect.HZBTexels -= ( vPage << Shift ).xyxy;
				ClippedRect.HZBTexels = clamp( ClippedRect.HZBTexels, 0, (int)HZB_PAGE_SIZE - 1 );
				ClippedRect.HZBTexels += ( pPage.PageIndex << Shift ).xyxy;

				if( IsVisibleHZB( ClippedRect, true ) )
					return true;
			}
		}
	}

	return false;
}