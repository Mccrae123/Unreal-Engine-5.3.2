// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	MeshDistanceFieldCommon.ush
=============================================================================*/

float DistanceToNearestSurfaceForObject(uint ObjectIndex, float3 WorldPosition, float MaxDistance)
{
	FDFObjectData DFObjectData = LoadDFObjectData(ObjectIndex);

	float3 LocalPositionExtent = LoadGlobalObjectLocalPositionExtent(ObjectIndex);
	float4x4 WorldToVolume = LoadGlobalObjectWorldToVolume(ObjectIndex);
	float3 VolumePosition = mul(float4(WorldPosition, 1), WorldToVolume).xyz;

	float3 ClampedVolumePosition = clamp(VolumePosition, -LocalPositionExtent, LocalPositionExtent);
	float DistanceToBox = length((VolumePosition - ClampedVolumePosition) * DFObjectData.VolumeToLocalScale);

	float DistanceToOccluder = MaxDistance;

	BRANCH
	if (DistanceToBox < MaxDistance)
	{
		bool bGeneratedAsTwoSided;
		float4 UVScaleAndVolumeScale = LoadGlobalObjectUVScale(ObjectIndex, bGeneratedAsTwoSided);
		float2 DistanceFieldMAD = LoadGlobalObjectDistanceFieldMAD(ObjectIndex);
		float3 UVAdd = LoadGlobalObjectUVAddAndSelfShadowBias(ObjectIndex).xyz;
		float3 StepVolumeUV = DistanceFieldVolumePositionToUV(ClampedVolumePosition, UVScaleAndVolumeScale.xyz, UVAdd);
		DistanceToOccluder = SampleMeshDistanceField(StepVolumeUV, DistanceFieldMAD).x * UVScaleAndVolumeScale.w + DistanceToBox;

		// Don't allow negative SDF distance to stick out of the bounding box
		if (DistanceToBox > 0.0f)
		{
			DistanceToOccluder = max(DistanceToOccluder, DistanceToBox);
		}
	}

	return DistanceToOccluder;
}