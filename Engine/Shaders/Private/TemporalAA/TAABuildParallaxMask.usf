// Copyright Epic Games, Inc. All Rights Reserved.

#include "TAACommon.ush"


//------------------------------------------------------- CONFIG

#define TILE_SIZE 8

#define AA_CROSS 1


//------------------------------------------------------- PARAMETERS

Texture2D<float2> DilatedVelocityTexture;
Texture2D<float> ClosestDepthTexture;
Texture2D<uint> PrevUseCountTexture;
Texture2D<uint> PrevClosestDepthTexture;

RWTexture2D<float> ParallaxRejectionMaskOutput;
RWTexture2D<uint> ParallaxRejectionOutput;


//------------------------------------------------------- ENTRY POINT

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void MainCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	float4 Debug = 0.0;

	uint2 DispatchThreadId = (
		ZOrder2D(GroupThreadIndex, log2(TILE_SIZE)) +
		GroupId * uint2(TILE_SIZE, TILE_SIZE));

	uint2 InputPixelPos = DispatchThreadId;
	
	float2 ViewportUV = (float2(InputPixelPos) + 0.5f) * InputInfo_ViewportSizeInverse;
	float2 ScreenPos = ViewportUVToScreenPos(ViewportUV);
	float2 InputBufferUV = (InputPixelPos + 0.5) * InputInfo_ExtentInverse;
	
	float2 EncodedVelocity = DilatedVelocityTexture[InputPixelPos];
	float DeviceZ = ClosestDepthTexture[InputPixelPos];

	float WorldDepth = ConvertFromDeviceZ(DeviceZ);
	
	float ParallaxRejectionMask = 0.0;
	{
		float2 PrevScreenPos = ScreenPos - DecodeVelocityFromTexture(float3(EncodedVelocity, 0.0)).xy;
		float2 PrevInputBufferUV = (InputInfo_ScreenPosToViewportScale * PrevScreenPos + InputInfo_ScreenPosToViewportBias) * InputInfo_ExtentInverse;
		
		FBilinearSampleInfos BilinearInter = GetBilinearSampleLevelInfos(PrevInputBufferUV, InputInfo_Extent, InputInfo_ExtentInverse);

		UNROLL_N(4)
		for (uint i = 0; i < 4; i++)
		{
			float BilinearWeight = GetSampleWeight(BilinearInter, i);
			uint2 PixelPos = GetSamplePixelCoord(BilinearInter, i);

			bool bValidPixelPos = all(PixelPos < uint2(InputInfo_ViewportSize));

			uint HistoryUseCount = PrevUseCountTexture[PixelPos];
			float HistoryClosestDeviceZ = f16tof32(PrevClosestDepthTexture[PixelPos]);
			float HistoryClosestWorldDepth = ConvertFromDeviceZ(HistoryClosestDeviceZ);

			float DepthRejection;
			{
				const float WorldDepthToPixelWorldRadius = GetTanHalfFieldOfView().x * InputInfo_ExtentInverse.x;
				const float PixelDepthError = 3.0;
				const float RadiusToDiamater = 2.0;
			
				float WorldDepthEpsilon = (WorldDepthToPixelWorldRadius * RadiusToDiamater * PixelDepthError) * HistoryClosestWorldDepth; 
				float DeltaDepth = abs(HistoryClosestWorldDepth - WorldDepth);

				DepthRejection = saturate(2.0 - DeltaDepth / WorldDepthEpsilon);
			}

			float HistoryGhostingRejection = saturate(1.0 - 3.0 * abs(HistoryUseCount * rcp(256) - 1.0));

			FLATTEN
			if (bValidPixelPos)
				ParallaxRejectionMask += BilinearWeight * max(DepthRejection, HistoryGhostingRejection);
		}
	}

	if (all(InputPixelPos < InputInfo_ViewportSize))
	{
		ParallaxRejectionMaskOutput[InputPixelPos] = ParallaxRejectionMask;

		#if DEBUG_OUTPUT
		{
			DebugOutput[InputPixelPos] = Debug;
		}
		#endif
	}
}
