// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	PhysicsFieldSampler.ush
=============================================================================*/

#pragma once

#include "PhysicsFieldShared.ush"

#if FEATURE_LEVEL >= FEATURE_LEVEL_SM5

#if IS_MATERIAL_SHADER
    // for materials, these are in the view UB
	#define PhysicsFieldClipmapTexture			View.PhysicsFieldClipmapTexture
	#define PhysicsFieldClipmapSampler			View.PhysicsFieldClipmapSampler
	#define PhysicsFieldClipmapCenter			View.PhysicsFieldClipmapCenter
	#define PhysicsFieldClipmapDistance			View.PhysicsFieldClipmapDistance
	#define PhysicsFieldClipmapResolution		View.PhysicsFieldClipmapResolution
	#define PhysicsFieldClipmapExponent			View.PhysicsFieldClipmapExponent
	#define PhysicsFieldClipmapCount			View.PhysicsFieldClipmapCount
	#define PhysicsFieldTargetCount				View.PhysicsFieldTargetCount
	#define PhysicsFieldVectorTargets			View.PhysicsFieldVectorTargets
	#define PhysicsFieldScalarTargets			View.PhysicsFieldScalarTargets
	#define PhysicsFieldIntegerTargets			View.PhysicsFieldIntegerTargets
#else
	Texture3D<float4>	PhysicsFieldClipmapTexture;
	SamplerState PhysicsFieldClipmapSampler;
	float3		PhysicsFieldClipmapCenter;
	float		PhysicsFieldClipmapDistance;
	int			PhysicsFieldClipmapResolution;
	int			PhysicsFieldClipmapExponent;
	int			PhysicsFieldClipmapCount;
	int			PhysicsFieldTargetCount;
	int			PhysicsFieldVectorTargets[MAX_TARGETS_ARRAY];
	int			PhysicsFieldScalarTargets[MAX_TARGETS_ARRAY];
	int			PhysicsFieldIntegerTargets[MAX_TARGETS_ARRAY];
#endif

float3 MatPhysicsField_SamplePhysicsVectorField(float3 WorldPosition, int VectorTarget)
{
	return PhysicsField_SamplePhysicsVectorField(WorldPosition, VectorTarget, PhysicsFieldVectorTargets, PhysicsFieldTargetCount, PhysicsFieldClipmapCenter, PhysicsFieldClipmapDistance,
				PhysicsFieldClipmapExponent, PhysicsFieldClipmapCount, PhysicsFieldClipmapResolution, PhysicsFieldClipmapTexture, PhysicsFieldClipmapSampler);
}

float MatPhysicsField_SamplePhysicsScalarField(float3 WorldPosition, int ScalarTarget)
{
	return PhysicsField_SamplePhysicsScalarField(WorldPosition, ScalarTarget, PhysicsFieldScalarTargets, PhysicsFieldTargetCount, PhysicsFieldClipmapCenter, PhysicsFieldClipmapDistance,
				PhysicsFieldClipmapExponent, PhysicsFieldClipmapCount, PhysicsFieldClipmapResolution, PhysicsFieldClipmapTexture, PhysicsFieldClipmapSampler);
}

int MatPhysicsField_SamplePhysicsIntegerField(float3 WorldPosition, int IntegerTarget)
{
	return PhysicsField_SamplePhysicsIntegerField(WorldPosition, IntegerTarget, PhysicsFieldIntegerTargets, PhysicsFieldTargetCount, PhysicsFieldClipmapCenter, PhysicsFieldClipmapDistance,
				PhysicsFieldClipmapExponent, PhysicsFieldClipmapCount, PhysicsFieldClipmapResolution, PhysicsFieldClipmapTexture, PhysicsFieldClipmapSampler);
}

#endif // FEATURE_LEVEL >= FEATURE_LEVEL_SM5
