// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	HdrCustomResolve.usf: Custom resolve for HDR color and box filter.
	These versions of the shaders support FMASK, details of which may be under PS4 platform NDA.
=============================================================================*/

float4 HdrCustomResolveVS(uint Id : SV_VertexID) : SV_POSITION
{
	int x = Id &  1;
	int y = Id >> 1;

	return float4(x * 4 - 1, y * 4 - 1, 0, 1);
}

float4 Encode(float4 Color)
{
	return float4(Color.rgb * rcp(Color.r*0.299 + Color.g*0.587 + Color.b*0.114 + 1.0), Color.a);
}

float4 Decode(float4 Color)
{
	return float4(Color.rgb * rcp(Color.r*(-0.299) + Color.g*(-0.587) + Color.b*(-0.114) + 1.0), Color.a);
}

#if HDR_CUSTOM_RESOLVE_USES_FMASK
Texture2D<int2> FMaskTex;

int getFptr(int index, int2 fmask)
{
	const int     bitShift = 4;     // fmask load always returns a 4bit fragment index (fptr) per coverage sample, regardless of actual number of fragments.
	const int     mask = (1 << bitShift) - 1;
	if (index < 8)
		return (fmask.x >> (index*bitShift)) & mask;
	else
		return (fmask.y >> ((index - 8)*bitShift)) & mask;
}

int2 fmask;

void LoadFMask(int2 P)
{
	fmask.x = FMaskTex.Load(int3(P, 0)).x;
	fmask.y = 0x88888888; // all invalid -- though in theory we shouldn't need to refer to them at all.
}

void LoadTexSample(Texture2DMS<float4> TargetTex, int2 P, int sampleIndex, inout float4 sampleSum, inout float weightSum)
{
	int fptr = getFptr(sampleIndex, fmask);
	int unknown = 1 << 3; // color "unknown" is always represented as high bit in the 4bit fragment index
	float known = float(fptr != unknown);

	sampleSum += known*Encode(TargetTex.Load(P, fptr));
	weightSum += known;
}

# if HDR_RESOLVE_NUM_SAMPLES
Texture2DMS<float4,HDR_RESOLVE_NUM_SAMPLES> Tex;
float4 HdrCustomResolveFMaskPS(float4 Pos : SV_POSITION) : SV_Target0
{
	uint2 P = uint2(Pos.xy);

	LoadFMask(P);

	float4 sampleSum = float4(0, 0, 0, 1);
	float weightSum = 0;

	for (int i = 0; i < HDR_RESOLVE_NUM_SAMPLES; ++i)
	{
		LoadTexSample(Tex, P, i, sampleSum, weightSum);
	}
	return Decode(sampleSum / weightSum);
}
# endif

#else

# if HDR_CUSTOM_RESOLVE_2X

	Texture2DMS<float4,2> Tex;
	float4 HdrCustomResolve2xPS(float4 Pos : SV_POSITION) : SV_Target0
	{
		uint2 P = uint2(Pos.xy);
		float4 C0 = Encode(Tex.Load(P, 0));
		float4 C1 = Encode(Tex.Load(P, 1));
		return Decode(C0*0.5 + C1*0.5);
	}
	
# endif

# if HDR_CUSTOM_RESOLVE_4X

	Texture2DMS<float4,4> Tex;
	float4 HdrCustomResolve4xPS(float4 Pos : SV_POSITION) : SV_Target0
	{
		uint2 P = uint2(Pos.xy);
		float4 C0 = Encode(Tex.Load(P, 0));
		float4 C1 = Encode(Tex.Load(P, 1));
		float4 C2 = Encode(Tex.Load(P, 2));
		float4 C3 = Encode(Tex.Load(P, 3));
		return Decode(C0*0.25 + C1*0.25 + C2*0.25 + C3*0.25);
	}

# endif

# if HDR_CUSTOM_RESOLVE_8X

	Texture2DMS<float4,8> Tex;
	float4 HdrCustomResolve8xPS(float4 Pos : SV_POSITION) : SV_Target0
	{
		uint2 P = uint2(Pos.xy);
		float4 C0 = Encode(Tex.Load(P, 0));
		float4 C1 = Encode(Tex.Load(P, 1));
		float4 C2 = Encode(Tex.Load(P, 2));
		float4 C3 = Encode(Tex.Load(P, 3));
		float4 C4 = Encode(Tex.Load(P, 4));
		float4 C5 = Encode(Tex.Load(P, 5));
		float4 C6 = Encode(Tex.Load(P, 6));
		float4 C7 = Encode(Tex.Load(P, 7));
		return Decode(C0*0.125 + C1*0.125 + C2*0.125 + C3*0.125 + C4*0.125 + C5*0.125 + C6*0.125 + C7*0.125);
	}
# endif

#endif



