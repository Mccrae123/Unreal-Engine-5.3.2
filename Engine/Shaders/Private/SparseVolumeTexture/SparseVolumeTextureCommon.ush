// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

struct FSparseVolumeTextureUniforms
{
	float3			VolumePageResolution;
	float3			PageTableOffset;
	int             MinMipLevel;
	int             MaxMipLevel;
	float			TileSize;
};

FSparseVolumeTextureUniforms SparseVolumeTextureUnpackUniforms(const uint4 Packed0, const uint4 Packed1)
{
	FSparseVolumeTextureUniforms Result;
	Result.VolumePageResolution = asfloat(Packed0.xyz);
	Result.PageTableOffset = asfloat(Packed1.xyz);
	Result.MinMipLevel = int(Packed0.w & 0xFFu);
	Result.MaxMipLevel = int((Packed0.w >> 8u) & 0xFFu);
	Result.TileSize = asfloat(Packed1.w);

	return Result;
}

float3 SparseVolumeTextureGetVoxelCoord(const uint PackedPhysicalTileCoord, const float TileSize, const float3 PageTableCoord)
{
	const int3 PhysicalTileCoord = int3(
		PackedPhysicalTileCoord & 0x7FF,
		(PackedPhysicalTileCoord >> 11) & 0x7FF,
		(PackedPhysicalTileCoord >> 22) & 0x3FF);

	const float3 VoxelCoord = (float3(PhysicalTileCoord) + frac(PageTableCoord)) * TileSize;
	return VoxelCoord;
}

float3 SparseVolumeTextureSamplePageTable(Texture3D<uint> PageTable, const FSparseVolumeTextureUniforms Uniforms, const float3 UVW, int MipLevel = 0)
{
	MipLevel = clamp(MipLevel, Uniforms.MinMipLevel, Uniforms.MaxMipLevel);
	const float RcpMipLevelFactor = rcp(float(1u << (uint)MipLevel));
	const float3 VolumePageCoord = UVW * Uniforms.VolumePageResolution;
	const float3 MipPageTableOffset = floor(Uniforms.PageTableOffset * RcpMipLevelFactor);
	const float3 PageTableCoord = VolumePageCoord * RcpMipLevelFactor - MipPageTableOffset;

	const uint PackedPhysicalTileCoord = PageTable.Load(int4(int3(PageTableCoord), (MipLevel - Uniforms.MinMipLevel))).x;

	const float3 VoxelCoord = SparseVolumeTextureGetVoxelCoord(PackedPhysicalTileCoord, Uniforms.TileSize, PageTableCoord);
	return VoxelCoord;
}

float4 SparseVolumeTextureSamplePhysicalTileData(Texture3D PhysicalTileDataA, Texture3D PhysicalTileDataB, const float3 VoxelCoord, const int PhysicalTileDataIndex)
{
	switch (PhysicalTileDataIndex)
	{
	case 0: return PhysicalTileDataA.Load(int4(int3(VoxelCoord), 0));
	case 1: return PhysicalTileDataB.Load(int4(int3(VoxelCoord), 0));
	default: return 0.0f;
	}
}
