// Copyright Epic Games, Inc. All Rights Reserved.

#include "HairStrandsVoxelPageCommonStruct.ush"

#include "../Common.ush"
#include "../CommonViewUniformBuffer.ush"
#include "../SceneTextureParameters.ush"
#include "../DeferredShadingCommon.ush"
#include "../ShadowFilteringCommon.ush"
#include "HairStrandsDebugCommon.ush"
#include "HairStrandsDeepShadowCommon.ush"
#include "HairStrandsCommon.ush"
#include "HairStrandsDeepTransmittanceCommon.ush"
#include "HairStrandsVisibilityCommon.ush"
#include "HairStrandsVoxelPageCommon.ush"

#include "../ShaderDrawDebug.ush"
#include "../ShaderPrintCommon.ush"

#define PERMUTATION_TRANSMITTANCE_DEEP_SHADOW 0
#define PERMUTATION_TRANSMITTANCE_VOXEL 1
#define PERMUTATION_TRANSMITTANCE_VIRTUAL_VOXEL 2


#if PERMUTATION_TRANSMITTANCE_TYPE == PERMUTATION_TRANSMITTANCE_DEEP_SHADOW
	#define VOXEL_TRAVERSAL_TYPE VOXEL_TRAVERSAL_LEGACY
#elif PERMUTATION_TRANSMITTANCE_TYPE == PERMUTATION_TRANSMITTANCE_VOXEL
	#define VOXEL_TRAVERSAL_TYPE VOXEL_TRAVERSAL_LEGACY
#elif PERMUTATION_TRANSMITTANCE_TYPE == PERMUTATION_TRANSMITTANCE_VIRTUAL_VOXEL
	#if PERMUTATION_TRAVERSAL == 1
		#define VOXEL_TRAVERSAL_TYPE VOXEL_TRAVERSAL_LINEAR_MIPMAP
	#else
		#define VOXEL_TRAVERSAL_TYPE VOXEL_TRAVERSAL_LINEAR
	#endif
#endif
#define VOXEL_TRAVERSAL_DEBUG 0
#include "HairStrandsVoxelPageTraversal.ush"

float3 ToWorldPosition(float2 UV, float Depth)
{
	float2 ScreenPosition = (UV - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
	float4 HomogeneousWorldPosition = mul(float4(ScreenPosition * Depth, Depth, 1), View.ScreenToWorld);
	float3 WorldPosition = HomogeneousWorldPosition.xyz / HomogeneousWorldPosition.w;

	return WorldPosition;
}


// Need to match FDeepShadowData::MaxMacroGroupCount in HairRendering.h
#define MAX_HAIR_MACROGROUP_COUNT 16 

uint2				DeepShadow_Resolution;
float4x4			DeepShadow_WorldToLightTransforms[MAX_HAIR_MACROGROUP_COUNT];
float3				LightDirection;
uint				MaxVisibilityNodeCount;
float4				LightPosition;
float				DepthBiasScale;
float				DensityScale;
float				LightRadius;
float				DeepShadow_KernelAperture;
uint				DeepShadow_KernelType;
uint				DeepShadow_DebugMode;
int2				DeepShadow_AtlasSlotOffsets[MAX_HAIR_MACROGROUP_COUNT];
Texture2D<float>	DeepShadow_FrontDepthTexture;
Texture2D<float4>	DeepShadow_DomTexture;

float3				Voxel_MinAABBs[MAX_HAIR_MACROGROUP_COUNT];
float3				Voxel_MaxAABBs[MAX_HAIR_MACROGROUP_COUNT];
uint				Voxel_Resolution;
Texture3D<uint> 	Voxel_DensityTexture0;
Texture3D<uint> 	Voxel_DensityTexture1;
Texture3D<uint> 	Voxel_DensityTexture2;
Texture3D<uint> 	Voxel_DensityTexture3;
Texture3D<uint> 	Voxel_DensityTexture4;
Texture3D<uint> 	Voxel_DensityTexture5;
Texture3D<uint> 	Voxel_DensityTexture6;
Texture3D<uint> 	Voxel_DensityTexture7;

Texture2D<float4> 	RayMarchMaskTexture;

StructuredBuffer<FNodeData> HairVisibilityNodeData;
StructuredBuffer<uint>		HairVisibilityNodeCoord;
Buffer<uint4>				IndirectArgsBuffer;

Texture3D<float4>			HairLUTTexture;
SamplerState				LinearSampler;
RWStructuredBuffer<FPackedHairTransmittanceMask> OutputColor;

#if PERMUTATION_GROUP_SIZE == 0
	#define TRANSMITTANCE_GROUP_SIZE 64
#elif PERMUTATION_GROUP_SIZE == 1
	#define TRANSMITTANCE_GROUP_SIZE 32
#else
	#error Unknown group size	
#endif

#if PERMUTATION_TRANSMITTANCE_TYPE == PERMUTATION_TRANSMITTANCE_DEEP_SHADOW
[numthreads(TRANSMITTANCE_GROUP_SIZE, 1, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	// Note: Use a fixed group count width (HAIR_VISIBILITY_GROUP_COUNT_WIDTH) for avoiding loading the indirect args (to avoid dep. memory fetch)
	const uint LocalOffset = DispatchThreadId.x + DispatchThreadId.y * TRANSMITTANCE_GROUP_SIZE * HAIR_VISIBILITY_GROUP_COUNT_WIDTH;

	if (LocalOffset >= MaxVisibilityNodeCount)
	{
		return;
	}

	const uint PackedCoord	 = HairVisibilityNodeCoord[LocalOffset];
	const uint2 PixelCoord	 = uint2((PackedCoord & 0xFFFF), ((PackedCoord>>16) & 0xFFFF));

	const float2 UV = (PixelCoord + float2(0.5f, 0.5f)) / float2(View.BufferSizeAndInvSize.xy);
	const float3 TransmittanceRandom = float3(InterleavedGradientNoise(PixelCoord, 1), InterleavedGradientNoise(PixelCoord, 2), InterleavedGradientNoise(PixelCoord, 3));

	{
		const FNodeData NodeData = HairVisibilityNodeData[LocalOffset];
		float			SampleDepth;
		FVisibilityData SampleVisData;
		float3			SampleBaseColor;
		float			SampleRoughness;
		float			SampleSpecular;
		DecodeNodeData(NodeData, SampleDepth, SampleVisData, SampleBaseColor, SampleRoughness, SampleSpecular);

		FGBufferData GBuffer;
		GBuffer.ShadingModelID = SHADINGMODELID_HAIR;
		GBuffer.WorldNormal = SampleVisData.Tangent;
		GBuffer.BaseColor = SampleBaseColor;
		GBuffer.Roughness = SampleRoughness;

		const uint MacroGroupIndex = clamp(SampleVisData.MacroGroupId, 0, MAX_HAIR_MACROGROUP_COUNT - 1);
		const int2 DeepShadowOffset = DeepShadow_AtlasSlotOffsets[MacroGroupIndex];
		const float4x4 WorldToLightTransform = DeepShadow_WorldToLightTransforms[MacroGroupIndex];
		
		FTransmittanceSettings Settings;
		Settings.DeepShadowOffset = DeepShadowOffset;
		Settings.DeepShadowResolution = DeepShadow_Resolution;
		Settings.WorldToLightTransform = WorldToLightTransform;
		Settings.LightDirection = LightDirection;
		Settings.LightPosition = LightPosition;
		Settings.DeepShadowDepthBiasScale = DepthBiasScale;
		Settings.DeepShadowDensityScale = DensityScale;
		Settings.TransmittanceKernelApertureInDegree = DeepShadow_KernelAperture;
		Settings.TransmittanceKernelType = DeepShadow_KernelType;
		Settings.Random = TransmittanceRandom;
		Settings.DebugMode = DeepShadow_DebugMode;

		const float SceneDepth = ConvertFromDeviceZ(SampleDepth);
		const float3 WorldPosition = ToWorldPosition(UV, SceneDepth);
		const FHairTransmittanceMask TransmittanceMask = ComputeTransmittance(WorldPosition, GBuffer, Settings, DeepShadow_FrontDepthTexture, DeepShadow_DomTexture, HairLUTTexture, LinearSampler);

		const FPackedHairTransmittanceMask PackedTransmittanceMask = PackTransmittanceMask(TransmittanceMask);
		OutputColor[LocalOffset] = PackedTransmittanceMask;
	}
}
#endif

#if PERMUTATION_TRANSMITTANCE_TYPE == PERMUTATION_TRANSMITTANCE_VOXEL || PERMUTATION_TRANSMITTANCE_TYPE == PERMUTATION_TRANSMITTANCE_VIRTUAL_VOXEL

#if VOXEL_TRAVERSAL_DEBUG
void PrintInfo(uint Index, uint2 PixelCoord, FHairTransmittanceMask TransmittanceMask)
{
	#if 0
	const uint2 OutputResolution = uint2(1024, 1024); // TODO send the actual output resolution
	float2 Origin = (PixelCoord) / float2(OutputResolution);
	Origin.y += (Index % 8) * 2 * ShaderPrintUniform.FontSize.w;

	float2 Pos = Origin;

	Pos = ShaderPrintSymbol(Pos, _H_);
	Pos = ShaderPrintSymbol(Pos, _A_);
	Pos = ShaderPrintSymbol(Pos, _I_);
	Pos = ShaderPrintSymbol(Pos, _R_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrintSymbol(Pos, _C_);
	Pos = ShaderPrintSymbol(Pos, _O_);
	Pos = ShaderPrintSymbol(Pos, _U_);
	Pos = ShaderPrintSymbol(Pos, _N_);
	Pos = ShaderPrintSymbol(Pos, _T_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrint(Pos, TransmittanceMask.HairCount);

	Pos = ShaderPrintNewline(Pos);
	Pos.x = Origin.x;

	Pos = ShaderPrintSymbol(Pos, _V_);
	Pos = ShaderPrintSymbol(Pos, _I_);
	Pos = ShaderPrintSymbol(Pos, _S_);
	Pos = ShaderPrintSymbol(Pos, _I_);
	Pos = ShaderPrintSymbol(Pos, _B_);
	Pos = ShaderPrintSymbol(Pos, _I_);
	Pos = ShaderPrintSymbol(Pos, _L_);
	Pos = ShaderPrintSymbol(Pos, _I_);
	Pos = ShaderPrintSymbol(Pos, _T_);
	Pos = ShaderPrintSymbol(Pos, _Y_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrint(Pos, TransmittanceMask.Visibility);

	Pos = ShaderPrintNewline(Pos);
	#endif
}
#endif

FHairTransmittanceMask ComputeTransmittanceVoxel(
	const uint2 PixelCoord,
	float3 WorldPosition,
	uint MacroGroupId,
	FGBufferData GBuffer,
	FTransmittanceSettings Settings,
	Texture3D<float4>	HairLUTTexture,
	SamplerState		HairLUTSampler,
	bool bDebugEnabled)
{

	const float VoxelShadowMaxDistance = 100000.0; // 1 km shadow distance	
	const bool bIsDirectionalLight = Settings.LightPosition.w == 0;	
	const float3 LightPosition  = bIsDirectionalLight ? -Settings.LightDirection*VoxelShadowMaxDistance + WorldPosition : Settings.LightPosition.xyz;
	const float3 LightDirection = bIsDirectionalLight ? -Settings.LightDirection : normalize(Settings.LightPosition.xyz - WorldPosition);
	const float TanLightAngle = bIsDirectionalLight ? 0 : LightRadius / length(Settings.LightPosition.xyz - WorldPosition);
	const float3 T = GBuffer.WorldNormal;
	const float SinLightAngle = dot(LightDirection, T);

	// Depth bias
	// Origin is shifted voxels away towards the light + a constant bias of the size of the voxel
	float MaxVoxelSize;
	{
	#if PERMUTATION_TRANSMITTANCE_TYPE == PERMUTATION_TRANSMITTANCE_VOXEL
		const float3 VoxelSize = (Voxel_MaxAABBs[MacroGroupId] - Voxel_MinAABBs[MacroGroupId]) / Voxel_Resolution;
		MaxVoxelSize = max(VoxelSize.x, max(VoxelSize.y, VoxelSize.z));
	#elif PERMUTATION_TRANSMITTANCE_TYPE == PERMUTATION_TRANSMITTANCE_VIRTUAL_VOXEL
		MaxVoxelSize = VirtualVoxel.VoxelWorldSize;
	#endif
	}

	// Compute the number of hair count between light & shading point
	const float DistanceThreshold = 100000;
	float AvgHairCount = 0;
	float AvgHairVisility = 0;
	#if PERMUTATION_SUPERSAMPLING
	const uint SampleCount = 8; 
	for (uint SampleIt = 0; SampleIt < SampleCount; ++SampleIt)
	#else
	const uint SampleIt = 0;
	#endif
	{
		#if PERMUTATION_SUPERSAMPLING
		const float3 SampleRandom = GetHairVoxelJitter(PixelCoord, SampleIt);
		#else
		const float3 SampleRandom = GetHairVoxelJitter(PixelCoord, View.StateFrameIndexMod8);
		#endif

		const float3 DepthBias = MaxVoxelSize * (Settings.DeepShadowDepthBiasScale*LightDirection + SampleRandom);
		const float3 SampleWorldPosition = WorldPosition + DepthBias;

		#if PERMUTATION_TRANSMITTANCE_TYPE == PERMUTATION_TRANSMITTANCE_VOXEL
		FHairTraversalResult Result = InitHairTraversalResult();
		if (MacroGroupId == 0) Result = ComputeHairCountVoxel(SampleWorldPosition, LightPosition, Voxel_MinAABBs[0], Voxel_MaxAABBs[0], Voxel_Resolution, Voxel_DensityTexture0, Settings.DeepShadowDensityScale, 0, DistanceThreshold);
		if (MacroGroupId == 1) Result = ComputeHairCountVoxel(SampleWorldPosition, LightPosition, Voxel_MinAABBs[1], Voxel_MaxAABBs[1], Voxel_Resolution, Voxel_DensityTexture1, Settings.DeepShadowDensityScale, 0, DistanceThreshold);
		if (MacroGroupId == 2) Result = ComputeHairCountVoxel(SampleWorldPosition, LightPosition, Voxel_MinAABBs[2], Voxel_MaxAABBs[2], Voxel_Resolution, Voxel_DensityTexture2, Settings.DeepShadowDensityScale, 0, DistanceThreshold);
		if (MacroGroupId == 3) Result = ComputeHairCountVoxel(SampleWorldPosition, LightPosition, Voxel_MinAABBs[3], Voxel_MaxAABBs[3], Voxel_Resolution, Voxel_DensityTexture3, Settings.DeepShadowDensityScale, 0, DistanceThreshold);
		if (MacroGroupId == 4) Result = ComputeHairCountVoxel(SampleWorldPosition, LightPosition, Voxel_MinAABBs[4], Voxel_MaxAABBs[4], Voxel_Resolution, Voxel_DensityTexture4, Settings.DeepShadowDensityScale, 0, DistanceThreshold);
		if (MacroGroupId == 5) Result = ComputeHairCountVoxel(SampleWorldPosition, LightPosition, Voxel_MinAABBs[5], Voxel_MaxAABBs[5], Voxel_Resolution, Voxel_DensityTexture5, Settings.DeepShadowDensityScale, 0, DistanceThreshold);
		if (MacroGroupId == 6) Result = ComputeHairCountVoxel(SampleWorldPosition, LightPosition, Voxel_MinAABBs[6], Voxel_MaxAABBs[6], Voxel_Resolution, Voxel_DensityTexture6, Settings.DeepShadowDensityScale, 0, DistanceThreshold);
		if (MacroGroupId == 7) Result = ComputeHairCountVoxel(SampleWorldPosition, LightPosition, Voxel_MinAABBs[7], Voxel_MaxAABBs[7], Voxel_Resolution, Voxel_DensityTexture7, Settings.DeepShadowDensityScale, 0, DistanceThreshold);
		#endif

		#if PERMUTATION_TRANSMITTANCE_TYPE == PERMUTATION_TRANSMITTANCE_VIRTUAL_VOXEL
		FVirtualVoxelCommonDesc CommonDesc;
		CommonDesc.PageCountResolution	= VirtualVoxel.PageCountResolution;
		CommonDesc.VoxelWorldSize		= VirtualVoxel.VoxelWorldSize;
		CommonDesc.PageTextureResolution= VirtualVoxel.PageTextureResolution;
		CommonDesc.PageResolution		= VirtualVoxel.PageResolution;

		const FPackedVirtualVoxelNodeDesc PackedNode = VirtualVoxel.NodeDescBuffer[MacroGroupId];
		const FVirtualVoxelNodeDesc NodeDesc = UnpackVoxelNode(PackedNode, VirtualVoxel.PageResolution);

		FHairTraversalSettings TraversalSettings = InitHairTraversalSettings();
		TraversalSettings.DensityScale = VirtualVoxel.DensityScale;
		TraversalSettings.CountThreshold = GetOpaqueVoxelValue();
		TraversalSettings.DistanceThreshold = DistanceThreshold;
		TraversalSettings.bDebugEnabled = bDebugEnabled;
		TraversalSettings.SteppingScale = VirtualVoxel.SteppingScale;
		TraversalSettings.Random = SampleRandom;
		TraversalSettings.TanConeAngle = 0; // TanLightAngle; // Area light transmission is disabled as it is too noisy for now

		const FHairTraversalResult Result = ComputeHairCountVirtualVoxel(
			SampleWorldPosition, 
			LightPosition,
			CommonDesc,
			NodeDesc,
			VirtualVoxel.PageIndexBuffer,
			VirtualVoxel.PageTexture,
			TraversalSettings);
		InitHairTraversalResult();
		#endif

		AvgHairCount += Result.HairCount;
		AvgHairVisility += Result.Visibility;
	}

	#if PERMUTATION_SUPERSAMPLING
	AvgHairCount /= max(1, SampleCount);
	AvgHairVisility /= max(1, SampleCount);
	#endif

	return ComputeTransmittanceFromHairCount(AvgHairCount, AvgHairVisility, GBuffer, SinLightAngle, HairLUTTexture, HairLUTSampler);
}

[numthreads(TRANSMITTANCE_GROUP_SIZE, 1, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	const uint LocalOffset = DispatchThreadId.x + DispatchThreadId.y * TRANSMITTANCE_GROUP_SIZE * HAIR_VISIBILITY_GROUP_COUNT_WIDTH;

	if (LocalOffset >= MaxVisibilityNodeCount)
	{
		return;
	}

	const uint PackedCoord = HairVisibilityNodeCoord[LocalOffset];
	const uint2 PixelCoord = uint2((PackedCoord & 0xFFFF), ((PackedCoord >> 16) & 0xFFFF));

	if (RayMarchMaskTexture.Load(uint3(PixelCoord, 0)).r == 0.0f)
	{
		// This pixel is already fully shadowed opaque. (RayMarchMaskTexture is computed using the closest sample as of today)
		FHairTransmittanceMask DefaultMask = InitHairTransmittanceMask();
		const FPackedHairTransmittanceMask PackedTransmittanceMask = PackTransmittanceMask(DefaultMask);
		OutputColor[LocalOffset] = PackedTransmittanceMask;
		return;
	}

	#if VOXEL_TRAVERSAL_DEBUG
	const bool bDebugEnabled = PixelCoord.x == GetCursorPos().x && PixelCoord.y == GetCursorPos().y;
	#else
	const bool bDebugEnabled = false;
	#endif	
	const float2 UV = (PixelCoord.xy + float2(0.5f, 0.5f)) / float2(View.BufferSizeAndInvSize.xy);
	{
		const FNodeData NodeData = HairVisibilityNodeData[LocalOffset];
		float			SampleDepth;
		FVisibilityData SampleVisData;
		float3			SampleBaseColor;
		float			SampleRoughness;
		float			SampleSpecular;
		DecodeNodeData(NodeData, SampleDepth, SampleVisData, SampleBaseColor, SampleRoughness, SampleSpecular);

		FGBufferData GBuffer;
		GBuffer.ShadingModelID = SHADINGMODELID_HAIR;
		GBuffer.WorldNormal = SampleVisData.Tangent;
		GBuffer.BaseColor = SampleBaseColor;
		GBuffer.Roughness = SampleRoughness;
		GBuffer.Specular = SampleSpecular;

		const uint MacroGroupIndex = clamp(SampleVisData.MacroGroupId, 0, MAX_HAIR_MACROGROUP_COUNT - 1);

		FTransmittanceSettings Settings;
		Settings.LightDirection = LightDirection;
		Settings.LightPosition = LightPosition;
		Settings.DeepShadowDensityScale = DensityScale;
		Settings.DeepShadowDepthBiasScale = DepthBiasScale;
		Settings.Random = GetHairVoxelJitter(PixelCoord.xy, View.StateFrameIndexMod8);

		const float SceneDepth = ConvertFromDeviceZ(SampleDepth);
		const float3 WorldPosition = ToWorldPosition(UV, SceneDepth);
	
		const FHairTransmittanceMask TransmittanceMask = ComputeTransmittanceVoxel(PixelCoord, WorldPosition, MacroGroupIndex, GBuffer, Settings, HairLUTTexture, LinearSampler, bDebugEnabled);

		#if VOXEL_TRAVERSAL_DEBUG
		if (bDebugEnabled)
		{
			PrintInfo(LocalOffset, PixelCoord, TransmittanceMask);
		}
		#endif	

		const FPackedHairTransmittanceMask PackedTransmittanceMask = PackTransmittanceMask(TransmittanceMask);
		OutputColor[LocalOffset] = PackedTransmittanceMask;
	}
}
#endif