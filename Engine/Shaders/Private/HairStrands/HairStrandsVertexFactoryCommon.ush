// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "/Engine/Shared/HairStrandsDefinitions.h"

#ifndef HAIR_STRANDS_PARAMETERS
#define HAIR_STRANDS_PARAMETERS 0
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hair control points

struct FHairControlPoint
{
	float3 Position;
	float  WorldRadius;
	float  UCoord;
	uint   Type;
};

uint4 PackHairControlPoint(
	FHairControlPoint CP,
	float3 InVF_PositionOffset,
	float InVF_Radius)
{
	uint PackedAttribute =  (uint(clamp(CP.UCoord * 0xFFu, 0u, 0xFFu)) << 8) |
							(uint(clamp((CP.WorldRadius / InVF_Radius) * 63u, 0u, 63u)) << 2u) |
							(CP.Type & 0x3);
	return uint4(f32tof16(CP.Position - InVF_PositionOffset), PackedAttribute);
}

FHairControlPoint UnpackHairControlPoint(
	uint4 InPackedData,
	float3 InVF_PositionOffset,
	float InVF_Radius,
	float InVF_RootScale,
	float InVF_TipScale)
{
	const uint PackedAlpha	= asuint(InPackedData.a);

	FHairControlPoint Out = (FHairControlPoint)0;
	Out.Position	= f16tof32(InPackedData.xyz) + InVF_PositionOffset;
	Out.UCoord		= ((PackedAlpha & 0xFF00) >> 8) / 255.f;
	Out.WorldRadius	= ((PackedAlpha & 0x00FC) >> 2) / 63.f;
	Out.Type		= PackedAlpha & 0x3;

	Out.WorldRadius *= InVF_Radius * lerp(InVF_RootScale, InVF_TipScale, Out.UCoord);

	return Out;	
}

float UnpackHairControlPointCoordU(uint4 InPackedData)
{
	const uint PackedAlpha = asuint(InPackedData.w);
	return ((PackedAlpha & 0xFF00) >> 8) / 255.f;
}

float3 UnpackHairControlPointPosition(uint4 InPackedData, float3 InVF_PositionOffset)
{
	return f16tof32(InPackedData.xyz) + InVF_PositionOffset;
}

uint4 PackHairControlPointPosition(uint4 InPackedData, float3 InNewPosition, float3 InPositionOffset)
{
	return uint4(f32tof16(InNewPosition.xyz - InPositionOffset), InPackedData.w);
}

bool IsValidHairStrandsSegment(const FHairControlPoint CP0, const FHairControlPoint CP1)
{
	return !(CP0.Type == HAIR_CONTROLPOINT_END && CP1.Type == HAIR_CONTROLPOINT_START);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hair attributes

float2 UnpackHairRootUV(uint In)
{
	float2 RootUV, RootIndex;
	RootUV.x	= ((In) & 0x7FF) / 2047.f;			// Coord are encoded on 11 bits
	RootUV.y	= ((In >> 11) & 0x7FF) / 2047.f;	// Coord are encoded on 11 bits 
	RootIndex.x = ((In >> 22) & 0x1F);				// UDIM tile are encoded on 5bits
	RootIndex.y = ((In >> 27) & 0x1F);				// UDIM tile are encoded on 5bits

	// Invert V to compensate image origin flip. Similar to GetHairStrandsRootUV in HairCardsAttributeCommon.ush
	RootUV.y = 1.0f - RootUV.y;

	return RootUV = RootUV + RootIndex;
}

float UnpackHairLength(uint In)
{
	return f16tof32(In & 0xFFFF);
}

float UnpackHairSeed(uint In)
{
	return (In & 0xFF) / 255.f;
}

uint3 UnpackHairClumpID(uint In)
{
	return (In & 0xFFFF).xxx;
}

uint3 UnpackHairClumpID(uint2 In)
{
	return uint3(In.x & 0xFFFF, (In.x>>16) & 0xFFFF, (In.x>>32) & 0xFFFF);
}

float3 UnpackHairColor(uint In)
{
	float3 Out;
	Out.x = (In       & 0x7FF) / 2047.f;
	Out.y = ((In>>11) & 0x7FF) / 2047.f;
	Out.z = ((In>>22) & 0x3FF) / 1023.f;
	return Out;
}

float UnpackHairRoughness(uint In)
{
	return (In & 0xFF) / 255.f;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hair curve

struct FHairCurve
{
	uint PointIndex;
	uint PointCount;
};

FHairCurve UnpackHairCurve(uint In)
{
	#if HAIR_MAX_NUM_POINT_PER_CURVE != 0xFF || HAIR_MAX_NUM_POINT_PER_GROUP != 0xFFFFFFFF
	#error Update hair curve ENCODING_TYPE
	#endif

	FHairCurve Out = (FHairCurve)0;
	Out.PointIndex = In & HAIR_MAX_NUM_POINT_PER_GROUP;
	Out.PointCount = In >> 24;
	return Out;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Hair strands instance parameters

#define HAIR_STRANDS_INSTANCE_PARAMETERS(Prefix) \
	uint				Prefix##_bCullingEnable; \
	uint				Prefix##_bRaytracingGeometry; \
	uint				Prefix##_RaytracingProceduralSplits; \
	uint				Prefix##_GroupIndex; \
	float				Prefix##_Radius; \
	float				Prefix##_RootScale; \
	float				Prefix##_TipScale; \
	float				Prefix##_Length; \
	float				Prefix##_Density; \
	uint				Prefix##_bStableRasterization; \
	float3				Prefix##_PositionOffset; \
	uint				Prefix##_PointCount; \
	uint				Prefix##_CurveCount; \
	float4x4			Prefix##_LocalToWorldPrimitiveTransform; \
	float4x4			Prefix##_LocalToTranslatedWorldPrimitiveTransform; \
	uint4				Prefix##_CurveAttributeOffsets[HAIR_CURVE_ATTRIBUTE_OFFSET_COUNT]; \
	uint4				Prefix##_PointAttributeOffsets[HAIR_POINT_ATTRIBUTE_OFFSET_COUNT]; \
	Buffer<uint4>		Prefix##_PositionBuffer; \
	Buffer<float4>		Prefix##_PositionOffsetBuffer; \
	Buffer<uint>		Prefix##_CurveBuffer; \
	Buffer<uint>		Prefix##_PointToCurveBuffer; \
	ByteAddressBuffer 	Prefix##_CurveAttributeBuffer; \
	ByteAddressBuffer 	Prefix##_PointAttributeBuffer; \
	Buffer<uint>		Prefix##_CullingIndirectBuffer; \
	Buffer<uint>		Prefix##_CullingIndexBuffer; \
	Buffer<float>		Prefix##_CullingRadiusScaleBuffer; \
	Buffer<uint>		Prefix##_CullingIndirectBufferArgs;

#if defined(HAIR_STRANDS_PARAMETERS) && HAIR_STRANDS_PARAMETERS == 1
	HAIR_STRANDS_INSTANCE_PARAMETERS(HairStrandsVF)
#endif