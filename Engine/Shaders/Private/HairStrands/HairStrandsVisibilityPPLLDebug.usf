// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"

#include "HairStrandsVisibilityCommon.ush"

float PPLLMeanListElementCountPerPixel;
float PPLLMaxTotalListElementCount;

Texture2D<uint> PPLLCounter;
Texture2D<uint> PPLLNodeIndex;
StructuredBuffer<FPPLLNodeData> PPLLNodeData;

void VisibilityDebugPPLLPS(
	in float4 SVPos : SV_POSITION,
	out float4 OutLuminance : SV_Target0)
{
	uint2 PixPos = SVPos.xy;

	uint NextNodeIndex = PPLLNodeIndex[PixPos];
	if (NextNodeIndex != 0xFFFFFFFF)
	{
		uint StrandCount = 0;
		do
		{
			StrandCount++;
			FPPLLNodeData Node = PPLLNodeData[NextNodeIndex];
			NextNodeIndex = Node.NextNodeIndex;
		} while (NextNodeIndex != 0xFFFFFFFF);

		float l = saturate(StrandCount / PPLLMeanListElementCountPerPixel);

		OutLuminance = float4(l, 1.0f - l, 0.0f, 0.0f);
	}
	else
	{
		OutLuminance = float4(0.0f, 0.0f, 0.0f, 1.0f);
	}

	const float2 Origin = 100.0f;
	const float2 Size = float2(200.0f, 20.0f);
	if (all(PixPos >= Origin) && all(PixPos <= (Origin + Size)))
	{
		float2 LocalPos = PixPos - Origin;
		float PPLLListElementcount = PPLLCounter[uint2(0, 0)];
		float MemoryUsage = PPLLListElementcount / PPLLMaxTotalListElementCount;

		if (MemoryUsage > LocalPos.x / Size.x)
		{
			OutLuminance = float4(MemoryUsage, 1.0f - MemoryUsage, 1.0f - MemoryUsage, 0.0f);
		}
		else
		{
			OutLuminance = float4(0.2f, 0.2f, 0.2f, 0.0f);
		}

		if (any(PixPos == Origin) || any(PixPos == (Origin + Size)))
		{
			OutLuminance = float4(1.0f, 1.0f, 1.0f, 0.0f);
		}
	}
}
