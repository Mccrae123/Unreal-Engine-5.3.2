// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once 

// Check parameters/resources prefixing macro is well defined
#ifndef HAIR_STRANDS_ATTRIBUTE_ACCESSORS
#error HAIR_STRANDS_ATTRIBUTE_ACCESSORS needs to be defined
#endif

// Redefine macro for easing reability
#define PREFIX(Name) HAIR_STRANDS_ATTRIBUTE_ACCESSORS(Name)

float InternalGetHairStrandsWorldRadius(uint HairPrimitiveId, float2 VertexUV)
{
	const float Radius0 = InternalGetHairStrandsWorldRadius(PREFIX(PositionBuffer), HairPrimitiveId,   PREFIX(Radius), PREFIX(RootScale), PREFIX(TipScale));
	const float Radius1 = InternalGetHairStrandsWorldRadius(PREFIX(PositionBuffer), HairPrimitiveId+1, PREFIX(Radius), PREFIX(RootScale), PREFIX(TipScale));
	return lerp(Radius0, Radius1, VertexUV.x);
}
float InternalGetHairStrandsCoordU(uint HairPrimitiveId, float2 VertexUV)
{
	const float UCoord0 = InternalGetHairStrandsCoordU(PREFIX(PositionBuffer), HairPrimitiveId,   PREFIX(Radius), PREFIX(RootScale), PREFIX(TipScale));
	const float UCoord1 = InternalGetHairStrandsCoordU(PREFIX(PositionBuffer), HairPrimitiveId+1, PREFIX(Radius), PREFIX(RootScale), PREFIX(TipScale));
	return lerp(UCoord0, UCoord1, VertexUV.x);
}
float GetHairStrandsDepth(float2 InUV)
{
	return 0;
}
float GetHairStrandsCoverage(uint HairPrimitiveId, float2 HairPrimitiveUV)
{
	return 1;
}
float2 GetHairStrandsUV(uint HairPrimitiveId, float2 HairPrimitiveUV)
{
	float2 Out;
	Out.x = InternalGetHairStrandsCoordU(HairPrimitiveId, HairPrimitiveUV);
	Out.y = HairPrimitiveUV.y;
	return Out;
}
float2 GetHairStrandsDimensions(uint HairPrimitiveId, float2 HairPrimitiveUV)
{
	const float CurveLength = UnpackHairLength(InternalGetHairStrandsAttributesPerCurve(HairPrimitiveId, HAIR_CURVE_ATTRIBUTE_OFFSET_LENGTH(PREFIX(CurveAttributeOffsets)), HAIR_CURVE_ATTRIBUTE_STRIDE_LENGTH, PREFIX(CurveAttributeBuffer), PREFIX(PointToCurveBuffer)));
	const float CoordU = InternalGetHairStrandsCoordU(HairPrimitiveId, HairPrimitiveUV);
	const float Radius = InternalGetHairStrandsWorldRadius(HairPrimitiveId, HairPrimitiveUV);
	return float2(CurveLength * CoordU, Radius);
}\
float2 GetHairStrandsRootUV(uint HairPrimitiveId, float2 HairPrimitiveUV)
{
	const uint RootUVOffset = HAIR_CURVE_ATTRIBUTE_OFFSET_ROOTUV(PREFIX(CurveAttributeOffsets));
	if (IsAttributeValid(RootUVOffset))
	{
		return UnpackHairRootUV(InternalGetHairStrandsAttributesPerCurve(HairPrimitiveId, RootUVOffset, HAIR_CURVE_ATTRIBUTE_STRIDE_ROOTUV, PREFIX(CurveAttributeBuffer), PREFIX(PointToCurveBuffer)));
	}
	else
	{
		return 0;
	}
}
float GetHairStrandsSeed(uint HairPrimitiveId, float2 HairPrimitiveUV)
{
	return UnpackHairSeed(InternalGetHairStrandsAttributesPerCurve(HairPrimitiveId, HAIR_CURVE_ATTRIBUTE_OFFSET_SEED(PREFIX(CurveAttributeOffsets)), HAIR_CURVE_ATTRIBUTE_STRIDE_SEED, PREFIX(CurveAttributeBuffer), PREFIX(PointToCurveBuffer)));
}
uint3 GetHairStrandsClumpID(uint HairPrimitiveId, float2 HairPrimitiveUV)
{
	const uint ClumpIdOffset  = HAIR_CURVE_ATTRIBUTE_OFFSET_CLUMPID(PREFIX(CurveAttributeOffsets));
	const uint ClumpId3Offset = HAIR_CURVE_ATTRIBUTE_OFFSET_CLUMPID3(PREFIX(CurveAttributeOffsets));
	if (IsAttributeValid(ClumpIdOffset))
	{
		return UnpackHairClumpID(InternalGetHairStrandsAttributesPerCurve(HairPrimitiveId, ClumpIdOffset, HAIR_CURVE_ATTRIBUTE_STRIDE_CLUMPID, PREFIX(CurveAttributeBuffer), PREFIX(PointToCurveBuffer)));
	}
	else if (IsAttributeValid(ClumpId3Offset))
	{
		return UnpackHairClumpID(InternalGetHairStrandsAttributesPerCurve64(HairPrimitiveId, ClumpId3Offset, HAIR_CURVE_ATTRIBUTE_STRIDE_CLUMPID3, PREFIX(CurveAttributeBuffer), PREFIX(PointToCurveBuffer)));
	}
	else
	{
		return 0;
	}
}
float3 GetHairStrandsBaseColor(uint HairPrimitiveId, float2 HairPrimitiveUV)
{
	const uint ColorOffset = HAIR_POINT_ATTRIBUTE_OFFSET_COLOR(PREFIX(PointAttributeOffsets));
	if (IsAttributeValid(ColorOffset))
	{
		const float3 Color0 = UnpackHairColor(InternalGetHairStrandsAttributesPerVertex(HairPrimitiveId,   ColorOffset, HAIR_POINT_ATTRIBUTE_STRIDE_COLOR, PREFIX(PointAttributeBuffer)));
		const float3 Color1 = UnpackHairColor(InternalGetHairStrandsAttributesPerVertex(HairPrimitiveId+1, ColorOffset, HAIR_POINT_ATTRIBUTE_STRIDE_COLOR, PREFIX(PointAttributeBuffer)));
		return lerp(Color0, Color1, HairPrimitiveUV.x);
	}
	else
	{
		return 0;
	}
}
float GetHairStrandsRoughness(uint HairPrimitiveId, float2 HairPrimitiveUV)
{
	const uint RoughnessOffset = HAIR_POINT_ATTRIBUTE_OFFSET_ROUGHNESS(PREFIX(PointAttributeOffsets));
	if (IsAttributeValid(RoughnessOffset))
	{
		const float Roughness0 = UnpackHairRoughness(InternalGetHairStrandsAttributesPerVertex(HairPrimitiveId,   RoughnessOffset, HAIR_POINT_ATTRIBUTE_STRIDE_ROUGHNESS, PREFIX(PointAttributeBuffer)));
		const float Roughness1 = UnpackHairRoughness(InternalGetHairStrandsAttributesPerVertex(HairPrimitiveId+1, RoughnessOffset, HAIR_POINT_ATTRIBUTE_STRIDE_ROUGHNESS, PREFIX(PointAttributeBuffer)));
		return lerp(Roughness0, Roughness1, HairPrimitiveUV.x);
	}
	else
	{
		return 0;
	}
}
float GetHairStrandsAO(uint HairPrimitiveId, float2 HairPrimitiveUV)
{
	const uint AoOffset = HAIR_POINT_ATTRIBUTE_OFFSET_AO(PREFIX(PointAttributeOffsets));
	if (IsAttributeValid(AoOffset))
	{
		const float AO0 = UnpackHairRoughness(InternalGetHairStrandsAttributesPerVertex(HairPrimitiveId, AoOffset, HAIR_POINT_ATTRIBUTE_STRIDE_AO, PREFIX(PointAttributeBuffer)));
		const float AO1 = UnpackHairRoughness(InternalGetHairStrandsAttributesPerVertex(HairPrimitiveId+1, AoOffset, HAIR_POINT_ATTRIBUTE_STRIDE_AO, PREFIX(PointAttributeBuffer)));
		return lerp(AO0, AO1, HairPrimitiveUV.x);
	}
	else
	{
		return 1.f;
	}
}
float GetHairStrandsDepth(uint HairPrimitiveId, float2 InUV, float InDeviceZ) 
{ 
	return 0.f; 
} 
float GetHairStrandsGroupIndex(float2 InAtlasUV) 
{ 
	return PREFIX(GroupIndex); 
}
bool HasHairStrandsRootUV() 	{ return IsAttributeValid(HAIR_CURVE_ATTRIBUTE_OFFSET_ROOTUV(PREFIX(CurveAttributeOffsets))); }
bool HasHairStrandsClumpId() 	{ return IsAttributeValid(HAIR_CURVE_ATTRIBUTE_OFFSET_CLUMPID(PREFIX(CurveAttributeOffsets))); }
bool HasHairStrandsClumpId3() 	{ return IsAttributeValid(HAIR_CURVE_ATTRIBUTE_OFFSET_CLUMPID3(PREFIX(CurveAttributeOffsets))); }
bool HasHairStrandsColor() 		{ return IsAttributeValid(HAIR_POINT_ATTRIBUTE_OFFSET_COLOR(PREFIX(PointAttributeOffsets))); }
bool HasHairStrandsRoughness() 	{ return IsAttributeValid(HAIR_POINT_ATTRIBUTE_OFFSET_ROUGHNESS(PREFIX(PointAttributeOffsets))); }
bool HasHairStrandsAO() 		{ return IsAttributeValid(HAIR_POINT_ATTRIBUTE_OFFSET_AO(PREFIX(PointAttributeOffsets))); }