// Copyright Epic Games, Inc. All Rights Reserved.
#include "../Common.ush"

uint MaxVertexCount;
#if PERMUTATION_POSITION_TYPE == 0
Buffer<float> VertexPositionsBuffer;
#elif PERMUTATION_POSITION_TYPE == 1
Buffer<float> RDGVertexPositionsBuffer;
#define VertexPositionsBuffer RDGVertexPositionsBuffer
#endif

uint MaxSampleCount;
Buffer<uint> SampleIndicesBuffer;
RWBuffer<float4> OutSamplePositionsBuffer;

[numthreads(128, 1, 1)]
void MainCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{ 
	const uint SampleIndex = DispatchThreadId.x;
	if (SampleIndex >= MaxSampleCount) 
		return;

	const uint VertexIndex = SampleIndicesBuffer[SampleIndex];
	if (VertexIndex >= MaxVertexCount) 
		return;

	float3 SamplePosition = float3(0,0,0);
	SamplePosition.x = VertexPositionsBuffer.Load(VertexIndex*3 + 0);
	SamplePosition.y = VertexPositionsBuffer.Load(VertexIndex*3 + 1);
	SamplePosition.z = VertexPositionsBuffer.Load(VertexIndex*3 + 2);

	OutSamplePositionsBuffer[SampleIndex] = float4(SamplePosition,1);
}