// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	DistanceFieldLightingShared.usf
=============================================================================*/

#ifndef THREADGROUP_SIZEX
#define THREADGROUP_SIZEX 1
#endif   

#ifndef THREADGROUP_SIZEY
#define THREADGROUP_SIZEY 1
#endif

#define THREADGROUP_TOTALSIZE (THREADGROUP_SIZEX * THREADGROUP_SIZEY)

#ifndef DOWNSAMPLE_FACTOR
#define DOWNSAMPLE_FACTOR 1
#endif

#ifndef UPDATEOBJECTS_THREADGROUP_SIZE
#define UPDATEOBJECTS_THREADGROUP_SIZE 1
#endif

#ifndef DISTANCEFIELD_PRIMITIVE_TYPE_DEFINED
#define DISTANCEFIELD_PRIMITIVE_TYPE_DEFINED
#define DFPT_SignedDistanceField 0
#define DFPT_HeightField 1
#endif

#ifndef DISTANCEFIELD_PRIMITIVE_TYPE
#define DISTANCEFIELD_PRIMITIVE_TYPE DFPT_SignedDistanceField
#endif

float3 DistanceFieldVolumePositionToUV(float3 VolumePosition, float3 UVScale, float3 UVAdd)
{
	float3 VolumeUV = VolumePosition * UVScale + UVAdd;
	return VolumeUV;
}

Texture2D HFVisibilityTexture;

#if (DISTANCEFIELD_PRIMITIVE_TYPE == DFPT_SignedDistanceField)
Texture3D DistanceFieldTexture;

float SampleMeshDistanceField(float3 VolumeUV, float2 ObjectDistanceFieldMAD)
{
	float TextureValue = Texture3DSampleLevel(DistanceFieldTexture, GlobalBilinearWrappedSampler, VolumeUV, 0).x;
#if EIGHT_BIT_MESH_DISTANCE_FIELDS
	TextureValue = TextureValue * ObjectDistanceFieldMAD.x + ObjectDistanceFieldMAD.y;
#endif
	return TextureValue;
}

float SampleHeightFieldAtlas(float2 UV)
{
	return 0.0;
}

float SampleHFVisibilityTexture(float2 UV)
{
	return 0.0;
}
#else
Texture2D HeightFieldTexture;

float SampleMeshDistanceField(float3 VolumeUV, float2 ObjectDistanceFieldMAD)
{
	return 0.0;
}

float SampleHeightFieldAtlas(float2 UV)
{
	float4 SampleValue = Texture2DSampleLevel(HeightFieldTexture, GlobalBilinearWrappedSampler, UV, 0);
	return DecodePackedHeight(SampleValue.xy);
}

float SampleHFVisibilityTexture(float2 UV)
{
	return Texture2DSampleLevel(HFVisibilityTexture, GlobalBilinearWrappedSampler, UV, 0).r;
}
#endif

float3 DistanceFieldAtlasTexelSize;
float2 HeightFieldAtlasTexelSize;

RWBuffer<uint> RWObjectIndirectArguments;
Buffer<uint> ObjectIndirectArguments;

uint GetCulledNumObjects()
{
	// IndexCount, NumInstances, StartIndex, BaseVertexIndex, FirstInstance
	return ObjectIndirectArguments[1];
}

// In float4's.  Must match equivalent C++ variables.
#if (DISTANCEFIELD_PRIMITIVE_TYPE == DFPT_SignedDistanceField)
#define OBJECT_BOUNDS_STRIDE 2
#define OBJECT_DATA_STRIDE 11
#elif (DISTANCEFIELD_PRIMITIVE_TYPE == DFPT_HeightField)
#define OBJECT_BOUNDS_STRIDE 2
#define OBJECT_DATA_STRIDE 6
#else
#error Unknown distance field primitive type
#endif

struct FDFObjectBounds
{
	float3 Center;		// World space bounds center
	float SphereRadius;	// World space bounding sphere extent
	float3 BoxExtent;	// World space AABB extent
	uint OftenMoving;
};

uint NumSceneObjects;
StructuredBuffer<float4> SceneObjectBounds;

FDFObjectBounds LoadDFObjectBounds(uint ObjectIndex)
{
	FDFObjectBounds Bounds;

	Bounds.Center = SceneObjectBounds[ObjectIndex * OBJECT_BOUNDS_STRIDE + 0].xyz;
	Bounds.SphereRadius = SceneObjectBounds[ObjectIndex * OBJECT_BOUNDS_STRIDE + 0].w;

	Bounds.BoxExtent = SceneObjectBounds[ObjectIndex * OBJECT_BOUNDS_STRIDE + 1].xyz;
	Bounds.OftenMoving = SceneObjectBounds[ObjectIndex * OBJECT_BOUNDS_STRIDE + 1].w;

	return Bounds;
}

struct FDFObjectData
{
	float3 LocalPositionExtent;
	float LocalSurfaceBias;

	float3 UVAdd;
	float3 UVScale;
	bool bGeneratedAsTwoSided;
	float VolumeScale;
	float SelfShadowBias;

	float2 DistanceFieldMAD;
	float2 MinMaxDrawDistance2;

	float4x4 WorldToVolume;
	float4x4 VolumeToWorld;

	float3 VolumeToLocalScale;
};

FDFObjectData LoadDFObjectDataFromBuffer(StructuredBuffer<float4> SourceBuffer, uint ObjectIndex)
{
	FDFObjectData Data;

	float4 V0 = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 0];
	float4 V1 = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 1];
	float4 V2 = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 2];
	Data.WorldToVolume = transpose(float4x4(V0, V1, V2, float4(0.0f, 0.0f, 0.0f, 1.0f)));

	Data.LocalPositionExtent = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 3].xyz;
	Data.LocalSurfaceBias = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 3].w;

	V0 = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 4];
	Data.UVScale = V0.xyz;
	Data.bGeneratedAsTwoSided = V0.w < 0.0f;
	Data.VolumeScale = abs(V0.w);

	Data.UVAdd = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 5].xyz;
	Data.SelfShadowBias = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 5].w;

	Data.DistanceFieldMAD = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 6].xy;
	Data.MinMaxDrawDistance2 = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 6].zw;

	V0 = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 7];
	V1 = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 8];
	V2 = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 9];
	Data.VolumeToWorld = transpose(float4x4(V0, V1, V2, float4(0.0f, 0.0f, 0.0f, 1.0f)));

	Data.VolumeToLocalScale = SourceBuffer[ObjectIndex * OBJECT_DATA_STRIDE + 10].xyz;

	return Data;
}

StructuredBuffer<float4> SceneObjectData;

FDFObjectData LoadDFObjectData(uint ObjectIndex)
{
	return LoadDFObjectDataFromBuffer(SceneObjectData, ObjectIndex);
}

// In float4's.  Must match equivalent C++ variables.
#if (DISTANCEFIELD_PRIMITIVE_TYPE == DFPT_SignedDistanceField)
#define CULLED_OBJECT_DATA_STRIDE OBJECT_DATA_STRIDE
#define CULLED_OBJECT_BOX_BOUNDS_STRIDE 5
#elif (DISTANCEFIELD_PRIMITIVE_TYPE == DFPT_HeightField)
#define CULLED_OBJECT_DATA_STRIDE 6
#define CULLED_OBJECT_BOX_BOUNDS_STRIDE 5
#else
#error Unknown distance field primitive type
#endif

float4 LoadObjectPositionAndRadiusFromBuffer(uint ObjectIndex, StructuredBuffer<float4> InBuffer)
{
	return InBuffer[ObjectIndex];
}

void LoadHeightFieldObjectBoxBoundsFromBuffer(uint ObjectIndex, StructuredBuffer<float4> InBuffer, out float3 OutBoxOrigin, out float3 OutBoxExtent)
{
	OutBoxOrigin = InBuffer[ObjectIndex * OBJECT_BOUNDS_STRIDE + 0].xyz;
	OutBoxExtent = InBuffer[ObjectIndex * OBJECT_BOUNDS_STRIDE + 1].xyz;
}

float4x4 LoadHeightFieldObjectWorldToLocalFromBuffer(uint ObjectIndex, StructuredBuffer<float4> InBuffer)
{
	float4 M0 = InBuffer[ObjectIndex * CULLED_OBJECT_DATA_STRIDE + 0];
	float4 M1 = InBuffer[ObjectIndex * CULLED_OBJECT_DATA_STRIDE + 1];
	float4 M2 = InBuffer[ObjectIndex * CULLED_OBJECT_DATA_STRIDE + 2];

	return transpose(float4x4(M0, M1, M2, float4(0, 0, 0, 1)));
}

float4 LoadHeightFieldObjectSizeScaleFromBuffer(uint ObjectIndex, StructuredBuffer<float4> InBuffer)
{
	return InBuffer[ObjectIndex * CULLED_OBJECT_DATA_STRIDE + 3];
}

float4 LoadHeightFieldObjectAtlasUVScaleBiasFromBuffer(uint ObjectIndex, StructuredBuffer<float4> InBuffer)
{
	return InBuffer[ObjectIndex * CULLED_OBJECT_DATA_STRIDE + 4];
}

float4 LoadHeightFieldObjectVisibilityAtlasUVScaleBiasFromBuffer(uint ObjectIndex, StructuredBuffer<float4> InBuffer)
{
	return InBuffer[ObjectIndex * CULLED_OBJECT_DATA_STRIDE + 5];
}

// These are structured buffers so they can be scalar memory loads on GCN
StructuredBuffer<float4> CulledObjectBounds;
StructuredBuffer<float4> CulledObjectData;
StructuredBuffer<float4> CulledObjectBoxBounds;

RWStructuredBuffer<float4> RWCulledObjectBounds;
RWStructuredBuffer<float4> RWCulledObjectData;
RWStructuredBuffer<float4> RWCulledObjectBoxBounds;

FDFObjectData LoadCulledDFObjectData(uint ObjectIndex)
{
	return LoadDFObjectDataFromBuffer(CulledObjectData, ObjectIndex);
}

float4 LoadObjectPositionAndRadius(uint ObjectIndex)
{
	return LoadObjectPositionAndRadiusFromBuffer(ObjectIndex, CulledObjectBounds);
}

void LoadHeightFieldObjectBoxBounds(uint ObjectIndex, out float3 OutBoxOrigin, out float3 OutBoxExtent)
{
	LoadHeightFieldObjectBoxBoundsFromBuffer(ObjectIndex, CulledObjectBounds, OutBoxOrigin, OutBoxExtent);
}

float4x4 LoadHeightFieldObjectWorldToLocal(uint ObjectIndex)
{
	return LoadHeightFieldObjectWorldToLocalFromBuffer(ObjectIndex, CulledObjectData);
}

float4 LoadHeightFieldObjectAtlasUVScaleBias(uint ObjectIndex)
{
	return LoadHeightFieldObjectAtlasUVScaleBiasFromBuffer(ObjectIndex, CulledObjectData);
}

float4 LoadHeightFieldObjectSizeScale(uint ObjectIndex)
{
	return LoadHeightFieldObjectSizeScaleFromBuffer(ObjectIndex, CulledObjectData);
}

float4 LoadHeightFieldObjectVisibilityAtlasUVScaleBias(uint ObjectIndex)
{
	return LoadHeightFieldObjectVisibilityAtlasUVScaleBiasFromBuffer(ObjectIndex, CulledObjectData);
}

// x = Offset in global buffer, y = NumLOD0, z = NumSurfels (all LODs), W = instance index
uint4 LoadObjectSurfelCoordinate(uint ObjectIndex)
{
	return uint4(0, 0, 0, 0);
}

void LoadObjectViewSpaceBox(uint ObjectIndex, out float3 ObjectViewSpaceMin, out float3 ObjectViewSpaceMax)
{
	ObjectViewSpaceMin = CulledObjectBoxBounds[ObjectIndex * CULLED_OBJECT_BOX_BOUNDS_STRIDE + 0].xyz;
	ObjectViewSpaceMax = CulledObjectBoxBounds[ObjectIndex * CULLED_OBJECT_BOX_BOUNDS_STRIDE + 1].xyz;
}

void LoadObjectAxes(uint ObjectIndex, out float3 ObjectAxisX, out float3 ObjectAxisY, out float3 ObjectAxisZ)
{
	ObjectAxisX = CulledObjectBoxBounds[ObjectIndex * CULLED_OBJECT_BOX_BOUNDS_STRIDE + 2].xyz;
	ObjectAxisY = CulledObjectBoxBounds[ObjectIndex * CULLED_OBJECT_BOX_BOUNDS_STRIDE + 3].xyz;
	ObjectAxisZ = CulledObjectBoxBounds[ObjectIndex * CULLED_OBJECT_BOX_BOUNDS_STRIDE + 4].xyz;
}

// VPLs generated by raytracing from the light
#define VPL_DATA_STRIDE 3

#define FINAL_GATHER_THREADGROUP_SIZE 64

// Must match C++
#define NUM_VISIBILITY_STEPS 10

// Must match C++
#define RECORD_CONE_DATA_STRIDE NUM_VISIBILITY_STEPS

// Must match C++
#define BENT_NORMAL_STRIDE 1

Buffer<float4> IrradianceCachePositionRadius;
Buffer<float> IrradianceCacheOccluderRadius;
Buffer<uint2> IrradianceCacheTileCoordinate;
Buffer<float4> IrradianceCacheNormal;
Buffer<float4> IrradianceCacheBentNormal;
Buffer<float4> IrradianceCacheIrradiance;

Buffer<uint> ScatterDrawParameters;
Buffer<uint> SavedStartIndex;

uint NumConvexHullPlanes;
float4 ViewFrustumConvexHull[6];

bool ViewFrustumIntersectSphere(float3 SphereOrigin, float SphereRadius)
{
	for (uint PlaneIndex = 0; PlaneIndex < NumConvexHullPlanes; PlaneIndex++)
	{
		float4 PlaneData = ViewFrustumConvexHull[PlaneIndex];
		float PlaneDistance = dot(PlaneData.xyz, SphereOrigin) - PlaneData.w;

		if (PlaneDistance > SphereRadius)
		{
			return false;
		}
	}
	
	return true;
}

float ApproximateConeConeIntersection(float ArcLength0, float ArcLength1, float AngleBetweenCones)
{
	float AngleDifference = abs(ArcLength0 - ArcLength1);

	float Intersection = smoothstep(
		0,
		1.0,
		1.0 - saturate((AngleBetweenCones - AngleDifference) / (ArcLength0 + ArcLength1 - AngleDifference)));

	return Intersection;
}

float GetVPLOcclusion(float3 BentNormalAO, float3 NormalizedVectorToVPL, float VPLConeAngle, float VPLOcclusionStrength)
{
	float BentNormalLength = length(BentNormalAO);
	float UnoccludedAngle = BentNormalLength * PI / VPLOcclusionStrength;
	float AngleBetween = acos(dot(BentNormalAO, NormalizedVectorToVPL) / max(BentNormalLength, .0001f));
	float Visibility = ApproximateConeConeIntersection(VPLConeAngle, UnoccludedAngle, AngleBetween);

	// Can't rely on the direction of the bent normal when close to fully occluded, lerp to shadowed
	Visibility = lerp(0, Visibility, saturate((UnoccludedAngle - .1f) / .2f));

	return Visibility;
}