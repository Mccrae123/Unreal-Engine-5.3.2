// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	MaterialTexCoordScalesPixelShader.usf: Pixel shader to analyse coordinate scale per texture
=============================================================================*/

#define TEX_COORD_SCALE_ANALYSIS 1
#define DEBUG_MATERIAL_PARAMETERS 1

#include "Common.ush"
#include "SHCommon.ush"
#include "VirtualTextureCommon.ush"

int3 AnalysisParams; // (AnalysisType, TextureAnalysisIndex, TextureResolution)
float PrimitiveAlpha;

// Analysis type will be ANALYSIS_TEXTURE_RESOLUTION or ANALYSIS_VIRTUAL_TEXTURE_PENDING_MIPS
#define TextureAnalysisType (AnalysisParams.x)
// Analysis index will be in [0, 31] if analysing a single texture
#define TextureAnalysisIndex (AnalysisParams.y)
// Texture resolution if we're analysing a single texture
#define TextureResolution (AnalysisParams.z)

#define ANALYSIS_TEXTURE_RESOLUTION				0
#define ANALYSIS_VIRTUAL_TEXTURE_PENDING_MIPS	1

struct FTexCoordScalesParams
{
	float RequiredResolution;
	float TexSample;
	int VTMissingMipCount;
};

MaterialFloat StoreTexCoordScale(in out FTexCoordScalesParams Params, float2 UV, int TextureReferenceIndex)
{
#if FEATURE_LEVEL >= FEATURE_LEVEL_SM5
	float2 CoordDDX = ddx_fine(UV);
	float2 CoordDDY = ddy_fine(UV);
#else
	float2 CoordDDX = ddx(UV);
	float2 CoordDDY = ddy(UV);
#endif 

	if (TextureAnalysisIndex == TextureReferenceIndex)
	{
		float MinDelta = min(length(CoordDDX), length(CoordDDY));
		float RequiredResolution = (1 / max(MinDelta, 0.0000000001f));
		Params.RequiredResolution = max(Params.RequiredResolution, RequiredResolution);
	}
	return 1.f;
}

MaterialFloat StoreTexSample(in out FTexCoordScalesParams Params, float4 C, int TextureReferenceIndex)
{
	if (TextureAnalysisIndex == TextureReferenceIndex)
	{
		Params.TexSample = lerp(.4f, 1.f, saturate((C.r + C.g + C.b) / 3));
	}
	return 1.f;
}

MaterialFloat StoreVTSampleInfo(in out FTexCoordScalesParams Params, VTPageTableResult PageTableResult, uint LayerIndex, int TextureReferenceIndex)
{
	if (TextureAnalysisType == ANALYSIS_VIRTUAL_TEXTURE_PENDING_MIPS)
	{
		uint RequestLevel = GetRequestedLevel(PageTableResult);

		// Find the highest resolution from all the page table entries sampled for this VT stack.
		// We do that because a single VT stack can cover textures of different resolutions.
		// Taking info from the lower resolution textures will always show undersampling compared to the requested level that we are not interested in.
		uint SampledLevel = 0xffff;
		for (uint Index = 0; Index < 8; ++Index)
		{
			SampledLevel = min(SampledLevel, GetSampledLevel(PageTableResult, Index, 0xffff));
		}

		if (SampledLevel < 0xffff)
		{
			// Accumulate the worst case that we find for the current pixel.
			// Multiple VT stacks can exist, and we want to visualize the worst case.
			int Diff = max((int)SampledLevel - (int)RequestLevel, 0);
			Params.VTMissingMipCount = max(Diff, Params.VTMissingMipCount);
		}
	}
	return 1.f;
}

#include "/Engine/Generated/Material.ush"
#include "DebugViewModeCommon.ush"

float3 AccuracyColorLookup(float Accuracy)
{
	Accuracy = clamp(Accuracy, -1.99, 1.99);
	int ColorIndex = floor(Accuracy) + 2;
	float3 Color0 = DebugViewModePass.AccuracyColors[ColorIndex].rgb;
	float3 Color1 = DebugViewModePass.AccuracyColors[ColorIndex + 1].rgb;
	float ColorLerp = frac(Accuracy);
	return lerp(Color0, Color1, ColorLerp);
}

#if LIGHTMAP_VT_ENABLED || NUM_VIRTUALTEXTURE_SAMPLES
EARLYDEPTHSTENCIL
#endif
void Main(
	in FDebugPSIn DebugInputs
	OPTIONAL_IsFrontFace,
	out float4 OutColor : SV_Target0
	)
{
#if INSTANCED_STEREO
	ResolvedView = ResolveView(DebugInputs.EyeIndex);
#else
	ResolvedView = ResolveView();
#endif

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(DebugInputs, DebugInputs.SvPosition);

	MaterialParameters.TexCoordScalesParams.RequiredResolution = 0;
	MaterialParameters.TexCoordScalesParams.TexSample = 0;
	MaterialParameters.TexCoordScalesParams.VTMissingMipCount = -1;

	half3 BaseColor;
	{
		FPixelMaterialInputs PixelMaterialInputs;
		CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, DebugInputs.SvPosition, bIsFrontFace);

		// Sample material properties. The results are not used, but the calls to StoreTexCoordScale will still be made.
		BaseColor = GetMaterialBaseColorRaw(PixelMaterialInputs);
		half  Metallic = GetMaterialMetallicRaw(PixelMaterialInputs);
		half  Specular = GetMaterialSpecularRaw(PixelMaterialInputs);
		float Roughness = GetMaterialRoughnessRaw(PixelMaterialInputs);
		half3 Normal = GetMaterialNormalRaw(PixelMaterialInputs);
		half3 Emissive = GetMaterialEmissiveRaw(PixelMaterialInputs);
		half Opacity = GetMaterialOpacityRaw(PixelMaterialInputs);
#if MATERIALBLENDING_MASKED
		half Mask = GetMaterialMask(PixelMaterialInputs);
		clip(GetMaterialMask(PixelMaterialInputs));
#endif
		half4 SSData = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
		float Custom0 = GetMaterialCustomData0(MaterialParameters);
		float Custom1 = GetMaterialCustomData1(MaterialParameters);
		float MaterialAO = GetMaterialAmbientOcclusionRaw(PixelMaterialInputs);
		float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);
#if CLEAR_COAT_BOTTOM_NORMAL && NUM_MATERIAL_OUTPUTS_CLEARCOATBOTTOMNORMAL > 0
		float3 BottomNormal =  ClearCoatBottomNormal0(MaterialParameters);
#endif
	}

	float3 Result = float3(UNDEFINED_ACCURACY, UNDEFINED_ACCURACY, UNDEFINED_ACCURACY);
	Result *= saturate(Luminance(BaseColor));

	if (TextureAnalysisType == ANALYSIS_TEXTURE_RESOLUTION)
	{
		if (MaterialParameters.TexCoordScalesParams.RequiredResolution > 0)
		{
			float Accuracy = log2(TextureResolution / MaterialParameters.TexCoordScalesParams.RequiredResolution);
			Result = AccuracyColorLookup(Accuracy);
			Result *= MaterialParameters.TexCoordScalesParams.TexSample;
		}
	}
	else if (TextureAnalysisType == ANALYSIS_VIRTUAL_TEXTURE_PENDING_MIPS)
	{
		if (MaterialParameters.TexCoordScalesParams.VTMissingMipCount >= 0)
		{
			float Accuracy = -MaterialParameters.TexCoordScalesParams.VTMissingMipCount;
			Result = AccuracyColorLookup(Accuracy);
			Result *= 0.5f;
		}
	}

	OutColor = RETURN_COLOR(float4(Result, PrimitiveAlpha));
	
#if NUM_VIRTUALTEXTURE_SAMPLES || LIGHTMAP_VT_ENABLED
	FinalizeVirtualTextureFeedback(
		MaterialParameters.VirtualTextureFeedback,
		MaterialParameters.SvPosition,
		1.0,
		View.FrameNumber,
		View.VTFeedbackBuffer
	);
#endif	
}
