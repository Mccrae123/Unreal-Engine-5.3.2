// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#define SAMPLERTYPE_Color 0
#define SAMPLERTYPE_Grayscale 1
#define SAMPLERTYPE_Alpha 2
#define SAMPLERTYPE_Normal 3
#define SAMPLERTYPE_Masks 4
#define SAMPLERTYPE_DistanceFieldFont 5
#define SAMPLERTYPE_LinearColor 6
#define SAMPLERTYPE_LinearGrayscale 7
#define SAMPLERTYPE_Data 8
#define SAMPLERTYPE_External 9

#define SAMPLERTYPE_VirtualColor 10
#define SAMPLERTYPE_VirtualGrayscale 11
#define SAMPLERTYPE_VirtualAlpha 12
#define SAMPLERTYPE_VirtualNormal 13
#define SAMPLERTYPE_VirtualMasks 14
#define SAMPLERTYPE_VirtualLinearColor 15
#define SAMPLERTYPE_VirtualLinearGrayscale 16

struct FTexture2D
{
	Texture2D Texture;
	SamplerState Sampler;
	int SamplerType; // EMaterialSamplerType
};

FTexture2D MakeTexture2D(Texture2D Texture, SamplerState Sampler, int SamplerType)
{
	FTexture2D Result;
	Result.Texture = Texture;
	Result.Sampler = Sampler;
	Result.SamplerType = SamplerType;
	return Result;
}

MaterialFloat4 ProcessMaterialColorTextureLookup(MaterialFloat4 TextureValue)
{
	return TextureValue;
}

MaterialFloat4 ProcessMaterialVirtualColorTextureLookup(MaterialFloat4 TextureValue)
{
	TextureValue = ProcessMaterialColorTextureLookup(TextureValue);
#if FEATURE_LEVEL == FEATURE_LEVEL_ES3_1
	// on mobile all VT physical spaces use linear color formats, do sRGB to Linear conversion in the shader
	TextureValue = MaterialFloat4(TextureValue.rgb*TextureValue.rgb, TextureValue.a);
#endif
	return TextureValue;
}

MaterialFloat4 ProcessMaterialExternalTextureLookup(MaterialFloat4 TextureValue)
{
#if COMPILER_GLSL_ES3_1
	return MaterialFloat4(pow(TextureValue.rgb, 2.2f), TextureValue.a);
#else
	return ProcessMaterialColorTextureLookup(TextureValue);
#endif
}

MaterialFloat4 ProcessMaterialLinearColorTextureLookup(MaterialFloat4 TextureValue)
{
	return TextureValue;
}

MaterialFloat4 ProcessMaterialGreyscaleTextureLookup(MaterialFloat4 TextureValue)
{
	// Sampling a greyscale texture in D3D9 gives: (G,G,G)
	// Sampling a greyscale texture in D3D11 gives: (G,0,0)
	// This replication reproduces the D3D9 behavior in all cases.
	MaterialFloat GrayValue = TextureValue.r;
#if (COMPILER_GLSL_ES3_1 || VULKAN_PROFILE) // OpenGLES3.1, Vulkan3.1 do not support sRGB sampling from R8
	#if MOBILE_EMULATION
	if( ResolvedView.MobilePreviewMode > 0.5f )
	{
		// undo HW srgb->lin
		GrayValue = pow(GrayValue, 1.0f/2.2f); // TODO: replace with a more accurate lin -> sRGB conversion.
	}
	#endif
	// sRGB read approximation (in highp if possible)
	float LinValue = GrayValue;
	LinValue *= LinValue;
	return MaterialFloat4(LinValue.rrrr);
#endif 
	return GrayValue.rrrr;
}

MaterialFloat4 ProcessMaterialLinearGreyscaleTextureLookup(MaterialFloat4 TextureValue)
{
	// Sampling a greyscale texture in D3D9 gives: (G,G,G)
	// Sampling a greyscale texture in D3D11 gives: (G,0,0)
	// This replication reproduces the D3D9 behavior in all cases.
	return TextureValue.rrrr;
}

MaterialFloat4 ProcessMaterialAlphaTextureLookup(MaterialFloat4 TextureValue)
{
	// Sampling a single channel texture in D3D9 gives: (G,G,G)
	// Sampling a single channel texture in D3D11 gives: (G,0,0)
	// This replication reproduces the D3D9 behavior in all cases.
	return TextureValue.rrrr;
}

float4 ApplyMaterialSamplerType(float4 Value, int SamplerType)
{
	switch(SamplerType)
	{
	case SAMPLERTYPE_External: return ProcessMaterialExternalTextureLookup(Value);
	case SAMPLERTYPE_Color: return ProcessMaterialColorTextureLookup(Value);
	case SAMPLERTYPE_VirtualColor: return ProcessMaterialVirtualColorTextureLookup(Value);

	case SAMPLERTYPE_LinearColor:
	case SAMPLERTYPE_VirtualLinearColor: return ProcessMaterialLinearColorTextureLookup(Value);

	case SAMPLERTYPE_Alpha:
	case SAMPLERTYPE_VirtualAlpha:
	case SAMPLERTYPE_DistanceFieldFont: return ProcessMaterialAlphaTextureLookup(Value);

	case SAMPLERTYPE_Grayscale:
	case SAMPLERTYPE_VirtualGrayscale: return ProcessMaterialGreyscaleTextureLookup(Value);

	case SAMPLERTYPE_LinearGrayscale:
	case SAMPLERTYPE_VirtualLinearGrayscale: return ProcessMaterialLinearGreyscaleTextureLookup(Value);

	case SAMPLERTYPE_Normal:
	case SAMPLERTYPE_VirtualNormal: return UnpackNormalMap(Value);

	case SAMPLERTYPE_Masks:
	case SAMPLERTYPE_VirtualMasks:
	case SAMPLERTYPE_Data:
	default: return Value;
	}
}
