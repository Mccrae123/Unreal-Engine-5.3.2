// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "../Common.ush"

#if VIRTUAL_TEXTURE_TARGET
#include "../VirtualShadowMaps/VirtualShadowMapPageOverlap.ush"
#endif

#include "../SceneData.ush"
#include "NaniteDataDecode.ush"
#include "NaniteHZBCull.ush"
#include "NaniteCulling.ush"


void TestPrevHZB(FNaniteView NaniteView, float3 BoxBoundsCenter, float3 BoxBoundsExtent, FInstanceSceneData InstanceData, FInstanceDynamicData DynamicData, bool bNearClip, bool bViewHZB, bool bSkipBoxCullFrustum, bool bSkipBoxCullHZB, bool bTreatUnmappedAsOccluded, inout bool bVisible, inout bool bWasOccluded)
{
	BRANCH
	if( bViewHZB && bVisible && !bSkipBoxCullHZB)
	{
		const bool bPrevIsOrtho = IsOrthoProjection(NaniteView.PrevViewToClip);
		FFrustumCullData PrevCull = BoxCullFrustum( BoxBoundsCenter, BoxBoundsExtent, DynamicData.PrevLocalToTranslatedWorld, NaniteView.PrevTranslatedWorldToClip, bPrevIsOrtho, bNearClip, bSkipBoxCullFrustum );

#if VIRTUAL_TEXTURE_TARGET
		BRANCH
		if (PrevCull.bIsVisible && !PrevCull.bCrossesNearPlane)
		{
			FScreenRect PrevRect = GetScreenRect(NaniteView.ViewRect, PrevCull, 4);	// Assume HZBTestViewRect=ViewRect for VSM. Don't load it redundantly.
			bWasOccluded = !IsVisibleMaskedHZB(NaniteView.TargetPrevLayerIndex, NaniteView.TargetMipLevel, PrevRect, false, bTreatUnmappedAsOccluded, 0U);
	}
#else
		BRANCH
		if ((PrevCull.bIsVisible || PrevCull.bFrustumSideCulled) && !PrevCull.bCrossesNearPlane)
		{
			FScreenRect PrevRect = GetScreenRect(NaniteView.HZBTestViewRect, PrevCull, 4);
			bWasOccluded = !IsVisibleHZB(PrevRect, true);
		}
#endif
	}
}

void TestCurrentHZB(FFrustumCullData Cull, FScreenRect Rect, FNaniteView NaniteView, FInstanceSceneData InstanceData, FInstanceDynamicData DynamicData, bool bSkipBoxCullHZB, inout bool bVisible, inout bool bWasOccluded)
{
	BRANCH
	if (bVisible && !bSkipBoxCullHZB)
	{
		BRANCH
		if (!Cull.bCrossesNearPlane)
		{
#if VIRTUAL_TEXTURE_TARGET
			// The logic here is that if the thing has moved it should test against all hzb pages, whereas if it is static we can skip the cached ones (since we'd not render into those anyway).
			const uint PageTestFlagMask = GetPageFlagMaskForRendering(InstanceData, NaniteView, DynamicData.bHasMoved);
			//bWasOccluded = !IsVisibleCurrentHZB(NaniteView.TargetLayerIndex, NaniteView.TargetMipLevel, Rect, PageFlagMask);
			bWasOccluded = !IsVisibleMaskedHZB(NaniteView.TargetLayerIndex, NaniteView.TargetMipLevel, Rect, false, true, 0U, PageTestFlagMask);

#else
			bWasOccluded = !IsVisibleHZB(Rect, true);
#endif
		}
	}
}

void CameraDistanceCull(FPrimitiveSceneData PrimitiveData, FInstanceSceneData InstanceData, FInstanceDynamicData DynamicData, bool bSkipCamPerPrimDistanceCull,
	bool bUseViewRangeDistanceCull, float RangeBasedCullingDistance, inout bool bVisible)
{
	BRANCH
	if (bVisible)
	{
		float3 TranslatedWorldCenter = mul(float4(InstanceData.LocalBoundsCenter, 1.0f), DynamicData.LocalToTranslatedWorld).xyz;
		float CameraDistSq = dot(TranslatedWorldCenter, TranslatedWorldCenter);

		BRANCH
		if (!bSkipCamPerPrimDistanceCull && (PrimitiveData.Flags & PRIMITIVE_SCENE_DATA_FLAG_CAMERA_DISTANCE_CULL) != 0)
		{
			bVisible = CameraDistSq >= PrimitiveData.CameraDistanceCullMinMaxSquared.x && CameraDistSq <= PrimitiveData.CameraDistanceCullMinMaxSquared.y;
		}
		BRANCH
		if (bVisible && bUseViewRangeDistanceCull)
		{
			bVisible = CameraDistSq <= Square(RangeBasedCullingDistance);
		}
	}
}