// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	PostProcessTonemapSubpass.usf: PostProcessing tone mapping  
=============================================================================*/

#include "Common.ush"
#include "PostProcessCommon.ush"
#include "TonemapCommon.ush"

#if VULKAN_PROFILE
#include "/Engine/Public/Platform/Vulkan/VulkanSubpassSupport.ush"
#endif

#if !VULKAN_PROFILE
// Reroute MobileSceneTextures uniform buffer references to the base pass uniform buffer
#define MobileSceneTextures		MobileBasePass.SceneTextures
#endif

// xyz:SceneColorTint.rgb, w:unused
float4 ColorScale0;

// from the postprocess settings, x:VignetteIntensity, y:SharpenDiv6
float4 TonemapperParams;

float4 OverlayColor;

// LUT for color grading
#if USE_VOLUME_LUT == 1
	Texture3D		ColorGradingLUT;
#else
	Texture2D       ColorGradingLUT;
#endif 
SamplerState        ColorGradingLUTSampler;

static const float LUTSize = 32;

half3 ColorLookupTable(half3 LinearColor)
{
	float3 LUTEncodedColor = LinToLog(LinearColor + LogToLin(0));
	float3 UVW = LUTEncodedColor * ((LUTSize - 1) / LUTSize) + (0.5f / LUTSize);

#if USE_VOLUME_LUT == 1
	half3 OutDeviceColor = Texture3DSample(ColorGradingLUT, ColorGradingLUTSampler, UVW).rgb;
#else
	half3 OutDeviceColor = UnwrappedTexture3DSample(ColorGradingLUT, ColorGradingLUTSampler, UVW, LUTSize).rgb;
#endif
	
	return OutDeviceColor *1.05;
}

void MainPS_MobileSubpass(
	in noperspective float2 UV : TEXCOORD0,
	in noperspective float4 InExposureScaleVignette : TEXCOORD1,
	in noperspective float4 GrainUV : TEXCOORD2,
	in noperspective float2 ScreenPos : TEXCOORD3,
	in noperspective float2 FullViewUV : TEXCOORD4,
	float4 SvPosition : SV_POSITION,		// after all interpolators
	out half4 OutColor : SV_Target0
)
{

#if VULKAN_PROFILE
	#ifndef SUBPASS_MSAA_SAMPLES
		half4 SceneColor = half4(1.0, 1.0, 1.0, 1.0);
	#else
		#if SUBPASS_MSAA_SAMPLES == 8
			half4 SceneColor = half4(VulkanSubpassFetch0(0) + VulkanSubpassFetch0(1) + VulkanSubpassFetch0(2) + VulkanSubpassFetch0(3) +
				VulkanSubpassFetch0(4) + VulkanSubpassFetch0(5) + VulkanSubpassFetch0(6) + VulkanSubpassFetch0(7)) * 0.125;
		#elif SUBPASS_MSAA_SAMPLES == 4
			half4 SceneColor = half4(VulkanSubpassFetch0(0) + VulkanSubpassFetch0(1) + VulkanSubpassFetch0(2) + VulkanSubpassFetch0(3)) * 0.25;
		#elif SUBPASS_MSAA_SAMPLES == 2
			half4 SceneColor = half4(VulkanSubpassFetch0(0) + VulkanSubpassFetch0(1)) * 0.5;
		#else
			half4 SceneColor = half4(VulkanSubpassFetch0(0));
		#endif
	#endif
#else
	half4 SceneColor = half4(Texture2DSampleLevel(MobileSceneTextures.GBufferATexture, MobileSceneTextures.GBufferATextureSampler, UV, 0));
#endif

const float OneOverPreExposure = View.OneOverPreExposure;

SceneColor.a = 1.0;

// Match PC naming.
half3 LinearColor = SceneColor.rgb * OneOverPreExposure;
LinearColor *= ColorScale0.rgb; // SceneColorTint

#if USE_VIGNETTE
	 //Exposure scale from vertex shader isn't working. Temp fix.
	 //LinearColor.rgb *= ComputeVignetteMask(InExposureScaleVignette.zw, TonemapperParams.x);
	 float2 vignettePos = ((UV - 0.5) * 2.0);
	 LinearColor.rgb *= ComputeVignetteMask(vignettePos, TonemapperParams.x);
#endif

half3 TonemappedColor;

#if USE_COLOR_GRADING
	TonemappedColor = ColorLookupTable(LinearColor);
#else
	TonemappedColor = LinearColor.rgb;
	
	// Blend with custom LDR color, used for Fade track in Matinee.
	// This is the 101% wrong way to do this,
	//  - It adds an extra redundant lerp.
	//  - It is not going to work with the future-forward ES3 fast path of sRGB output.
	//  - And it does super ugly non-linear blending.
	// The right way is to adjust exposure instead.
	TonemappedColor = lerp(TonemappedColor.rgb, OverlayColor.rgb, OverlayColor.a);
#endif

OutColor = half4(TonemappedColor, SceneColor.a);

OutColor.rgb = sRGBToLinear( OutColor.rgb );
}
