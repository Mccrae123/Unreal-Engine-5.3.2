// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	DownSampleDepthPixelShader.usf: Downsamples scene depth by a factor of 2.
=============================================================================*/

#include "Common.ush"
#include "SceneTexturesCommon.ush"

float2 ProjectionScaleBias;
float4 SourceTexelOffsets01;
float4 SourceTexelOffsets23;
float2 SourceMaxUV;
float2 DestinationResolution;
uint DepthDownsampleMode; // This must match EDepthDownsampleMode

void Main(
	noperspective float2 InUV : TEXCOORD0,
	out float OutDepth : SV_DEPTH,
	out float4 OutColor : SV_Target0
	)
{
	OutColor = 0;
	float Depth = 0;

	if (DepthDownsampleMode < 2)
	{
		// Lookup the four view space Z's of the full resolution pixels corresponding to this low resolution pixel
		float ViewSpaceZ0 = CalcSceneDepth(min(InUV + SourceTexelOffsets01.xy, SourceMaxUV));
		float ViewSpaceZ1 = CalcSceneDepth(min(InUV + SourceTexelOffsets01.zw, SourceMaxUV));
		float ViewSpaceZ2 = CalcSceneDepth(min(InUV + SourceTexelOffsets23.xy, SourceMaxUV));
		float ViewSpaceZ3 = CalcSceneDepth(min(InUV + SourceTexelOffsets23.zw, SourceMaxUV));

		float MaxDepth = max(max(ViewSpaceZ0, ViewSpaceZ1), max(ViewSpaceZ2, ViewSpaceZ3));

		// Max depth shrinks the silhouettes around foreground objects and is conservative for depth testing
		// Sample 0 has consistent error, use whichever one is requested for this downsample
		float Depth = DepthDownsampleMode == 1 ? MaxDepth : ViewSpaceZ0;
	}
	else
	{
		// Lookup the four view space Z's of the full resolution pixels corresponding to this low resolution pixel
		float ViewSpaceZ0 = CalcSceneDepth(min(InUV + SourceTexelOffsets23.zw * 0.5 * float2(-1, -1), SourceMaxUV));
		float ViewSpaceZ1 = CalcSceneDepth(min(InUV + SourceTexelOffsets23.zw * 0.5 * float2(-1, 1), SourceMaxUV));
		float ViewSpaceZ2 = CalcSceneDepth(min(InUV + SourceTexelOffsets23.zw * 0.5 * float2(1, -1), SourceMaxUV));
		float ViewSpaceZ3 = CalcSceneDepth(min(InUV + SourceTexelOffsets23.zw * 0.5 * float2(1, 1), SourceMaxUV));

		float MaxDepth = max(max(ViewSpaceZ0, ViewSpaceZ1), max(ViewSpaceZ2, ViewSpaceZ3));

		const float2 Resolution = uint2(DestinationResolution * View.BufferSizeAndInvSize.xy * View.ViewSizeAndInvSize.zw); // need to clamp to respect ratios
		const uint2 PixelPos = uint2(InUV * Resolution);

		const uint2 PixelPosStep = (PixelPos >> 1) * 2;
		uint CheckerBoard = (PixelPos.x - PixelPosStep.x);									// horizontal alternance of black and white
		CheckerBoard = (PixelPos.y - PixelPosStep.y) == 0 ? CheckerBoard : 1 - CheckerBoard;// vertical toggle of horizontal checker on odd lines

		const float MinDepth = min(min(ViewSpaceZ0, ViewSpaceZ1), min(ViewSpaceZ2, ViewSpaceZ3));
		Depth = CheckerBoard > 0 ? MaxDepth : MinDepth;
	}

	// Convert view space Z into post projection Z and output post projection Z / W as the depth buffer expects.
	OutDepth = (Depth * ProjectionScaleBias.x + ProjectionScaleBias.y) / Depth;
}

#ifndef STENCIL_LIGHTING_CHANNELS_SHIFT 
#define STENCIL_LIGHTING_CHANNELS_SHIFT 0
#endif

Texture2D<uint2> SceneStencilTexture;

void CopyStencilToLightingChannelsPS(  
	noperspective float2 InUV : TEXCOORD0,
	out uint4 OutValue : SV_Target0
	)
{
	uint2 IntUV = (uint2)(InUV * (float2)View.BufferSizeAndInvSize.xy);
	uint Stencil = SceneStencilTexture.Load(uint3(IntUV, 0)) STENCIL_COMPONENT_SWIZZLE;
	uint ShiftedStencil = Stencil >> STENCIL_LIGHTING_CHANNELS_SHIFT;
	// Flip the lowest channel bit, it was stored inverted so we can clear stencil to 0 as a default
	uint LightingChannels = (ShiftedStencil & 0x6) | (~ShiftedStencil & 0x1);
	OutValue = LightingChannels;
}