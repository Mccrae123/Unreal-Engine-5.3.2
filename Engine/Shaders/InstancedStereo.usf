// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved..

/*=============================================================================
	InstancedStereo.usf: Resolve which view uniforms in a stereo pair to use.
=============================================================================*/

#pragma once

struct ViewDependentState {
	float4x4 TranslatedWorldToClip;
	float4x4 WorldToClip;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToWorld;
	float4x4 ScreenToTranslatedWorld;
	float3  ViewForward;
	float3  ViewUp;
	float3  ViewRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 WorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOrigin;
	float3 PreViewTranslation;
	float4x4 PrevProjection;
	float4x4 PrevViewProj;
	float4x4 PrevViewRotationProj;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevWorldCameraOrigin;
	float3 PrevWorldViewOrigin;
	float3 PrevPreViewTranslation;
	float4x4 PrevInvViewProj;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;

	// MultiRes additions
	float4 RenderTargetToViewRectUVScaleBias;
	float4 ViewRectToRenderTargetUVScaleBias;

	float4 NDCSplitsX;
	float4 NDCSplitsY;
	float4 StereoNDCSplitsX;
	float4 StereoNDCSplitsY;

	float2 LinearToVRProjectSplitsX;
	float2 LinearToVRProjectSplitsY;
	float2 LinearToVRProjectX0;
	float2 LinearToVRProjectX1;
	float2 LinearToVRProjectX2;
	float2 LinearToVRProjectY0;
	float2 LinearToVRProjectY1;
	float2 LinearToVRProjectY2;
	float2 VRProjectToLinearSplitsX;
	float2 VRProjectToLinearSplitsY;
	float2 VRProjectToLinearX0;
	float2 VRProjectToLinearX1;
	float2 VRProjectToLinearX2;
	float2 VRProjectToLinearY0;
	float2 VRProjectToLinearY1;
	float2 VRProjectToLinearY2;
	// additional lens matched shading params
	float2 BoundingRectOrigin;
	float2 BoundingRectSize;
	float2 BoundingRectSizeInv;
};

// Used when instanced stereo is disabled and for shaders which don't support or need it.
// Copy propagation should collapse this to a direct reference to View.
ViewDependentState ResolveView()
{
	ViewDependentState Result;

	Result.TranslatedWorldToClip = View.TranslatedWorldToClip;
	Result.WorldToClip = View.WorldToClip;
	Result.TranslatedWorldToView = View.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View.CameraViewToTranslatedWorld;
	Result.ViewToClip = View.ViewToClip;
	Result.ClipToView = View.ClipToView;
	Result.ClipToTranslatedWorld = View.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View.SVPositionToTranslatedWorld;
	Result.ScreenToWorld = View.ScreenToWorld;
	Result.ScreenToTranslatedWorld = View.ScreenToTranslatedWorld;
	Result.ViewForward = View.ViewForward;
	Result.ViewUp = View.ViewUp;
	Result.ViewRight = View.ViewRight;
	Result.InvDeviceZToWorldZTransform = View.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View.ScreenPositionScaleBias;
	Result.WorldCameraOrigin = View.WorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View.TranslatedWorldCameraOrigin;
	Result.WorldViewOrigin = View.WorldViewOrigin;
	Result.PreViewTranslation = View.PreViewTranslation;
	Result.PrevProjection = View.PrevProjection;
	Result.PrevViewProj = View.PrevViewProj;
	Result.PrevViewRotationProj = View.PrevViewRotationProj;
	Result.PrevViewToClip = View.PrevViewToClip;
	Result.PrevClipToView = View.PrevClipToView;
	Result.PrevTranslatedWorldToClip = View.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View.PrevCameraViewToTranslatedWorld;
	Result.PrevWorldCameraOrigin = View.PrevWorldCameraOrigin;
	Result.PrevWorldViewOrigin = View.PrevWorldViewOrigin;
	Result.PrevPreViewTranslation = View.PrevPreViewTranslation;
	Result.PrevInvViewProj = View.PrevInvViewProj;
	Result.PrevScreenToTranslatedWorld = View.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View.ClipToPrevClip;

	Result.RenderTargetToViewRectUVScaleBias = View.RenderTargetToViewRectUVScaleBias;
	Result.ViewRectToRenderTargetUVScaleBias = View.ViewRectToRenderTargetUVScaleBias;
	Result.NDCSplitsX = View.NDCSplitsX;
	Result.NDCSplitsY = View.NDCSplitsY;
	Result.StereoNDCSplitsX = View.StereoNDCSplitsX;
	Result.StereoNDCSplitsY = View.StereoNDCSplitsY;
	Result.LinearToVRProjectSplitsX = View.LinearToVRProjectSplitsX;
	Result.LinearToVRProjectSplitsY = View.LinearToVRProjectSplitsY;
	Result.LinearToVRProjectX0 = View.LinearToVRProjectX0;
	Result.LinearToVRProjectX1 = View.LinearToVRProjectX1;
	Result.LinearToVRProjectX2 = View.LinearToVRProjectX2;
	Result.LinearToVRProjectY0 = View.LinearToVRProjectY0;
	Result.LinearToVRProjectY1 = View.LinearToVRProjectY1;
	Result.LinearToVRProjectY2 = View.LinearToVRProjectY2;
	Result.VRProjectToLinearSplitsX = View.VRProjectToLinearSplitsX;
	Result.VRProjectToLinearSplitsY = View.VRProjectToLinearSplitsY;
	Result.VRProjectToLinearX0 = View.VRProjectToLinearX0;
	Result.VRProjectToLinearX1 = View.VRProjectToLinearX1;
	Result.VRProjectToLinearX2 = View.VRProjectToLinearX2;
	Result.VRProjectToLinearY0 = View.VRProjectToLinearY0;
	Result.VRProjectToLinearY1 = View.VRProjectToLinearY1;
	Result.VRProjectToLinearY2 = View.VRProjectToLinearY2;

	Result.BoundingRectOrigin = View.BoundingRectOrigin;
	Result.BoundingRectSize = View.BoundingRectSize;
	Result.BoundingRectSizeInv = View.BoundingRectSizeInv;

	return Result;
}

// Packing the eye index and instanced stereo flag into a single uint to save an interpolator
uint PackEyeIndex(uint EyeIndex, bool bIsInstancedStereo)
{
	uint Result = 0;
	Result |= (uint)bIsInstancedStereo << 31;
	Result |= EyeIndex;
	return Result;
}

uint GetEyeIndex(uint PackedIndex)
{
	return PackedIndex & 0x1;
}

bool IsInstancedStereo(uint PackedIndex)
{
	return (PackedIndex & (1 << 31)) != 0;
}

#if !COMPILER_HLSLCC
static ViewDependentState ResolvedView;
	#if SINGLE_PASS_STEREO
static ViewDependentState ResolvedViewRight;
	#endif
#endif

#if INSTANCED_STEREO || SINGLE_PASS_STEREO
static const float EyeOffsetScale[2] = { -1.0, 1.0 };
static const float4 EyeClipEdge[2] = { float4(-1.0, 0.0, 0.0, 1.0), float4(1.0, 0.0, 0.0, 1.0) };

// Used to resolve precision issues when comparing depth values rendered with instanced stereo and without (pre-shadows)
#if SINGLE_PASS_STEREO
static const float InstancedStereoDepthBias = 0.00011;
#else
static const float InstancedStereoDepthBias = 0.0001;
#endif

bool bIsSinglePassStereo;
bool bIsInstancedStereo;

ViewDependentState ResolveView(uint ViewIndex)
{
	ViewDependentState Result;
	
	if (ViewIndex == 0)
	{
		Result.TranslatedWorldToClip = View.TranslatedWorldToClip;
		Result.WorldToClip = View.WorldToClip;
		Result.TranslatedWorldToView = View.TranslatedWorldToView;
		Result.ViewToTranslatedWorld = View.ViewToTranslatedWorld;
		Result.TranslatedWorldToCameraView = View.TranslatedWorldToCameraView;
		Result.CameraViewToTranslatedWorld = View.CameraViewToTranslatedWorld;
		Result.ViewToClip = View.ViewToClip;
		Result.ClipToView = View.ClipToView;
		Result.ClipToTranslatedWorld = View.ClipToTranslatedWorld;
		Result.SVPositionToTranslatedWorld = View.SVPositionToTranslatedWorld;
		Result.ScreenToWorld = View.ScreenToWorld;
		Result.ScreenToTranslatedWorld = View.ScreenToTranslatedWorld;
		Result.ViewForward = View.ViewForward;
		Result.ViewUp = View.ViewUp;
		Result.ViewRight = View.ViewRight;
		Result.InvDeviceZToWorldZTransform = View.InvDeviceZToWorldZTransform;
		Result.ScreenPositionScaleBias = View.ScreenPositionScaleBias;
		Result.WorldCameraOrigin = View.WorldCameraOrigin;
		Result.TranslatedWorldCameraOrigin = View.TranslatedWorldCameraOrigin;
		Result.WorldViewOrigin = View.WorldViewOrigin;
		Result.PreViewTranslation = View.PreViewTranslation;
		Result.PrevProjection = View.PrevProjection;
		Result.PrevViewProj = View.PrevViewProj;
		Result.PrevViewRotationProj = View.PrevViewRotationProj;
		Result.PrevViewToClip = View.PrevViewToClip;
		Result.PrevClipToView = View.PrevClipToView;
		Result.PrevTranslatedWorldToClip = View.PrevTranslatedWorldToClip;
		Result.PrevTranslatedWorldToView = View.PrevTranslatedWorldToView;
		Result.PrevViewToTranslatedWorld = View.PrevViewToTranslatedWorld;
		Result.PrevTranslatedWorldToCameraView = View.PrevTranslatedWorldToCameraView;
		Result.PrevCameraViewToTranslatedWorld = View.PrevCameraViewToTranslatedWorld;
		Result.PrevWorldCameraOrigin = View.PrevWorldCameraOrigin;
		Result.PrevWorldViewOrigin = View.PrevWorldViewOrigin;
		Result.PrevPreViewTranslation = View.PrevPreViewTranslation;
		Result.PrevInvViewProj = View.PrevInvViewProj;
		Result.PrevScreenToTranslatedWorld = View.PrevScreenToTranslatedWorld;
		Result.ClipToPrevClip = View.ClipToPrevClip;

		Result.RenderTargetToViewRectUVScaleBias = View.RenderTargetToViewRectUVScaleBias;
		Result.ViewRectToRenderTargetUVScaleBias = View.ViewRectToRenderTargetUVScaleBias;
		Result.NDCSplitsX = View.NDCSplitsX;
		Result.NDCSplitsY = View.NDCSplitsY;
		Result.StereoNDCSplitsX = View.StereoNDCSplitsX;
		Result.StereoNDCSplitsY = View.StereoNDCSplitsY;
		Result.LinearToVRProjectSplitsX = View.LinearToVRProjectSplitsX;
		Result.LinearToVRProjectSplitsY = View.LinearToVRProjectSplitsY;
		Result.LinearToVRProjectX0 = View.LinearToVRProjectX0;
		Result.LinearToVRProjectX1 = View.LinearToVRProjectX1;
		Result.LinearToVRProjectX2 = View.LinearToVRProjectX2;
		Result.LinearToVRProjectY0 = View.LinearToVRProjectY0;
		Result.LinearToVRProjectY1 = View.LinearToVRProjectY1;
		Result.LinearToVRProjectY2 = View.LinearToVRProjectY2;
		Result.VRProjectToLinearSplitsX = View.VRProjectToLinearSplitsX;
		Result.VRProjectToLinearSplitsY = View.VRProjectToLinearSplitsY;
		Result.VRProjectToLinearX0 = View.VRProjectToLinearX0;
		Result.VRProjectToLinearX1 = View.VRProjectToLinearX1;
		Result.VRProjectToLinearX2 = View.VRProjectToLinearX2;
		Result.VRProjectToLinearY0 = View.VRProjectToLinearY0;
		Result.VRProjectToLinearY1 = View.VRProjectToLinearY1;
		Result.VRProjectToLinearY2 = View.VRProjectToLinearY2;

		Result.BoundingRectOrigin = View.BoundingRectOrigin;
		Result.BoundingRectSize = View.BoundingRectSize;
		Result.BoundingRectSizeInv = View.BoundingRectSizeInv;
	}
	else
	{
		Result.TranslatedWorldToClip = InstancedView.TranslatedWorldToClip;
		Result.WorldToClip = InstancedView.WorldToClip;
		Result.TranslatedWorldToView = InstancedView.TranslatedWorldToView;
		Result.ViewToTranslatedWorld = InstancedView.ViewToTranslatedWorld;
		Result.TranslatedWorldToCameraView = InstancedView.TranslatedWorldToCameraView;
		Result.CameraViewToTranslatedWorld = InstancedView.CameraViewToTranslatedWorld;
		Result.ViewToClip = InstancedView.ViewToClip;
		Result.ClipToView = InstancedView.ClipToView;
		Result.ClipToTranslatedWorld = InstancedView.ClipToTranslatedWorld;
		Result.SVPositionToTranslatedWorld = InstancedView.SVPositionToTranslatedWorld;
		Result.ScreenToWorld = InstancedView.ScreenToWorld;
		Result.ScreenToTranslatedWorld = InstancedView.ScreenToTranslatedWorld;
		Result.ViewForward = InstancedView.ViewForward;
		Result.ViewUp = InstancedView.ViewUp;
		Result.ViewRight = InstancedView.ViewRight;
		Result.InvDeviceZToWorldZTransform = InstancedView.InvDeviceZToWorldZTransform;
		Result.ScreenPositionScaleBias = InstancedView.ScreenPositionScaleBias;
		Result.WorldCameraOrigin = InstancedView.WorldCameraOrigin;
		Result.TranslatedWorldCameraOrigin = InstancedView.TranslatedWorldCameraOrigin;
		Result.WorldViewOrigin = InstancedView.WorldViewOrigin;
		Result.PreViewTranslation = InstancedView.PreViewTranslation;
		Result.PrevProjection = InstancedView.PrevProjection;
		Result.PrevViewProj = InstancedView.PrevViewProj;
		Result.PrevViewRotationProj = InstancedView.PrevViewRotationProj;
		Result.PrevViewToClip = InstancedView.PrevViewToClip;
		Result.PrevClipToView = InstancedView.PrevClipToView;
		Result.PrevTranslatedWorldToClip = InstancedView.PrevTranslatedWorldToClip;
		Result.PrevTranslatedWorldToView = InstancedView.PrevTranslatedWorldToView;
		Result.PrevViewToTranslatedWorld = InstancedView.PrevViewToTranslatedWorld;
		Result.PrevTranslatedWorldToCameraView = InstancedView.PrevTranslatedWorldToCameraView;
		Result.PrevCameraViewToTranslatedWorld = InstancedView.PrevCameraViewToTranslatedWorld;
		Result.PrevWorldCameraOrigin = InstancedView.PrevWorldCameraOrigin;
		Result.PrevWorldViewOrigin = InstancedView.PrevWorldViewOrigin;
		Result.PrevPreViewTranslation = InstancedView.PrevPreViewTranslation;
		Result.PrevInvViewProj = InstancedView.PrevInvViewProj;
		Result.PrevScreenToTranslatedWorld = InstancedView.PrevScreenToTranslatedWorld;
		Result.ClipToPrevClip = InstancedView.ClipToPrevClip;

		Result.RenderTargetToViewRectUVScaleBias = InstancedView.RenderTargetToViewRectUVScaleBias;
		Result.ViewRectToRenderTargetUVScaleBias = InstancedView.ViewRectToRenderTargetUVScaleBias;
		Result.NDCSplitsX = InstancedView.NDCSplitsX;
		Result.NDCSplitsY = InstancedView.NDCSplitsY;
		Result.StereoNDCSplitsX = InstancedView.StereoNDCSplitsX;
		Result.StereoNDCSplitsY = InstancedView.StereoNDCSplitsY;
		Result.LinearToVRProjectSplitsX = InstancedView.LinearToVRProjectSplitsX;
		Result.LinearToVRProjectSplitsY = InstancedView.LinearToVRProjectSplitsY;
		Result.LinearToVRProjectX0 = InstancedView.LinearToVRProjectX0;
		Result.LinearToVRProjectX1 = InstancedView.LinearToVRProjectX1;
		Result.LinearToVRProjectX2 = InstancedView.LinearToVRProjectX2;
		Result.LinearToVRProjectY0 = InstancedView.LinearToVRProjectY0;
		Result.LinearToVRProjectY1 = InstancedView.LinearToVRProjectY1;
		Result.LinearToVRProjectY2 = InstancedView.LinearToVRProjectY2;
		Result.VRProjectToLinearSplitsX = InstancedView.VRProjectToLinearSplitsX;
		Result.VRProjectToLinearSplitsY = InstancedView.VRProjectToLinearSplitsY;
		Result.VRProjectToLinearX0 = InstancedView.VRProjectToLinearX0;
		Result.VRProjectToLinearX1 = InstancedView.VRProjectToLinearX1;
		Result.VRProjectToLinearX2 = InstancedView.VRProjectToLinearX2;
		Result.VRProjectToLinearY0 = InstancedView.VRProjectToLinearY0;
		Result.VRProjectToLinearY1 = InstancedView.VRProjectToLinearY1;
		Result.VRProjectToLinearY2 = InstancedView.VRProjectToLinearY2;

		Result.BoundingRectOrigin = InstancedView.BoundingRectOrigin;
		Result.BoundingRectSize = InstancedView.BoundingRectSize;
		Result.BoundingRectSizeInv = InstancedView.BoundingRectSizeInv;
	}

	return Result;
}
#endif
