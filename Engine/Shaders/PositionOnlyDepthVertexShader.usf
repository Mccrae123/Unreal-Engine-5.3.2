// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	PositionOnlyDepthOnlyVertexShader.hlsl: Depth-only vertex shader.
=============================================================================*/

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

struct FPositionOnlyDepthVSToPS
{
	float4 Position : SV_POSITION;
#if SINGLE_PASS_STEREO
	float4 NvXRight : NV_X_RIGHT;
#endif
#if INSTANCED_STEREO
	nointerpolation uint PackedEyeIndex : PACKED_EYE_INDEX;
#endif
};

#if INSTANCED_STEREO
bool bIsInstancedStereoEmulated;
#endif

#if SINGLE_PASS_STEREO
bool bNeedsSinglePassStereoBias;
#endif

void Main(
	FPositionOnlyVertexFactoryInput Input
#if USE_GLOBAL_CLIP_PLANE
	, out float OutGlobalClipPlaneDistance : SV_ClipDistance
#endif
	, out FPositionOnlyDepthVSToPS Output
#if INSTANCED_STEREO
	, uint InstanceId : SV_InstanceID
	#if !MULTI_VIEW
		, out float OutClipDistance : SV_ClipDistance1
	#else
		, out uint ViewportIndex : SV_ViewPortArrayIndex
	#endif
#endif
	)
{
#if INSTANCED_STEREO
	uint EyeIndex;
	BRANCH
	if (bIsInstancedStereoEmulated)
	{
		EyeIndex = View.StereoPassIndex;
	}
	else
	{
		EyeIndex = VertexFactoryGetEyeIndex(InstanceId);
	}

	ResolvedView = ResolveView(EyeIndex);

	#if !MULTI_VIEW
		OutClipDistance = 0.0;
	#else
		ViewportIndex = EyeIndex;
	#endif
#else
	ResolvedView = ResolveView();
#endif

#if SINGLE_PASS_STEREO
	ResolvedViewRight = ResolveView(1);
#endif

	float4 WorldPos = VertexFactoryGetWorldPosition(Input);
	ISOLATE
	{
		Output.Position = mul(WorldPos, ResolvedView.TranslatedWorldToClip);
	
		#if SINGLE_PASS_STEREO
		BRANCH
		if (bIsSinglePassStereo)
		{
			float4 WorldPositionRight = WorldPos;
			WorldPositionRight.xyz -= ResolvedView.PreViewTranslation.xyz;
			WorldPositionRight.xyz += ResolvedViewRight.PreViewTranslation.xyz;
			Output.NvXRight = mul(WorldPositionRight, ResolvedViewRight.TranslatedWorldToClip).x;
		}
		else
		{
			Output.NvXRight = 0;
		}
		Output.Position.z += SinglePassStereoDepthBias * Output.Position.w * (float)bNeedsSinglePassStereoBias;
		#endif

	#if INSTANCED_STEREO && !MULTI_VIEW
	BRANCH 
	if ( (bIsInstancedStereo || bIsInstancedStereoEmulated) && !LensMatchedShadingIsActive())  
	{
		// Clip at the center of the screen
		OutClipDistance = dot(Output.Position, EyeClipEdge[EyeIndex]);

		// Scale to the width of a single eye viewport
		Output.Position.x *= 0.5 * ResolvedView.HMDEyePaddingOffset;

		// Shift to the eye viewport
		Output.Position.x += (EyeOffsetScale[EyeIndex] * Output.Position.w) * (1.0f - 0.5 * ResolvedView.HMDEyePaddingOffset);
	}
	#endif
}
#if INSTANCED_STEREO
	Output.PackedEyeIndex = PackEyeIndex(EyeIndex, bIsInstancedStereo);
#endif

#if USE_GLOBAL_CLIP_PLANE
	OutGlobalClipPlaneDistance = dot(ResolvedView.GlobalClippingPlane, float4(WorldPos.xyz - ResolvedView.PreViewTranslation.xyz, 1));
#endif
}

#if SINGLE_PASS_STEREO && INSTANCED_STEREO
VRPROJECT_CREATE_FASTGS_SPS_INSTANCED_STEREO(VRProjectFastGS, FPositionOnlyDepthVSToPS, Position, NvXRight, PackedEyeIndex)
#elif SINGLE_PASS_STEREO
VRPROJECT_CREATE_FASTGS_SPS(VRProjectFastGS, FPositionOnlyDepthVSToPS, Position, NvXRight)
#elif INSTANCED_STEREO
VRPROJECT_CREATE_FASTGS_INSTANCED_STEREO(VRProjectFastGS, FPositionOnlyDepthVSToPS, Position, PackedEyeIndex)
#else
VRPROJECT_CREATE_FASTGS(VRProjectFastGS, FPositionOnlyDepthVSToPS, Position)
#endif
