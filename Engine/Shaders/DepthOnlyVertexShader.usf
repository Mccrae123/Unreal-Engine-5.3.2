// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	DepthOnlyVertexShader.hlsl: Depth-only vertex shader.
=============================================================================*/

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

#if INSTANCED_STEREO || SINGLE_PASS_STEREO
bool bNeedsInstancedStereoBias;
#endif

#define IOSZBIASWORKAROUND IOS && (ES2_PROFILE || ES3_1_PROFILE)

struct FDepthOnlyVSToPS
{
	#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET || ((MULTIRES || LENS_MATCHED) && INSTANCED_STEREO)
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;
	#endif

	float4 Position : SV_POSITION;
#if SINGLE_PASS_STEREO
	float4 NvXRight : NV_X_RIGHT;
#endif
};

#if USING_TESSELLATION	
	struct FDepthOnlyVSToDS
	{
		FVertexFactoryInterpolantsVSToDS FactoryInterpolants;
		float4 Position : VS_To_DS_Position;
		OPTIONAL_VertexID_VS_To_DS
	};
	
	#define FDepthOnlyVSOutput FDepthOnlyVSToDS
	#define VertexFactoryGetInterpolants VertexFactoryGetInterpolantsVSToDS
#else
	#define FDepthOnlyVSOutput FDepthOnlyVSToPS
	#define VertexFactoryGetInterpolants VertexFactoryGetInterpolantsVSToPS
#endif

#if USING_TESSELLATION	
	#define FPassSpecificVSToDS FDepthOnlyVSToDS
	#define FPassSpecificVSToPS FDepthOnlyVSToPS
	
	FDepthOnlyVSToDS PassInterpolate(FDepthOnlyVSToDS a, float aInterp, FDepthOnlyVSToDS b, float bInterp)
	{
		FDepthOnlyVSToDS O;
		
		O.FactoryInterpolants = VertexFactoryInterpolate(a.FactoryInterpolants, aInterp, b.FactoryInterpolants, bInterp);

		return O;
	}

	FDepthOnlyVSToPS PassFinalizeTessellationOutput(FDepthOnlyVSToDS Interpolants, float4 WorldPosition, FMaterialTessellationParameters MaterialParameters)
	{
		FDepthOnlyVSToPS O;
		
		#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET
			O.FactoryInterpolants = VertexFactoryAssignInterpolants(Interpolants.FactoryInterpolants);
		#endif

		// Finally, transform position to clip-space
		ISOLATE
		{
			O.Position = mul(WorldPosition, ResolvedView.TranslatedWorldToClip);

			#if SINGLE_PASS_STEREO
			BRANCH
			if (bIsSinglePassStereo)
			{
				float4 WorldPositionRight = WorldPosition;
				WorldPositionRight.xyz -= ResolvedView.PreViewTranslation.xyz;
				WorldPositionRight.xyz += ResolvedViewRight.PreViewTranslation.xyz;
				O.NvXRight = mul(WorldPositionRight, ResolvedViewRight.TranslatedWorldToClip).x;
			}
			else
			{
				O.NvXRight = 0;
			}

			// Bias the depth
			O.Position.z += InstancedStereoDepthBias * O.Position.w * (float)bNeedsInstancedStereoBias;
			#endif
		}
			
		#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET
			O.PixelPosition = WorldPosition;
		#endif
		
		return O;
	}
	
	#include "Tessellation.usf"
#endif

#if VERTEXSHADER

void Main(
	FVertexFactoryInput Input,
	OPTIONAL_VertexID
	out FDepthOnlyVSOutput Output
#if USE_GLOBAL_CLIP_PLANE && !USING_TESSELLATION
	, out float OutGlobalClipPlaneDistance : SV_ClipDistance
#endif
#if INSTANCED_STEREO
	, uint InstanceId : SV_InstanceID
	, out float OutClipDistance : SV_ClipDistance1
	, out float OutCullDistance : SV_CullDistance1
#endif
	)
{
#if INSTANCED_STEREO
	OutCullDistance = OutClipDistance = 0.0;
	const uint EyeIndex = VertexFactoryGetEyeIndex(InstanceId);
	ResolvedView = ResolveView(EyeIndex);
#else
	ResolvedView = ResolveView();
#endif

#if SINGLE_PASS_STEREO
	ResolvedViewRight = ResolveView(1);
#endif

	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);

	// Isolate instructions used for world position offset
	// As these cause the optimizer to generate different position calculating instructions in each pass, resulting in self-z-fighting.
	// This is only necessary for shaders used in passes that have depth testing enabled.
	ISOLATE
	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}

#if USING_TESSELLATION
	// Transformation is done in Domain shader when tessellating
	Output.Position = WorldPos; 
#else
	ISOLATE
	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);
		Output.Position = mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip);
	
		#if SINGLE_PASS_STEREO
		BRANCH
		if (bIsSinglePassStereo)
		{
			float4 WorldPositionRight = WorldPos;
			WorldPositionRight.xyz -= ResolvedView.PreViewTranslation.xyz;
			WorldPositionRight.xyz += ResolvedViewRight.PreViewTranslation.xyz;
			RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPositionRight);
			Output.NvXRight = mul(RasterizedWorldPosition, ResolvedViewRight.TranslatedWorldToClip).x;
		}
		else
		{
			Output.NvXRight = 0;
		}
		#endif

		#if INSTANCED_STEREO
		BRANCH
		if (bIsInstancedStereo && !LensMatchedShadingIsActive())
		{
			// Clip at the center of the screen
			OutCullDistance.x = OutClipDistance.x = dot(Output.Position, EyeClipEdge[EyeIndex]);

			// Scale to the width of a single eye viewport
			Output.Position.x *= 0.5 * Frame.HMDEyePaddingOffset;

			// Shift to the eye viewport
			Output.Position.x += (EyeOffsetScale[EyeIndex] * Output.Position.w) * (1.0f - 0.5 * Frame.HMDEyePaddingOffset);
		}
		#endif
		
		// Bias the depth
		#if INSTANCED_STEREO || SINGLE_PASS_STEREO
		Output.Position.z += InstancedStereoDepthBias * Output.Position.w * (float)bNeedsInstancedStereoBias;
		#elif IOSZBIASWORKAROUND
			// Z bias is needed here for ios metal (UE-26765) and gles (UE-27530)
			// with metal compiler we cannot guarantee the order of operations across different shaders.
			// Access to a fused multiply add intrinsic would solve this. In the meantime we add a small bias.
			// This can be done here as the forward renderer's only use of the depth only shader is for modulated shadows.
			// Addendum: This issue can occur with gles on metal capable hardware too. We apply this for all iOS shaders.
			Output.Position.z += 0.0001 * Output.Position.w;
		#endif
	}

#if USE_GLOBAL_CLIP_PLANE
	OutGlobalClipPlaneDistance = dot(ResolvedView.GlobalClippingPlane, float4(WorldPos.xyz - ResolvedView.PreViewTranslation.xyz, 1));
#endif
#endif

#if !MATERIALBLENDING_SOLID || USING_TESSELLATION || OUTPUT_PIXEL_DEPTH_OFFSET || ((MULTIRES || LENS_MATCHED) && INSTANCED_STEREO)
	// Masked and transparent materials need texture coords to clip, and tessellated
	// materials need texture coords to displace
	Output.FactoryInterpolants = VertexFactoryGetInterpolants(Input, VFIntermediates, VertexParameters);

#if INSTANCED_STEREO
	#if USING_TESSELLATION	
		Output.FactoryInterpolants.InterpolantsVSToPS.PackedEyeIndex = PackEyeIndex(EyeIndex, bIsInstancedStereo);
	#else
		Output.FactoryInterpolants.PackedEyeIndex = PackEyeIndex(EyeIndex, bIsInstancedStereo);
	#endif
#endif

#endif

#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET
	#if !USING_TESSELLATION	
		Output.PixelPosition = WorldPos;
	#endif

#endif

	OutputVertexID( Output );
}

#endif // VERTEXSHADER

#if SINGLE_PASS_STEREO && INSTANCED_STEREO
VRPROJECT_CREATE_FASTGS_SPS_INSTANCED_STEREO(VRProjectFastGS, FDepthOnlyVSToPS, Position, NvXRight, FactoryInterpolants.PackedEyeIndex)
#elif SINGLE_PASS_STEREO
VRPROJECT_CREATE_FASTGS_SPS(VRProjectFastGS, FDepthOnlyVSToPS, Position, NvXRight)
#elif INSTANCED_STEREO
VRPROJECT_CREATE_FASTGS_INSTANCED_STEREO(VRProjectFastGS, FDepthOnlyVSToPS, Position, FactoryInterpolants.PackedEyeIndex)
#else
VRPROJECT_CREATE_FASTGS(VRProjectFastGS, FDepthOnlyVSToPS, Position)
#endif
