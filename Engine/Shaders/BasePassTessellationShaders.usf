// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	BasePassTessellationShaders.usf: Base pass domain and hull shaders
=============================================================================*/

// Metal's include graph is different due to combined VS + HS stage.
#if COMPILER_METAL
	#pragma once
	#if !METAL_PROFILE
		#if DOMAINSHADER
			#include "BasePassVertexCommon.usf"
		#elif !TESSELLATIONSHADER
			#include "BasePassVertexShader.usf"
		#endif
	#endif
#else
	#include "BasePassVertexCommon.usf"
#endif

FBasePassVSToDS PassInterpolate(FBasePassVSToDS a, float aInterp, FBasePassVSToDS b, float bInterp)
{
	FBasePassVSToDS O;
	
	O.FactoryInterpolants = VertexFactoryInterpolate(a.FactoryInterpolants, aInterp, b.FactoryInterpolants, bInterp);

	#if NEEDS_BASEPASS_FOGGING
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.VertexFog);
		#if SINGLE_PASS_STEREO
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.VertexFogRight);
		#endif
	#endif

	#if TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_NONDIRECTIONAL || TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_DIRECTIONAL
		TESSELLATION_INTERPOLATE_MEMBER(AmbientLightingVector);
		#if SINGLE_PASS_STEREO
		TESSELLATION_INTERPOLATE_MEMBER(AmbientLightingVectorRight);
		#endif
	#endif

	#if TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_DIRECTIONAL
		TESSELLATION_INTERPOLATE_MEMBER(DirectionalLightingVector);
		#if SINGLE_PASS_STEREO
		TESSELLATION_INTERPOLATE_MEMBER(DirectionalLightingVectorRight);
		#endif
	#endif

	#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.WorldPositionExcludingWPO);
	#endif

	#if WRITES_VELOCITY_TO_GBUFFER
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.VelocityPrevScreenPosition);
		#if SINGLE_PASS_STEREO
			TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.VelocityPrevScreenPositionRight);
		#endif
		#if WRITES_VELOCITY_TO_GBUFFER_USE_POS_INTERPOLATOR
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.VelocityScreenPosition);
		#if SINGLE_PASS_STEREO
			TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.VelocityScreenPositionRight);
		#endif
		#endif
	#endif

	return O;
}

FBasePassVSToPS PassFinalizeTessellationOutput(FBasePassVSToDS Interpolants, float4 WorldPosition, FMaterialTessellationParameters MaterialParameters)
{
	FBasePassVSToPS O;
	
	O.FactoryInterpolants = VertexFactoryAssignInterpolants(Interpolants.FactoryInterpolants);

	// Copy everything in the shared base class over to the pixel shader input
	(FSharedBasePassInterpolants)O.BasePassInterpolants = (FSharedBasePassInterpolants)Interpolants.BasePassInterpolants;

	// Transform position to clip-space
	ISOLATE
	{
		O.Position = mul(WorldPosition, ResolvedView.TranslatedWorldToClip);

		#if SINGLE_PASS_STEREO
		BRANCH
		if (bIsSinglePassStereo)
		{
			float4 WorldPositionRight = WorldPosition;
			WorldPositionRight.xyz -= ResolvedView.PreViewTranslation.xyz;
			WorldPositionRight.xyz += ResolvedViewRight.PreViewTranslation.xyz;
			O.NvXRight = mul(WorldPositionRight, ResolvedViewRight.TranslatedWorldToClip).x;
		}
		else
		{
			O.NvXRight = 0;
		}
		#endif

#if WRITES_VELOCITY_TO_GBUFFER
		float SkipVelocity = O.BasePassInterpolants.VelocityPrevScreenPosition.w;
		O.BasePassInterpolants.VelocityPrevScreenPosition = mul(float4(Interpolants.BasePassInterpolants.VelocityPrevScreenPosition.xyz, 1), ResolvedView.PrevTranslatedWorldToClip);
		// Move the mask to .z when as we don't need the clip space Z
		O.BasePassInterpolants.VelocityPrevScreenPosition.z = SkipVelocity;
		#if SINGLE_PASS_STEREO
			float SkipVelocityRight = O.BasePassInterpolants.VelocityPrevScreenPositionRight.w;
			O.BasePassInterpolants.VelocityPrevScreenPositionRight = mul(float4(Interpolants.BasePassInterpolants.VelocityPrevScreenPositionRight.xyz, 1), ResolvedViewRight.PrevTranslatedWorldToClip);
			// Move the mask to .z when as we don't need the clip space Z
			O.BasePassInterpolants.VelocityPrevScreenPositionRight.z = SkipVelocityRight;
		#endif
		#if WRITES_VELOCITY_TO_GBUFFER_USE_POS_INTERPOLATOR
		O.BasePassInterpolants.VelocityScreenPosition = mul(float4(Interpolants.BasePassInterpolants.VelocityScreenPosition.xyz, 1), ResolvedView.TranslatedWorldToClip);
		#if SINGLE_PASS_STEREO
			O.BasePassInterpolants.VelocityScreenPositionRight = mul(float4(Interpolants.BasePassInterpolants.VelocityScreenPositionRight.xyz, 1), ResolvedViewRight.TranslatedWorldToClip);
		#endif
		#endif
#endif
	}

	#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
		O.BasePassInterpolants.PixelPositionExcludingWPO = Interpolants.BasePassInterpolants.WorldPositionExcludingWPO;
		#if SINGLE_PASS_STEREO
		O.BasePassInterpolants.PixelPositionExcludingWPORight = Interpolants.BasePassInterpolants.WorldPositionExcludingWPO - ResolvedView.PreViewTranslation.xyz + ResolvedViewRight.PreViewTranslation.xyz;
		#endif
	#endif

#if COMPILER_HLSLCC && NEEDS_BASEPASS_FOGGING  // workaround for hlslcc miscompilation, see UE-39489
	O.BasePassInterpolants.VertexFog = Interpolants.BasePassInterpolants.VertexFog;
#endif // COMPILER_HLSLCC && NEEDS_BASEPASS_FOGGING

	return O;
}

// This gets us the MainHull and MainDomain shader definitions
#include "Tessellation.usf"
