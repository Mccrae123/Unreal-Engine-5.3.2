// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
D3DCommon.usf: Common defines for the d3d shader compiler
=============================================================================*/

// Update this GUID to invalidate D3D shaders and force a shader recompilation for D3D RHIs.
// GUID: B8728C4B-C1E8-45AD-B3E4-A6761FAFA247

precise float MakePrecise(precise float v) { return v; }
precise float2 MakePrecise(precise float2 v) { return v; }
precise float3 MakePrecise(precise float3 v) { return v; }
precise float4 MakePrecise(precise float4 v) { return v; }
#define INVARIANT(X) X

#if PLATFORM_SUPPORTS_STATIC_SAMPLERS

// Static sampler table must match D3D12RootSignature.cpp
SamplerState D3DStaticPointWrappedSampler       : register(s0, space1000);
SamplerState D3DStaticPointClampedSampler       : register(s1, space1000);
SamplerState D3DStaticBilinearWrappedSampler    : register(s2, space1000);
SamplerState D3DStaticBilinearClampedSampler    : register(s3, space1000);
SamplerState D3DStaticTrilinearWrappedSampler   : register(s4, space1000);
SamplerState D3DStaticTrilinearClampedSampler   : register(s5, space1000);

#define GetGlobalSampler(Filter, WrapMode) D3DStatic##Filter##WrapMode##Sampler

#endif // PLATFORM_SUPPORTS_STATIC_SAMPLERS

#if PLATFORM_SUPPORTS_DIAGNOSTIC_BUFFER

// Diagnostic buffer which will be automatically bound by the RHI as a root parameter
// Counterpart to FD3D12DiagnosticBufferData in D3D12DirectCommandListManager.h
// Diagnostic message layout: [uint counter, uint message_id, uint4 payload] (6 DWORDs total)
RWStructuredBuffer<uint> UEDiagnosticBuffer : register(u0, space999);

void UEReportAssertWithPayload(uint AssertID, uint4 Payload)
{
	if (WaveIsFirstLane())
	{
		// Write some diagnostic data if we're first
		uint OldValue = 0;
		InterlockedAdd(UEDiagnosticBuffer[0], 1, OldValue);
		if (OldValue == 0)
		{
			UEDiagnosticBuffer[1] = AssertID;
			UEDiagnosticBuffer[2] = Payload.x;
			UEDiagnosticBuffer[3] = Payload.y;
			UEDiagnosticBuffer[4] = Payload.z;
			UEDiagnosticBuffer[5] = Payload.w;
		}
		// Try to trigger a crash
		// TODO: use PLATFORM_BREAK
		UEDiagnosticBuffer[0xFFFFFFFF] = 0;
	}
}

#define PLATFORM_ASSERT(condition, assert_id)              { if (!(condition)) UEReportAssertWithPayload(assert_id, uint4(0, 0, 0, 0)); }
#define PLATFORM_ASSERT1(condition, assert_id, a)          { if (!(condition)) UEReportAssertWithPayload(assert_id, uint4(a, 0, 0, 0));  }
#define PLATFORM_ASSERT2(condition, assert_id, a, b)       { if (!(condition)) UEReportAssertWithPayload(assert_id, uint4(a, b, 0, 0));  }
#define PLATFORM_ASSERT3(condition, assert_id, a, b, c)    { if (!(condition)) UEReportAssertWithPayload(assert_id, uint4(a, b, c, 0));  }
#define PLATFORM_ASSERT4(condition, assert_id, a, b, c, d) { if (!(condition)) UEReportAssertWithPayload(assert_id, uint4(a, b, c, d));  }

#endif // PLATFORM_SUPPORTS_DIAGNOSTIC_BUFFER
