Availability:Licensee
Crumbs: 
Title: Profile Guided Optimizaton
Description: Complete resources for learning to use Unreal Engine 4
Type: overview
Version: 
Parent: Platforms/Performance
Order: 1
Tags: PlayStation 4
Tags: Additional
PLatform:PS4

[REGION:note]We have provided early access to this content in draft form in order to get you up and running. Check back soon for updates![/REGION]

Preliminary support for instrumented profile guided optimization (PGO) to the Engine. PGO provides the compiler and linker with additional data, gathered from an actual playthrough of the title. This allows a range of optimizations beyond what regular compile and link time optimizations can offer. Properly implemented PGO can save several milliseconds (ms) of frame time on the CPU. 

Supporting PGO with instrumented builds will require an amount of title specific work to have the title run some representative gameplay automatically, which can then be used by automation scripts to generate new PGO data when required. PGO profiling also requires special instrumented binaries. These can be generated by the [Unreal Build Tool](https://docs.unrealengine.com/en-us/Programming/BuildTools#unrealbuildtool) (UBT), by setting **bPGOProfile** to true in the build configuration.

The automation script passes **-pgoprofile** on the command line when it launches the game for a PGO run. For example, you may use this trigger for an AI-only play-through of a level, a camera fly-through of the world, or launch a recorded replay. When the title exits, PGO data is gathered and saved to disk automatically, which the automation script will copy back and check into source control. 

Once PGO data has been generated, optimized builds can then be created by setting **bPGOOptimize** to be true in the build configuration. The best performance gains can be found from PGO when the data is kept as fresh as possible. Also, the instrumented binary should match the shipping binary as closely as possible. 

It's recommended to use **Shipping** configuration builds when using PGO profiling sessions. Since Shipping builds usually have all automation and debug features stripped by compiler definitions, the build tool will define the **ENABLE_PGO_PROFILE** macro. You can selectively re-enable automation code in a Shipping binary, specifically for the purpose of PGO profiling.

