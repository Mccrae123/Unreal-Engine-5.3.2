INTSourceChangelist:6517938
Availability:Licensee
Title:Visual Studio 에서 디버깅
Description:Visual Studio 로 디버깅을 할 수 있는 방법에 대해 알아봅니다.
Crumbs:%ROOT%
Parent:Platforms/PS4/GettingStarted
Platform:PS4
Version: 4.16
Tags:Platform
Type:quick start
type:multi-step
Skilllevel:Advanced
Checkpoint:PS4GettingStarted
Order:4

[TOC(start:2 end:2)]

[nav]

[EXCERPT:main]
Visual Studio 로 게임을 디버깅하는 방법은 두 가지 있습니다. 하나는 게임을 실행하거나 다른 하나는 에디터를 실행하는 방법인데, 둘을 동시에 진행하는 것은 추천하지 않습니다.
이미 Visual Studio 안에서 실행되고 있는 에디터에서 실행시킨 게임은 Visual Studio 컨텍스트 범위 밖에서 실행됩니다. 즉 디버거가 붙지 않는다는 뜻입니다.
하지만 Visual Studio 인스턴스를 여러 개 띄워 실행 프로세스에 붙일 수는 있습니다. 그렇게 하면 에디터에서 게임을 실행시키고 Visual Studio 인스턴스를 하나 더 띄워 
"Attach to Process" 대화창을 통해 키트에 붙이면 됩니다.

## Visual Studio 에서 게임 실행

Visual Studio 에서 게임을 실행시키기 위해서는 애셋을 **Visual Studio 외부에서 쿠킹 및 디플로이** 해야합니다. 이 프로세스는 쿠킹을 하려는 방식이 Cook By The Book 인지 Cook On The Fly 인지 아니면 
기존의 게임 패키지 파일 통째로 쿠킹 프로세스를 생략할지에 따라 달라집니다.

메서드를 클릭하고 작업방식에 가장 잘 맞는 것을 선택한 뒤 다음 방법을 따릅니다.

### Cook by the Book 으로 게임 실행

이 메서드는 전체 게임을 개발자 머신에 쿠킹하고 콘솔에 디플로이한 뒤 디버깅 세션을 시작합니다. 콘텐츠를 쿠킹한 적이 없고 게임이 최고 속도로 실행되기를 바란다면 
이 메서드를 선택하면 됩니다.

1. 에디터를 열고, 프로젝트 런처에서 **Cook by the Book** 프로파일을 사용해서 PS4 에 콘텐츠를 빌드, 쿠킹, 디플로이합니다.
1. **Development | PS4** 또는 **Debug Game | PS4** 와 같은 빌드 구성을 선택합니다.
1. Visual Studio 에서 **Solution Explorer** 창 아래 게임 프로젝트에 우클릭하고 **Properties** > **Debugging** 을 선택합니다.
1. 다음 실행파일의 Argument (인수)를 다음과 같이 설정합니다:
	* [RelativePathFromElfToProject.uproject] [MapName]
	* ../../../MyProject/MyProject.uproject myMap
1. 마지막으로, 프로젝트를 **Build** 후 **Run** 합니다.

[REGION:notes]
유념해야 할 점은 다음과 같습니다:

* 지정된 .uproject 는 PS4 의 .elf / .self 파일을 기준으로 하며, Visual Studio 디렉터리를 기준으로 하지 않습니다.
* Visual Studio 는 게임 애셋을 디플로이하지 않습니다. 기존 쿠킹 및 디플로이에 이미 배치되어 있을 것입니다.
[/REGION]

### Cook on the fly 로 게임 실행

이 메서드는 전체 게임을 지정된 (로컬이든 원격이든) "Cook on the Fly" 머신에서 쿠킹하고 게임은 기본 상태에서 빠르게 시작합니다. 런타임 퍼포먼스는 약간 떨어질텐데, 애셋 요청이 있을 때 쿠킹을 
하기 때문입니다. 이 메서드는 기존 쿠킹 빌드가 있고 게임 실행에 필요한 최소한의 애셋을 쿠킹하려는 경우 이상적입니다.


1. Cook on the Fly 서버가 실행중인지 확인합니다.
1. **Development | PS4** 또는 **Debug Game | PS4** 와 같은 빌드 구성을 선택합니다.
1. Visual Studio 에서 **Solution Explorer** 창 아래 게임 프로젝트에 우클릭한 뒤 **Properties** > **Debugging** 을 선택합니다.
1. 실행파일 Argument (인수)를 다음과 같이 설정합니다:
	* [RelativePathFromElfToProject.uproject] [MapName] [-filehostip=COTFServerAddress]
	* ../../../MyProject/MyProject.uproject myMap -filehostip=192.168.0.1
	[REGION:note]
	`-filehostip` 는 게임을 실행하는 PS4 하드웨어가 파악하는 Cook Server 의 IP 주소로 지정해야 합니다.
	[/REGION]
1. 마지막으로, 프로젝트를 **Build** 후 **Run** 합니다.

<!--
- Commented out since this method should NOT be used in its current state, but may be useful in the future as an update to the doc ---

#### Run the Game with an Existing Staged Build

This method deploys an existing cooked build from the developer's machine. It is ideal if assets have not changed (only source) since the last cooked build. Sony's host PC software (Neighborhood) will perform
the deployment under the hood. There are a number of nuances to this approach that are not configured by default, so be sure that each step is performed. 

1. Sony will map the "working directory" to the /app0 folder on the PS4. Overwrite this to use a local staged directory by doing the following:

	* Properties > Debugging > Working Directory: Change to point at the desired staged build. 
	
		MyGame/Saved/StagedBuild/PS4/

1. PS4Launch.cpp changes the root path UE4 uses between "/app0" and "/data/[gamename]" depending on the command line flat "-deployedbuild".
1. Ensure the correct prx stuff in sce_module directory.
1. minefield! 

----- Commented out since this method should NOT be used in its current state, but may be useful in the future as an update to the doc -
-->

### 미리 빌드된 패키지로 게임 실행

이 메서드는 기존에 미리 완전 패키징한 빌드를 PS4 에 설치하고 그 위에 디버깅을 합니다.

이미 패키지(.pkg)에 있는 바이너리를 디버깅하거나 코드 변경을 가한 뒤 패키지에서 실행시킬 때 사용하는 메서드입니다. 이 작업방식에서는 팀원이 매번 게임을 다시 쿠킹하거나 패키징할 필요 없이 
공통의 빌드를 디버깅하거나 코드 변경을 가할 수 있습니다.

1. PS4 에 원하는 기본 패키지를 설치합니다.
1. 빌드 구성을 **Development | PS4** 또는 **Debug Game | PS4** 와 같은 것으로 선택합니다.
1. Visual Studio 에서 **Solution Explorer** 창 아래 게임 프로젝트에 우클릭한 뒤 **Properties** > **Debugging** 을 선택합니다.
1. **Debugger to launch** 드롭다운을 선택한 뒤 "PS4 Standard Debugger" 에서 **PS4 Application Debugger** 로, 그리고 다음 칸 입력 값도 변경합니다.
	* **TitleID** - 올바른 TitleID 로 변경합니다.
	* **Executable Load Location** - 다음 중 하나를 입력합니다:
		* **Auto** - 디플로이된 패키지 안에 정의된 .self 를 사용합니다. Visual Studio 는 패키지 안에 빌드된 바이너리에 붙습니다.
		* **Host** - Visual Studio 가 .self 바이너리 파일을 호스트 PC 에서 바로 로드하도록 합니다. 나타나는 **Host Executable** 칸에 .self 파일 경로를 입력합니다. 예를 들어 로컬 빌드된 바이너리를 사용하는 방법은 다음과 같습니다:
			`MyGameProject\Binaries\PS4\MyGameProject.self` 
		Visual Studio 는 디플로이된 패키지 위에 실행되는 로컬 머신에서 컴파일된 바이너리에 붙습니다.
		* **PS4** - Host 옵션과 같지만, PS4 Executable 에 지정하는 경로가 PS4 하드디스크의 **/data/** 디렉터리를 기준으로 한다는 점이 다릅니다. 이 폴더는 Windows 탐색기에서 네트워크 매핑된 개발 키트 폴더를 통해 접근 가능합니다.
			Visual Studio 는 여기 지정된 바이너리를 디플로이된 패키지 위에 실행시킨 뒤 붙습니다.
	* 옵션으로, **Executable Arguments** 에 부가 게임 명령줄 인수를 붙입니다.
1. Visual Studio 에서 **Play** (초록) 화살표 옆 "PS4 Standard Debugger" 를 **PS4 Application Debugger** 로 변경합니다.
1. 디버깅 시작 단축키는 **F5** 키입니다.


[REGION:note]
"Visual Studio 에서 게임 실행" 메서드를 사용할 때 기억해야할 중요한 점이 몇 가지 있습니다.

* 지정된 .uproject 파일은 PS4 의 .self 파일을 기준으로 하며, Visual Studio 디렉터리 기준이 아닙니다.
* `-filehostip` 는 **Cook On The Fly** 일때만 사용되며, 게임을 실행하는 하드웨어에서 보이는 Cook Server IP 주소를 지정해야 합니다.
* Visual Studio 는 게임 애셋을 디플로이하지 않으므로, 이미 기존에 있거나 Cook On The Fly 서버를 사용해야 합니다.
[/REGION]

<!--
-
[REGION:tip]
PS4 에서, 게임 실행파일 확장자는 .self 이며, 디버그 심볼 파일 확장자는 dwarf 입니다. 엘프에 크래시가 나면 드워프의 조사가 필요한 것입니다.
[/REGION]
-
-->

## Visual Studio 에서 에디터 실행

에디터 자체를 Visual Studio 안에서 실행하려면, 게임 프로젝트를 원하는 Win64 용 Editor 빌드 구성으로 빌드하면 됩니다. 예를 들어 **Development Editor** 또는 **Debug Editor** 입니다.

에디터가 Visual Studio 에서 현재 실행중인 경우 에디터의 프로젝트 런처에서 게임을 실행시킬 수 없을텐데, 해결을 위해서는 **Edit and Continue** 를 꺼야 합니다. 그 방법은 
**Tools** > **Options** > **Debugging** > **General** > **Enable Edit and Continue** 옵션 체크를 해제하면 됩니다.
[/EXCERPT:main]

## 최종 결과

지금까지 Visual Studio 에서 게임이나 에디터 실행을 통해 게임을 디버깅하는 몇 가지 방법에 대해 알아봤습니다. PS4 개발 키트에 디플로이한 콘텐츠를 디버깅하는 데 
도움이 될 것입니다.

마지막 단계로 넘어가세요.


[nav]